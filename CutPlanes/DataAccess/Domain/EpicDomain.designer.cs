#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EpicDataAccess.Domain
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EpicDevNew_20")]
	public partial class EpicDomainDataContext : EpicAudit.LinqToSql.AuditableDataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMeterReading(MeterReading instance);
    partial void UpdateMeterReading(MeterReading instance);
    partial void DeleteMeterReading(MeterReading instance);
    partial void InsertLinkLinesVoltageLevel(LinkLinesVoltageLevel instance);
    partial void UpdateLinkLinesVoltageLevel(LinkLinesVoltageLevel instance);
    partial void DeleteLinkLinesVoltageLevel(LinkLinesVoltageLevel instance);
    partial void InsertGeneratorType(GeneratorType instance);
    partial void UpdateGeneratorType(GeneratorType instance);
    partial void DeleteGeneratorType(GeneratorType instance);
    partial void InsertMeter(Meter instance);
    partial void UpdateMeter(Meter instance);
    partial void DeleteMeter(Meter instance);
    partial void InsertLine(Line instance);
    partial void UpdateLine(Line instance);
    partial void DeleteLine(Line instance);
    partial void InsertNameType(NameType instance);
    partial void UpdateNameType(NameType instance);
    partial void DeleteNameType(NameType instance);
    partial void InsertNameTypeAuthority(NameTypeAuthority instance);
    partial void UpdateNameTypeAuthority(NameTypeAuthority instance);
    partial void DeleteNameTypeAuthority(NameTypeAuthority instance);
    partial void InsertContractType(ContractType instance);
    partial void UpdateContractType(ContractType instance);
    partial void DeleteContractType(ContractType instance);
    partial void InsertContractStatus(ContractStatus instance);
    partial void UpdateContractStatus(ContractStatus instance);
    partial void DeleteContractStatus(ContractStatus instance);
    partial void InsertEpicUser(EpicUser instance);
    partial void UpdateEpicUser(EpicUser instance);
    partial void DeleteEpicUser(EpicUser instance);
    partial void InsertBreaker(Breaker instance);
    partial void UpdateBreaker(Breaker instance);
    partial void DeleteBreaker(Breaker instance);
    partial void InsertTableHistory(TableHistory instance);
    partial void UpdateTableHistory(TableHistory instance);
    partial void DeleteTableHistory(TableHistory instance);
    partial void InsertResourceStatuse(ResourceStatuse instance);
    partial void UpdateResourceStatuse(ResourceStatuse instance);
    partial void DeleteResourceStatuse(ResourceStatuse instance);
    partial void InsertVoltageLevel(VoltageLevel instance);
    partial void UpdateVoltageLevel(VoltageLevel instance);
    partial void DeleteVoltageLevel(VoltageLevel instance);
    partial void InsertName(Name instance);
    partial void UpdateName(Name instance);
    partial void DeleteName(Name instance);
    partial void InsertLinkElectricityPurchaseAgreementsSubstation(LinkElectricityPurchaseAgreementsSubstation instance);
    partial void UpdateLinkElectricityPurchaseAgreementsSubstation(LinkElectricityPurchaseAgreementsSubstation instance);
    partial void DeleteLinkElectricityPurchaseAgreementsSubstation(LinkElectricityPurchaseAgreementsSubstation instance);
    partial void InsertLoad(Load instance);
    partial void UpdateLoad(Load instance);
    partial void DeleteLoad(Load instance);
    partial void InsertPowerCall(PowerCall instance);
    partial void UpdatePowerCall(PowerCall instance);
    partial void DeletePowerCall(PowerCall instance);
    partial void InsertEPAStatuse(EPAStatuse instance);
    partial void UpdateEPAStatuse(EPAStatuse instance);
    partial void DeleteEPAStatuse(EPAStatuse instance);
    partial void InsertGeneratorAttribute(GeneratorAttribute instance);
    partial void UpdateGeneratorAttribute(GeneratorAttribute instance);
    partial void DeleteGeneratorAttribute(GeneratorAttribute instance);
    partial void InsertBaseVoltage(BaseVoltage instance);
    partial void UpdateBaseVoltage(BaseVoltage instance);
    partial void DeleteBaseVoltage(BaseVoltage instance);
    partial void InsertGeneratingUnit(GeneratingUnit instance);
    partial void UpdateGeneratingUnit(GeneratingUnit instance);
    partial void DeleteGeneratingUnit(GeneratingUnit instance);
    partial void InsertResourcePlanType(ResourcePlanType instance);
    partial void UpdateResourcePlanType(ResourcePlanType instance);
    partial void DeleteResourcePlanType(ResourcePlanType instance);
    partial void InsertResourcePlan(ResourcePlan instance);
    partial void UpdateResourcePlan(ResourcePlan instance);
    partial void DeleteResourcePlan(ResourcePlan instance);
    partial void InsertFiscalYear(FiscalYear instance);
    partial void UpdateFiscalYear(FiscalYear instance);
    partial void DeleteFiscalYear(FiscalYear instance);
    partial void InsertOwnershipType(OwnershipType instance);
    partial void UpdateOwnershipType(OwnershipType instance);
    partial void DeleteOwnershipType(OwnershipType instance);
    partial void InsertNote(Note instance);
    partial void UpdateNote(Note instance);
    partial void DeleteNote(Note instance);
    partial void InsertElectricityPurchaseAgreement(ElectricityPurchaseAgreement instance);
    partial void UpdateElectricityPurchaseAgreement(ElectricityPurchaseAgreement instance);
    partial void DeleteElectricityPurchaseAgreement(ElectricityPurchaseAgreement instance);
    partial void InsertBatch(Batch instance);
    partial void UpdateBatch(Batch instance);
    partial void DeleteBatch(Batch instance);
    partial void InsertBatchType(BatchType instance);
    partial void UpdateBatchType(BatchType instance);
    partial void DeleteBatchType(BatchType instance);
    partial void InsertSubstationType(SubstationType instance);
    partial void UpdateSubstationType(SubstationType instance);
    partial void DeleteSubstationType(SubstationType instance);
    partial void InsertFuelType(FuelType instance);
    partial void UpdateFuelType(FuelType instance);
    partial void DeleteFuelType(FuelType instance);
    partial void InsertElectricalGroup(ElectricalGroup instance);
    partial void UpdateElectricalGroup(ElectricalGroup instance);
    partial void DeleteElectricalGroup(ElectricalGroup instance);
    partial void InsertLinkElectricalGroupToLTAPSubRegion(LinkElectricalGroupToLTAPSubRegion instance);
    partial void UpdateLinkElectricalGroupToLTAPSubRegion(LinkElectricalGroupToLTAPSubRegion instance);
    partial void DeleteLinkElectricalGroupToLTAPSubRegion(LinkElectricalGroupToLTAPSubRegion instance);
    partial void InsertLTAPSubRegion(LTAPSubRegion instance);
    partial void UpdateLTAPSubRegion(LTAPSubRegion instance);
    partial void DeleteLTAPSubRegion(LTAPSubRegion instance);
    partial void InsertSubstation(Substation instance);
    partial void UpdateSubstation(Substation instance);
    partial void DeleteSubstation(Substation instance);
    partial void InsertAuditRecord(AuditRecord instance);
    partial void UpdateAuditRecord(AuditRecord instance);
    partial void DeleteAuditRecord(AuditRecord instance);
    partial void InsertAuditRecordField(AuditRecordField instance);
    partial void UpdateAuditRecordField(AuditRecordField instance);
    partial void DeleteAuditRecordField(AuditRecordField instance);
    partial void InsertSubstationAttribute(SubstationAttribute instance);
    partial void UpdateSubstationAttribute(SubstationAttribute instance);
    partial void DeleteSubstationAttribute(SubstationAttribute instance);
    partial void InsertMap(Map instance);
    partial void UpdateMap(Map instance);
    partial void DeleteMap(Map instance);
    partial void InsertLinkTsrSubstation(LinkTsrSubstation instance);
    partial void UpdateLinkTsrSubstation(LinkTsrSubstation instance);
    partial void DeleteLinkTsrSubstation(LinkTsrSubstation instance);
    partial void InsertLinkResourceBundleElectricalGroup(LinkResourceBundleElectricalGroup instance);
    partial void UpdateLinkResourceBundleElectricalGroup(LinkResourceBundleElectricalGroup instance);
    partial void DeleteLinkResourceBundleElectricalGroup(LinkResourceBundleElectricalGroup instance);
    partial void InsertMapType(MapType instance);
    partial void UpdateMapType(MapType instance);
    partial void DeleteMapType(MapType instance);
    partial void InsertTransmissionServiceRequest(TransmissionServiceRequest instance);
    partial void UpdateTransmissionServiceRequest(TransmissionServiceRequest instance);
    partial void DeleteTransmissionServiceRequest(TransmissionServiceRequest instance);
    partial void InsertFileReference(FileReference instance);
    partial void UpdateFileReference(FileReference instance);
    partial void DeleteFileReference(FileReference instance);
    partial void InsertLinkTsrGeneratingUnit(LinkTsrGeneratingUnit instance);
    partial void UpdateLinkTsrGeneratingUnit(LinkTsrGeneratingUnit instance);
    partial void DeleteLinkTsrGeneratingUnit(LinkTsrGeneratingUnit instance);
    partial void InsertLinkTsrProject(LinkTsrProject instance);
    partial void UpdateLinkTsrProject(LinkTsrProject instance);
    partial void DeleteLinkTsrProject(LinkTsrProject instance);
    partial void InsertResourceBundleAttribute(ResourceBundleAttribute instance);
    partial void UpdateResourceBundleAttribute(ResourceBundleAttribute instance);
    partial void DeleteResourceBundleAttribute(ResourceBundleAttribute instance);
    partial void InsertResourceBundle(ResourceBundle instance);
    partial void UpdateResourceBundle(ResourceBundle instance);
    partial void DeleteResourceBundle(ResourceBundle instance);
    partial void InsertLinkSubstationElectricalGroup(LinkSubstationElectricalGroup instance);
    partial void UpdateLinkSubstationElectricalGroup(LinkSubstationElectricalGroup instance);
    partial void DeleteLinkSubstationElectricalGroup(LinkSubstationElectricalGroup instance);
    partial void InsertNotesType(NotesType instance);
    partial void UpdateNotesType(NotesType instance);
    partial void DeleteNotesType(NotesType instance);
    partial void InsertTvcFacilityStage(TvcFacilityStage instance);
    partial void UpdateTvcFacilityStage(TvcFacilityStage instance);
    partial void DeleteTvcFacilityStage(TvcFacilityStage instance);
    partial void InsertTvcFacilityStatuse(TvcFacilityStatuse instance);
    partial void UpdateTvcFacilityStatuse(TvcFacilityStatuse instance);
    partial void DeleteTvcFacilityStatuse(TvcFacilityStatuse instance);
    partial void InsertTvcFacilityType(TvcFacilityType instance);
    partial void UpdateTvcFacilityType(TvcFacilityType instance);
    partial void DeleteTvcFacilityType(TvcFacilityType instance);
    partial void InsertLinkTsrTvc(LinkTsrTvc instance);
    partial void UpdateLinkTsrTvc(LinkTsrTvc instance);
    partial void DeleteLinkTsrTvc(LinkTsrTvc instance);
    partial void InsertTvcStagedLoadMeasure(TvcStagedLoadMeasure instance);
    partial void UpdateTvcStagedLoadMeasure(TvcStagedLoadMeasure instance);
    partial void DeleteTvcStagedLoadMeasure(TvcStagedLoadMeasure instance);
    partial void InsertTransmissionVoltageCustomer(TransmissionVoltageCustomer instance);
    partial void UpdateTransmissionVoltageCustomer(TransmissionVoltageCustomer instance);
    partial void DeleteTransmissionVoltageCustomer(TransmissionVoltageCustomer instance);
    partial void InsertFacilityTempCode(FacilityTempCode instance);
    partial void UpdateFacilityTempCode(FacilityTempCode instance);
    partial void DeleteFacilityTempCode(FacilityTempCode instance);
    partial void InsertFacilityCodeType(FacilityCodeType instance);
    partial void UpdateFacilityCodeType(FacilityCodeType instance);
    partial void DeleteFacilityCodeType(FacilityCodeType instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertLinkNote(LinkNote instance);
    partial void UpdateLinkNote(LinkNote instance);
    partial void DeleteLinkNote(LinkNote instance);
    partial void InsertLoadAttribute(LoadAttribute instance);
    partial void UpdateLoadAttribute(LoadAttribute instance);
    partial void DeleteLoadAttribute(LoadAttribute instance);
    partial void InsertTransVoltageCustLoadForecast(TransVoltageCustLoadForecast instance);
    partial void UpdateTransVoltageCustLoadForecast(TransVoltageCustLoadForecast instance);
    partial void DeleteTransVoltageCustLoadForecast(TransVoltageCustLoadForecast instance);
    partial void InsertDimTvcLdScenario(DimTvcLdScenario instance);
    partial void UpdateDimTvcLdScenario(DimTvcLdScenario instance);
    partial void DeleteDimTvcLdScenario(DimTvcLdScenario instance);
    partial void InsertDimTvcLdTimePeriod(DimTvcLdTimePeriod instance);
    partial void UpdateDimTvcLdTimePeriod(DimTvcLdTimePeriod instance);
    partial void DeleteDimTvcLdTimePeriod(DimTvcLdTimePeriod instance);
    partial void InsertDimTvcLdTransVoltCustomer(DimTvcLdTransVoltCustomer instance);
    partial void UpdateDimTvcLdTransVoltCustomer(DimTvcLdTransVoltCustomer instance);
    partial void DeleteDimTvcLdTransVoltCustomer(DimTvcLdTransVoltCustomer instance);
    partial void InsertDimTvcLdFacility(DimTvcLdFacility instance);
    partial void UpdateDimTvcLdFacility(DimTvcLdFacility instance);
    partial void DeleteDimTvcLdFacility(DimTvcLdFacility instance);
    partial void InsertTransVoltageCustForecastLoadFact(TransVoltageCustForecastLoadFact instance);
    partial void UpdateTransVoltageCustForecastLoadFact(TransVoltageCustForecastLoadFact instance);
    partial void DeleteTransVoltageCustForecastLoadFact(TransVoltageCustForecastLoadFact instance);
    partial void InsertTvcForecast(TvcForecast instance);
    partial void UpdateTvcForecast(TvcForecast instance);
    partial void DeleteTvcForecast(TvcForecast instance);
    partial void InsertDimTvcScenario(DimTvcScenario instance);
    partial void UpdateDimTvcScenario(DimTvcScenario instance);
    partial void DeleteDimTvcScenario(DimTvcScenario instance);
    partial void InsertDimTvcTransServiceRequest(DimTvcTransServiceRequest instance);
    partial void UpdateDimTvcTransServiceRequest(DimTvcTransServiceRequest instance);
    partial void DeleteDimTvcTransServiceRequest(DimTvcTransServiceRequest instance);
    partial void InsertDimTvcStatuse(DimTvcStatuse instance);
    partial void UpdateDimTvcStatuse(DimTvcStatuse instance);
    partial void DeleteDimTvcStatuse(DimTvcStatuse instance);
    partial void InsertDimTvcTimePeriod(DimTvcTimePeriod instance);
    partial void UpdateDimTvcTimePeriod(DimTvcTimePeriod instance);
    partial void DeleteDimTvcTimePeriod(DimTvcTimePeriod instance);
    partial void InsertDimTvcKiloVolt(DimTvcKiloVolt instance);
    partial void UpdateDimTvcKiloVolt(DimTvcKiloVolt instance);
    partial void DeleteDimTvcKiloVolt(DimTvcKiloVolt instance);
    partial void InsertDimTvcStage(DimTvcStage instance);
    partial void UpdateDimTvcStage(DimTvcStage instance);
    partial void DeleteDimTvcStage(DimTvcStage instance);
    partial void InsertDimTvcLine(DimTvcLine instance);
    partial void UpdateDimTvcLine(DimTvcLine instance);
    partial void DeleteDimTvcLine(DimTvcLine instance);
    partial void InsertDimTvcRate(DimTvcRate instance);
    partial void UpdateDimTvcRate(DimTvcRate instance);
    partial void DeleteDimTvcRate(DimTvcRate instance);
    partial void InsertResourceOptionAttribute(ResourceOptionAttribute instance);
    partial void UpdateResourceOptionAttribute(ResourceOptionAttribute instance);
    partial void DeleteResourceOptionAttribute(ResourceOptionAttribute instance);
    partial void InsertDimTvcCustomer(DimTvcCustomer instance);
    partial void UpdateDimTvcCustomer(DimTvcCustomer instance);
    partial void DeleteDimTvcCustomer(DimTvcCustomer instance);
    partial void InsertDimTvcSubstation(DimTvcSubstation instance);
    partial void UpdateDimTvcSubstation(DimTvcSubstation instance);
    partial void DeleteDimTvcSubstation(DimTvcSubstation instance);
    partial void InsertTvcForecastFact(TvcForecastFact instance);
    partial void UpdateTvcForecastFact(TvcForecastFact instance);
    partial void DeleteTvcForecastFact(TvcForecastFact instance);
    partial void InsertDimTvcTransVoltCustomer(DimTvcTransVoltCustomer instance);
    partial void UpdateDimTvcTransVoltCustomer(DimTvcTransVoltCustomer instance);
    partial void DeleteDimTvcTransVoltCustomer(DimTvcTransVoltCustomer instance);
    #endregion
		
		public EpicDomainDataContext() : 
				base(global::EpicDataAccess.Properties.Settings.Default.EpicDevNew_20ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EpicDomainDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EpicDomainDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EpicDomainDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EpicDomainDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MeterReading> MeterReadings
		{
			get
			{
				return this.GetTable<MeterReading>();
			}
		}
		
		public System.Data.Linq.Table<LinkLinesVoltageLevel> LinkLinesVoltageLevels
		{
			get
			{
				return this.GetTable<LinkLinesVoltageLevel>();
			}
		}
		
		public System.Data.Linq.Table<GeneratorType> GeneratorTypes
		{
			get
			{
				return this.GetTable<GeneratorType>();
			}
		}
		
		public System.Data.Linq.Table<Meter> Meters
		{
			get
			{
				return this.GetTable<Meter>();
			}
		}
		
		public System.Data.Linq.Table<Line> Lines
		{
			get
			{
				return this.GetTable<Line>();
			}
		}
		
		public System.Data.Linq.Table<NameType> NameTypes
		{
			get
			{
				return this.GetTable<NameType>();
			}
		}
		
		public System.Data.Linq.Table<NameTypeAuthority> NameTypeAuthorities
		{
			get
			{
				return this.GetTable<NameTypeAuthority>();
			}
		}
		
		public System.Data.Linq.Table<ContractType> ContractTypes
		{
			get
			{
				return this.GetTable<ContractType>();
			}
		}
		
		public System.Data.Linq.Table<ContractStatus> ContractStatus
		{
			get
			{
				return this.GetTable<ContractStatus>();
			}
		}
		
		public System.Data.Linq.Table<EpicUser> EpicUsers
		{
			get
			{
				return this.GetTable<EpicUser>();
			}
		}
		
		public System.Data.Linq.Table<Breaker> Breakers
		{
			get
			{
				return this.GetTable<Breaker>();
			}
		}
		
		public System.Data.Linq.Table<TableHistory> TableHistories
		{
			get
			{
				return this.GetTable<TableHistory>();
			}
		}
		
		public System.Data.Linq.Table<SubstationsSubstationAttributesView> SubstationsSubstationAttributesViews
		{
			get
			{
				return this.GetTable<SubstationsSubstationAttributesView>();
			}
		}
		
		public System.Data.Linq.Table<ResourceStatuse> ResourceStatuses
		{
			get
			{
				return this.GetTable<ResourceStatuse>();
			}
		}
		
		public System.Data.Linq.Table<VoltageLevel> VoltageLevels
		{
			get
			{
				return this.GetTable<VoltageLevel>();
			}
		}
		
		public System.Data.Linq.Table<Name> Names
		{
			get
			{
				return this.GetTable<Name>();
			}
		}
		
		public System.Data.Linq.Table<LinkElectricityPurchaseAgreementsSubstation> LinkElectricityPurchaseAgreementsSubstations
		{
			get
			{
				return this.GetTable<LinkElectricityPurchaseAgreementsSubstation>();
			}
		}
		
		public System.Data.Linq.Table<Load> Loads
		{
			get
			{
				return this.GetTable<Load>();
			}
		}
		
		public System.Data.Linq.Table<PowerCall> PowerCalls
		{
			get
			{
				return this.GetTable<PowerCall>();
			}
		}
		
		public System.Data.Linq.Table<EPAStatuse> EPAStatuses
		{
			get
			{
				return this.GetTable<EPAStatuse>();
			}
		}
		
		public System.Data.Linq.Table<GeneratorAttribute> GeneratorAttributes
		{
			get
			{
				return this.GetTable<GeneratorAttribute>();
			}
		}
		
		public System.Data.Linq.Table<BaseVoltage> BaseVoltages
		{
			get
			{
				return this.GetTable<BaseVoltage>();
			}
		}
		
		public System.Data.Linq.Table<GeneratingUnit> GeneratingUnits
		{
			get
			{
				return this.GetTable<GeneratingUnit>();
			}
		}
		
		public System.Data.Linq.Table<ResourcePlanType> ResourcePlanTypes
		{
			get
			{
				return this.GetTable<ResourcePlanType>();
			}
		}
		
		public System.Data.Linq.Table<ResourcePlan> ResourcePlans
		{
			get
			{
				return this.GetTable<ResourcePlan>();
			}
		}
		
		public System.Data.Linq.Table<FiscalYear> FiscalYears
		{
			get
			{
				return this.GetTable<FiscalYear>();
			}
		}
		
		public System.Data.Linq.Table<OwnershipType> OwnershipTypes
		{
			get
			{
				return this.GetTable<OwnershipType>();
			}
		}
		
		public System.Data.Linq.Table<Note> Notes
		{
			get
			{
				return this.GetTable<Note>();
			}
		}
		
		public System.Data.Linq.Table<ElectricityPurchaseAgreement> ElectricityPurchaseAgreements
		{
			get
			{
				return this.GetTable<ElectricityPurchaseAgreement>();
			}
		}
		
		public System.Data.Linq.Table<Batch> Batches
		{
			get
			{
				return this.GetTable<Batch>();
			}
		}
		
		public System.Data.Linq.Table<BatchType> BatchTypes
		{
			get
			{
				return this.GetTable<BatchType>();
			}
		}
		
		public System.Data.Linq.Table<SubstationType> SubstationTypes
		{
			get
			{
				return this.GetTable<SubstationType>();
			}
		}
		
		public System.Data.Linq.Table<FuelType> FuelTypes
		{
			get
			{
				return this.GetTable<FuelType>();
			}
		}
		
		public System.Data.Linq.Table<ElectricalGroup> ElectricalGroups
		{
			get
			{
				return this.GetTable<ElectricalGroup>();
			}
		}
		
		public System.Data.Linq.Table<LinkElectricalGroupToLTAPSubRegion> LinkElectricalGroupToLTAPSubRegions
		{
			get
			{
				return this.GetTable<LinkElectricalGroupToLTAPSubRegion>();
			}
		}
		
		public System.Data.Linq.Table<LTAPSubRegion> LTAPSubRegions
		{
			get
			{
				return this.GetTable<LTAPSubRegion>();
			}
		}
		
		public System.Data.Linq.Table<Substation> Substations
		{
			get
			{
				return this.GetTable<Substation>();
			}
		}
		
		public System.Data.Linq.Table<AuditRecord> AuditRecords
		{
			get
			{
				return this.GetTable<AuditRecord>();
			}
		}
		
		public System.Data.Linq.Table<AuditRecordField> AuditRecordFields
		{
			get
			{
				return this.GetTable<AuditRecordField>();
			}
		}
		
		public System.Data.Linq.Table<SubstationAttribute> SubstationAttributes
		{
			get
			{
				return this.GetTable<SubstationAttribute>();
			}
		}
		
		public System.Data.Linq.Table<Map> Maps
		{
			get
			{
				return this.GetTable<Map>();
			}
		}
		
		public System.Data.Linq.Table<LinkTsrSubstation> LinkTsrSubstations
		{
			get
			{
				return this.GetTable<LinkTsrSubstation>();
			}
		}
		
		public System.Data.Linq.Table<LinkResourceBundleElectricalGroup> LinkResourceBundleElectricalGroups
		{
			get
			{
				return this.GetTable<LinkResourceBundleElectricalGroup>();
			}
		}
		
		public System.Data.Linq.Table<MapType> MapTypes
		{
			get
			{
				return this.GetTable<MapType>();
			}
		}
		
		public System.Data.Linq.Table<TransmissionServiceRequest> TransmissionServiceRequests
		{
			get
			{
				return this.GetTable<TransmissionServiceRequest>();
			}
		}
		
		public System.Data.Linq.Table<FileReference> FileReferences
		{
			get
			{
				return this.GetTable<FileReference>();
			}
		}
		
		public System.Data.Linq.Table<LinkTsrGeneratingUnit> LinkTsrGeneratingUnits
		{
			get
			{
				return this.GetTable<LinkTsrGeneratingUnit>();
			}
		}
		
		public System.Data.Linq.Table<LinkTsrProject> LinkTsrProjects
		{
			get
			{
				return this.GetTable<LinkTsrProject>();
			}
		}
		
		public System.Data.Linq.Table<ResourceBundleAttribute> ResourceBundleAttributes
		{
			get
			{
				return this.GetTable<ResourceBundleAttribute>();
			}
		}
		
		public System.Data.Linq.Table<ResourceBundle> ResourceBundles
		{
			get
			{
				return this.GetTable<ResourceBundle>();
			}
		}
		
		public System.Data.Linq.Table<LinkSubstationElectricalGroup> LinkSubstationElectricalGroups
		{
			get
			{
				return this.GetTable<LinkSubstationElectricalGroup>();
			}
		}
		
		public System.Data.Linq.Table<NotesType> NotesTypes
		{
			get
			{
				return this.GetTable<NotesType>();
			}
		}
		
		public System.Data.Linq.Table<TvcFacilityStage> TvcFacilityStages
		{
			get
			{
				return this.GetTable<TvcFacilityStage>();
			}
		}
		
		public System.Data.Linq.Table<TvcFacilityStatuse> TvcFacilityStatuses
		{
			get
			{
				return this.GetTable<TvcFacilityStatuse>();
			}
		}
		
		public System.Data.Linq.Table<TvcFacilityType> TvcFacilityTypes
		{
			get
			{
				return this.GetTable<TvcFacilityType>();
			}
		}
		
		public System.Data.Linq.Table<LinkTsrTvc> LinkTsrTvcs
		{
			get
			{
				return this.GetTable<LinkTsrTvc>();
			}
		}
		
		public System.Data.Linq.Table<TvcStagedLoadMeasure> TvcStagedLoadMeasures
		{
			get
			{
				return this.GetTable<TvcStagedLoadMeasure>();
			}
		}
		
		public System.Data.Linq.Table<TransmissionVoltageCustomer> TransmissionVoltageCustomers
		{
			get
			{
				return this.GetTable<TransmissionVoltageCustomer>();
			}
		}
		
		public System.Data.Linq.Table<FacilityTempCode> FacilityTempCodes
		{
			get
			{
				return this.GetTable<FacilityTempCode>();
			}
		}
		
		public System.Data.Linq.Table<FacilityCodeType> FacilityCodeTypes
		{
			get
			{
				return this.GetTable<FacilityCodeType>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<LinkNote> LinkNotes
		{
			get
			{
				return this.GetTable<LinkNote>();
			}
		}
		
		public System.Data.Linq.Table<LoadAttribute> LoadAttributes
		{
			get
			{
				return this.GetTable<LoadAttribute>();
			}
		}
		
		public System.Data.Linq.Table<TransVoltageCustLoadForecast> TransVoltageCustLoadForecasts
		{
			get
			{
				return this.GetTable<TransVoltageCustLoadForecast>();
			}
		}
		
		public System.Data.Linq.Table<DimTvcLdScenario> DimTvcLdScenarios
		{
			get
			{
				return this.GetTable<DimTvcLdScenario>();
			}
		}
		
		public System.Data.Linq.Table<DimTvcLdTimePeriod> DimTvcLdTimePeriods
		{
			get
			{
				return this.GetTable<DimTvcLdTimePeriod>();
			}
		}
		
		public System.Data.Linq.Table<DimTvcLdTransVoltCustomer> DimTvcLdTransVoltCustomers
		{
			get
			{
				return this.GetTable<DimTvcLdTransVoltCustomer>();
			}
		}
		
		public System.Data.Linq.Table<DimTvcLdFacility> DimTvcLdFacilities
		{
			get
			{
				return this.GetTable<DimTvcLdFacility>();
			}
		}
		
		public System.Data.Linq.Table<TransVoltageCustForecastLoadFact> TransVoltageCustForecastLoadFacts
		{
			get
			{
				return this.GetTable<TransVoltageCustForecastLoadFact>();
			}
		}
		
		public System.Data.Linq.Table<TvcForecast> TvcForecasts
		{
			get
			{
				return this.GetTable<TvcForecast>();
			}
		}
		
		public System.Data.Linq.Table<DimTvcScenario> DimTvcScenarios
		{
			get
			{
				return this.GetTable<DimTvcScenario>();
			}
		}
		
		public System.Data.Linq.Table<DimTvcTransServiceRequest> DimTvcTransServiceRequests
		{
			get
			{
				return this.GetTable<DimTvcTransServiceRequest>();
			}
		}
		
		public System.Data.Linq.Table<DimTvcStatuse> DimTvcStatuses
		{
			get
			{
				return this.GetTable<DimTvcStatuse>();
			}
		}
		
		public System.Data.Linq.Table<DimTvcTimePeriod> DimTvcTimePeriods
		{
			get
			{
				return this.GetTable<DimTvcTimePeriod>();
			}
		}
		
		public System.Data.Linq.Table<DimTvcKiloVolt> DimTvcKiloVolts
		{
			get
			{
				return this.GetTable<DimTvcKiloVolt>();
			}
		}
		
		public System.Data.Linq.Table<DimTvcStage> DimTvcStages
		{
			get
			{
				return this.GetTable<DimTvcStage>();
			}
		}
		
		public System.Data.Linq.Table<DimTvcLine> DimTvcLines
		{
			get
			{
				return this.GetTable<DimTvcLine>();
			}
		}
		
		public System.Data.Linq.Table<DimTvcRate> DimTvcRates
		{
			get
			{
				return this.GetTable<DimTvcRate>();
			}
		}
		
		public System.Data.Linq.Table<ResourceOptionAttribute> ResourceOptionAttributes
		{
			get
			{
				return this.GetTable<ResourceOptionAttribute>();
			}
		}
		
		public System.Data.Linq.Table<DimTvcCustomer> DimTvcCustomers
		{
			get
			{
				return this.GetTable<DimTvcCustomer>();
			}
		}
		
		public System.Data.Linq.Table<DimTvcSubstation> DimTvcSubstations
		{
			get
			{
				return this.GetTable<DimTvcSubstation>();
			}
		}
		
		public System.Data.Linq.Table<TvcForecastFact> TvcForecastFacts
		{
			get
			{
				return this.GetTable<TvcForecastFact>();
			}
		}
		
		public System.Data.Linq.Table<DimTvcTransVoltCustomer> DimTvcTransVoltCustomers
		{
			get
			{
				return this.GetTable<DimTvcTransVoltCustomer>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.MeterReadings")]
	public partial class MeterReading : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MeterId;
		
		private int _ChannelNumber;
		
		private System.DateTime _ReadingDate;
		
		private int _ReadingInterval;
		
		private int _SequenceNumber;
		
		private decimal _Value;
		
		private EntityRef<Meter> _Meter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMeterIdChanging(int value);
    partial void OnMeterIdChanged();
    partial void OnChannelNumberChanging(int value);
    partial void OnChannelNumberChanged();
    partial void OnReadingDateChanging(System.DateTime value);
    partial void OnReadingDateChanged();
    partial void OnReadingIntervalChanging(int value);
    partial void OnReadingIntervalChanged();
    partial void OnSequenceNumberChanging(int value);
    partial void OnSequenceNumberChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    #endregion
		
		public MeterReading()
		{
			this._Meter = default(EntityRef<Meter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterId", DbType="Int NOT NULL")]
		public int MeterId
		{
			get
			{
				return this._MeterId;
			}
			set
			{
				if ((this._MeterId != value))
				{
					if (this._Meter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeterIdChanging(value);
					this.SendPropertyChanging();
					this._MeterId = value;
					this.SendPropertyChanged("MeterId");
					this.OnMeterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChannelNumber", DbType="Int NOT NULL")]
		public int ChannelNumber
		{
			get
			{
				return this._ChannelNumber;
			}
			set
			{
				if ((this._ChannelNumber != value))
				{
					this.OnChannelNumberChanging(value);
					this.SendPropertyChanging();
					this._ChannelNumber = value;
					this.SendPropertyChanged("ChannelNumber");
					this.OnChannelNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadingDate", DbType="Date NOT NULL")]
		public System.DateTime ReadingDate
		{
			get
			{
				return this._ReadingDate;
			}
			set
			{
				if ((this._ReadingDate != value))
				{
					this.OnReadingDateChanging(value);
					this.SendPropertyChanging();
					this._ReadingDate = value;
					this.SendPropertyChanged("ReadingDate");
					this.OnReadingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadingInterval", DbType="Int NOT NULL")]
		public int ReadingInterval
		{
			get
			{
				return this._ReadingInterval;
			}
			set
			{
				if ((this._ReadingInterval != value))
				{
					this.OnReadingIntervalChanging(value);
					this.SendPropertyChanging();
					this._ReadingInterval = value;
					this.SendPropertyChanged("ReadingInterval");
					this.OnReadingIntervalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SequenceNumber", DbType="Int NOT NULL")]
		public int SequenceNumber
		{
			get
			{
				return this._SequenceNumber;
			}
			set
			{
				if ((this._SequenceNumber != value))
				{
					this.OnSequenceNumberChanging(value);
					this.SendPropertyChanging();
					this._SequenceNumber = value;
					this.SendPropertyChanged("SequenceNumber");
					this.OnSequenceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(12,2) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_MeterReading", Storage="_Meter", ThisKey="MeterId", OtherKey="Id", IsForeignKey=true)]
		public Meter Meter
		{
			get
			{
				return this._Meter.Entity;
			}
			set
			{
				Meter previousValue = this._Meter.Entity;
				if (((previousValue != value) 
							|| (this._Meter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meter.Entity = null;
						previousValue.MeterReadings.Remove(this);
					}
					this._Meter.Entity = value;
					if ((value != null))
					{
						value.MeterReadings.Add(this);
						this._MeterId = value.Id;
					}
					else
					{
						this._MeterId = default(int);
					}
					this.SendPropertyChanged("Meter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="link.LinkLinesVoltageLevels")]
	public partial class LinkLinesVoltageLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _VoltageLevelId;
		
		private int _LineId;
		
		private EntityRef<Line> _Line;
		
		private EntityRef<VoltageLevel> _VoltageLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVoltageLevelIdChanging(int value);
    partial void OnVoltageLevelIdChanged();
    partial void OnLineIdChanging(int value);
    partial void OnLineIdChanged();
    #endregion
		
		public LinkLinesVoltageLevel()
		{
			this._Line = default(EntityRef<Line>);
			this._VoltageLevel = default(EntityRef<VoltageLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoltageLevelId", DbType="Int NOT NULL")]
		public int VoltageLevelId
		{
			get
			{
				return this._VoltageLevelId;
			}
			set
			{
				if ((this._VoltageLevelId != value))
				{
					if (this._VoltageLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoltageLevelIdChanging(value);
					this.SendPropertyChanging();
					this._VoltageLevelId = value;
					this.SendPropertyChanged("VoltageLevelId");
					this.OnVoltageLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineId", DbType="Int NOT NULL")]
		public int LineId
		{
			get
			{
				return this._LineId;
			}
			set
			{
				if ((this._LineId != value))
				{
					if (this._Line.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLineIdChanging(value);
					this.SendPropertyChanging();
					this._LineId = value;
					this.SendPropertyChanged("LineId");
					this.OnLineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Line_LinkLinesVoltageLevel", Storage="_Line", ThisKey="LineId", OtherKey="Id", IsForeignKey=true)]
		public Line Line
		{
			get
			{
				return this._Line.Entity;
			}
			set
			{
				Line previousValue = this._Line.Entity;
				if (((previousValue != value) 
							|| (this._Line.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Line.Entity = null;
						previousValue.LinkLinesVoltageLevels.Remove(this);
					}
					this._Line.Entity = value;
					if ((value != null))
					{
						value.LinkLinesVoltageLevels.Add(this);
						this._LineId = value.Id;
					}
					else
					{
						this._LineId = default(int);
					}
					this.SendPropertyChanged("Line");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoltageLevel_LinkLinesVoltageLevel", Storage="_VoltageLevel", ThisKey="VoltageLevelId", OtherKey="Id", IsForeignKey=true)]
		public VoltageLevel VoltageLevel
		{
			get
			{
				return this._VoltageLevel.Entity;
			}
			set
			{
				VoltageLevel previousValue = this._VoltageLevel.Entity;
				if (((previousValue != value) 
							|| (this._VoltageLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VoltageLevel.Entity = null;
						previousValue.LinkLinesVoltageLevels.Remove(this);
					}
					this._VoltageLevel.Entity = value;
					if ((value != null))
					{
						value.LinkLinesVoltageLevels.Add(this);
						this._VoltageLevelId = value.Id;
					}
					else
					{
						this._VoltageLevelId = default(int);
					}
					this.SendPropertyChanged("VoltageLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.GeneratorTypes")]
	public partial class GeneratorType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Value;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<int> _UserCreatedId;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnUserCreatedIdChanging(System.Nullable<int> value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    #endregion
		
		public GeneratorType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int")]
		public System.Nullable<int> UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.Meters")]
	public partial class Meter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _MeterNumber;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private EntitySet<MeterReading> _MeterReadings;
		
		private EntitySet<Substation> _Substations;
		
		private EntitySet<LinkNote> _LinkNotes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMeterNumberChanging(string value);
    partial void OnMeterNumberChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    #endregion
		
		public Meter()
		{
			this._MeterReadings = new EntitySet<MeterReading>(new Action<MeterReading>(this.attach_MeterReadings), new Action<MeterReading>(this.detach_MeterReadings));
			this._Substations = new EntitySet<Substation>(new Action<Substation>(this.attach_Substations), new Action<Substation>(this.detach_Substations));
			this._LinkNotes = new EntitySet<LinkNote>(new Action<LinkNote>(this.attach_LinkNotes), new Action<LinkNote>(this.detach_LinkNotes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MeterNumber
		{
			get
			{
				return this._MeterNumber;
			}
			set
			{
				if ((this._MeterNumber != value))
				{
					this.OnMeterNumberChanging(value);
					this.SendPropertyChanging();
					this._MeterNumber = value;
					this.SendPropertyChanged("MeterNumber");
					this.OnMeterNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_MeterReading", Storage="_MeterReadings", ThisKey="Id", OtherKey="MeterId")]
		public EntitySet<MeterReading> MeterReadings
		{
			get
			{
				return this._MeterReadings;
			}
			set
			{
				this._MeterReadings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_Substation", Storage="_Substations", ThisKey="Id", OtherKey="MeterId")]
		public EntitySet<Substation> Substations
		{
			get
			{
				return this._Substations;
			}
			set
			{
				this._Substations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_LinkNote", Storage="_LinkNotes", ThisKey="Id", OtherKey="MeterId")]
		public EntitySet<LinkNote> LinkNotes
		{
			get
			{
				return this._LinkNotes;
			}
			set
			{
				this._LinkNotes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MeterReadings(MeterReading entity)
		{
			this.SendPropertyChanging();
			entity.Meter = this;
		}
		
		private void detach_MeterReadings(MeterReading entity)
		{
			this.SendPropertyChanging();
			entity.Meter = null;
		}
		
		private void attach_Substations(Substation entity)
		{
			this.SendPropertyChanging();
			entity.Meter = this;
		}
		
		private void detach_Substations(Substation entity)
		{
			this.SendPropertyChanging();
			entity.Meter = null;
		}
		
		private void attach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.Meter = this;
		}
		
		private void detach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.Meter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.Lines")]
	public partial class Line : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _OriginalPk;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<decimal> _Bch;
		
		private string _Name;
		
		private System.Nullable<int> _VoltageId;
		
		private System.Nullable<decimal> _Resistance;
		
		private System.Nullable<decimal> _Reactance;
		
		private EntitySet<LinkLinesVoltageLevel> _LinkLinesVoltageLevels;
		
		private EntitySet<LinkNote> _LinkNotes;
		
		private EntityRef<BaseVoltage> _BaseVoltage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOriginalPkChanging(System.Nullable<int> value);
    partial void OnOriginalPkChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnBchChanging(System.Nullable<decimal> value);
    partial void OnBchChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnVoltageIdChanging(System.Nullable<int> value);
    partial void OnVoltageIdChanged();
    partial void OnResistanceChanging(System.Nullable<decimal> value);
    partial void OnResistanceChanged();
    partial void OnReactanceChanging(System.Nullable<decimal> value);
    partial void OnReactanceChanged();
    #endregion
		
		public Line()
		{
			this._LinkLinesVoltageLevels = new EntitySet<LinkLinesVoltageLevel>(new Action<LinkLinesVoltageLevel>(this.attach_LinkLinesVoltageLevels), new Action<LinkLinesVoltageLevel>(this.detach_LinkLinesVoltageLevels));
			this._LinkNotes = new EntitySet<LinkNote>(new Action<LinkNote>(this.attach_LinkNotes), new Action<LinkNote>(this.detach_LinkNotes));
			this._BaseVoltage = default(EntityRef<BaseVoltage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalPk", DbType="Int")]
		public System.Nullable<int> OriginalPk
		{
			get
			{
				return this._OriginalPk;
			}
			set
			{
				if ((this._OriginalPk != value))
				{
					this.OnOriginalPkChanging(value);
					this.SendPropertyChanging();
					this._OriginalPk = value;
					this.SendPropertyChanged("OriginalPk");
					this.OnOriginalPkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bch", DbType="Decimal(12,9)")]
		public System.Nullable<decimal> Bch
		{
			get
			{
				return this._Bch;
			}
			set
			{
				if ((this._Bch != value))
				{
					this.OnBchChanging(value);
					this.SendPropertyChanging();
					this._Bch = value;
					this.SendPropertyChanged("Bch");
					this.OnBchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoltageId", DbType="Int")]
		public System.Nullable<int> VoltageId
		{
			get
			{
				return this._VoltageId;
			}
			set
			{
				if ((this._VoltageId != value))
				{
					if (this._BaseVoltage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoltageIdChanging(value);
					this.SendPropertyChanging();
					this._VoltageId = value;
					this.SendPropertyChanged("VoltageId");
					this.OnVoltageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Resistance", DbType="Decimal(20,15)")]
		public System.Nullable<decimal> Resistance
		{
			get
			{
				return this._Resistance;
			}
			set
			{
				if ((this._Resistance != value))
				{
					this.OnResistanceChanging(value);
					this.SendPropertyChanging();
					this._Resistance = value;
					this.SendPropertyChanged("Resistance");
					this.OnResistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reactance", DbType="Decimal(20,15)")]
		public System.Nullable<decimal> Reactance
		{
			get
			{
				return this._Reactance;
			}
			set
			{
				if ((this._Reactance != value))
				{
					this.OnReactanceChanging(value);
					this.SendPropertyChanging();
					this._Reactance = value;
					this.SendPropertyChanged("Reactance");
					this.OnReactanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Line_LinkLinesVoltageLevel", Storage="_LinkLinesVoltageLevels", ThisKey="Id", OtherKey="LineId")]
		public EntitySet<LinkLinesVoltageLevel> LinkLinesVoltageLevels
		{
			get
			{
				return this._LinkLinesVoltageLevels;
			}
			set
			{
				this._LinkLinesVoltageLevels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Line_LinkNote", Storage="_LinkNotes", ThisKey="Id", OtherKey="LineId")]
		public EntitySet<LinkNote> LinkNotes
		{
			get
			{
				return this._LinkNotes;
			}
			set
			{
				this._LinkNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseVoltage_Line", Storage="_BaseVoltage", ThisKey="VoltageId", OtherKey="Id", IsForeignKey=true)]
		public BaseVoltage BaseVoltage
		{
			get
			{
				return this._BaseVoltage.Entity;
			}
			set
			{
				BaseVoltage previousValue = this._BaseVoltage.Entity;
				if (((previousValue != value) 
							|| (this._BaseVoltage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseVoltage.Entity = null;
						previousValue.Lines.Remove(this);
					}
					this._BaseVoltage.Entity = value;
					if ((value != null))
					{
						value.Lines.Add(this);
						this._VoltageId = value.Id;
					}
					else
					{
						this._VoltageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("BaseVoltage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LinkLinesVoltageLevels(LinkLinesVoltageLevel entity)
		{
			this.SendPropertyChanging();
			entity.Line = this;
		}
		
		private void detach_LinkLinesVoltageLevels(LinkLinesVoltageLevel entity)
		{
			this.SendPropertyChanging();
			entity.Line = null;
		}
		
		private void attach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.Line = this;
		}
		
		private void detach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.Line = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.NameTypes")]
	public partial class NameType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Description;
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _NameTypeAuthoritiesId;
		
		private EntitySet<Name> _Names;
		
		private EntityRef<NameTypeAuthority> _NameTypeAuthority;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNameTypeAuthoritiesIdChanging(System.Nullable<int> value);
    partial void OnNameTypeAuthoritiesIdChanged();
    #endregion
		
		public NameType()
		{
			this._Names = new EntitySet<Name>(new Action<Name>(this.attach_Names), new Action<Name>(this.detach_Names));
			this._NameTypeAuthority = default(EntityRef<NameTypeAuthority>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameTypeAuthoritiesId", DbType="Int")]
		public System.Nullable<int> NameTypeAuthoritiesId
		{
			get
			{
				return this._NameTypeAuthoritiesId;
			}
			set
			{
				if ((this._NameTypeAuthoritiesId != value))
				{
					if (this._NameTypeAuthority.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNameTypeAuthoritiesIdChanging(value);
					this.SendPropertyChanging();
					this._NameTypeAuthoritiesId = value;
					this.SendPropertyChanged("NameTypeAuthoritiesId");
					this.OnNameTypeAuthoritiesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NameType_Name", Storage="_Names", ThisKey="Id", OtherKey="NameTypeId")]
		public EntitySet<Name> Names
		{
			get
			{
				return this._Names;
			}
			set
			{
				this._Names.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NameTypeAuthority_NameType", Storage="_NameTypeAuthority", ThisKey="NameTypeAuthoritiesId", OtherKey="Id", IsForeignKey=true)]
		public NameTypeAuthority NameTypeAuthority
		{
			get
			{
				return this._NameTypeAuthority.Entity;
			}
			set
			{
				NameTypeAuthority previousValue = this._NameTypeAuthority.Entity;
				if (((previousValue != value) 
							|| (this._NameTypeAuthority.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NameTypeAuthority.Entity = null;
						previousValue.NameTypes.Remove(this);
					}
					this._NameTypeAuthority.Entity = value;
					if ((value != null))
					{
						value.NameTypes.Add(this);
						this._NameTypeAuthoritiesId = value.Id;
					}
					else
					{
						this._NameTypeAuthoritiesId = default(Nullable<int>);
					}
					this.SendPropertyChanged("NameTypeAuthority");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.NameType = this;
		}
		
		private void detach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.NameType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.NameTypeAuthorities")]
	public partial class NameTypeAuthority : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private string _Name;
		
		private EntitySet<NameType> _NameTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public NameTypeAuthority()
		{
			this._NameTypes = new EntitySet<NameType>(new Action<NameType>(this.attach_NameTypes), new Action<NameType>(this.detach_NameTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NameTypeAuthority_NameType", Storage="_NameTypes", ThisKey="Id", OtherKey="NameTypeAuthoritiesId")]
		public EntitySet<NameType> NameTypes
		{
			get
			{
				return this._NameTypes;
			}
			set
			{
				this._NameTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NameTypes(NameType entity)
		{
			this.SendPropertyChanging();
			entity.NameTypeAuthority = this;
		}
		
		private void detach_NameTypes(NameType entity)
		{
			this.SendPropertyChanging();
			entity.NameTypeAuthority = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.ContractType")]
	public partial class ContractType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ContractClassID;
		
		private string _Name;
		
		private string _Description;
		
		private string _Comments;
		
		private System.DateTime _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.DateTime _CreatedDate;
		
		private int _CreatedByUserID;
		
		private System.Nullable<int> _RevisedByUserID;
		
		private System.Nullable<System.DateTime> _RevisedDate;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContractClassIDChanging(int value);
    partial void OnContractClassIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByUserIDChanging(int value);
    partial void OnCreatedByUserIDChanged();
    partial void OnRevisedByUserIDChanging(System.Nullable<int> value);
    partial void OnRevisedByUserIDChanged();
    partial void OnRevisedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRevisedDateChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public ContractType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractClassID", DbType="Int NOT NULL")]
		public int ContractClassID
		{
			get
			{
				return this._ContractClassID;
			}
			set
			{
				if ((this._ContractClassID != value))
				{
					this.OnContractClassIDChanging(value);
					this.SendPropertyChanging();
					this._ContractClassID = value;
					this.SendPropertyChanged("ContractClassID");
					this.OnContractClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(255)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime NOT NULL")]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByUserID", DbType="Int NOT NULL")]
		public int CreatedByUserID
		{
			get
			{
				return this._CreatedByUserID;
			}
			set
			{
				if ((this._CreatedByUserID != value))
				{
					this.OnCreatedByUserIDChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUserID = value;
					this.SendPropertyChanged("CreatedByUserID");
					this.OnCreatedByUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevisedByUserID", DbType="Int")]
		public System.Nullable<int> RevisedByUserID
		{
			get
			{
				return this._RevisedByUserID;
			}
			set
			{
				if ((this._RevisedByUserID != value))
				{
					this.OnRevisedByUserIDChanging(value);
					this.SendPropertyChanging();
					this._RevisedByUserID = value;
					this.SendPropertyChanged("RevisedByUserID");
					this.OnRevisedByUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevisedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RevisedDate
		{
			get
			{
				return this._RevisedDate;
			}
			set
			{
				if ((this._RevisedDate != value))
				{
					this.OnRevisedDateChanging(value);
					this.SendPropertyChanging();
					this._RevisedDate = value;
					this.SendPropertyChanged("RevisedDate");
					this.OnRevisedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.ContractStatus")]
	public partial class ContractStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private string _Comments;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    #endregion
		
		public ContractStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(255)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="app.EpicUsers")]
	public partial class EpicUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Guid _AspnetUserId;
		
		private string _EmailAddress;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private bool _IsActive;
		
		private EntitySet<Batch> _Batches;
		
		private EntitySet<Batch> _Batches1;
		
		private EntitySet<BatchType> _BatchTypes;
		
		private EntitySet<FileReference> _FileReferences;
		
		private EntitySet<FileReference> _FileReferences1;
		
		private EntitySet<FileReference> _FileReferences2;
		
		private EntitySet<ResourceOptionAttribute> _ResourceOptionAttributes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAspnetUserIdChanging(System.Guid value);
    partial void OnAspnetUserIdChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public EpicUser()
		{
			this._Batches = new EntitySet<Batch>(new Action<Batch>(this.attach_Batches), new Action<Batch>(this.detach_Batches));
			this._Batches1 = new EntitySet<Batch>(new Action<Batch>(this.attach_Batches1), new Action<Batch>(this.detach_Batches1));
			this._BatchTypes = new EntitySet<BatchType>(new Action<BatchType>(this.attach_BatchTypes), new Action<BatchType>(this.detach_BatchTypes));
			this._FileReferences = new EntitySet<FileReference>(new Action<FileReference>(this.attach_FileReferences), new Action<FileReference>(this.detach_FileReferences));
			this._FileReferences1 = new EntitySet<FileReference>(new Action<FileReference>(this.attach_FileReferences1), new Action<FileReference>(this.detach_FileReferences1));
			this._FileReferences2 = new EntitySet<FileReference>(new Action<FileReference>(this.attach_FileReferences2), new Action<FileReference>(this.detach_FileReferences2));
			this._ResourceOptionAttributes = new EntitySet<ResourceOptionAttribute>(new Action<ResourceOptionAttribute>(this.attach_ResourceOptionAttributes), new Action<ResourceOptionAttribute>(this.detach_ResourceOptionAttributes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AspnetUserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AspnetUserId
		{
			get
			{
				return this._AspnetUserId;
			}
			set
			{
				if ((this._AspnetUserId != value))
				{
					this.OnAspnetUserIdChanging(value);
					this.SendPropertyChanging();
					this._AspnetUserId = value;
					this.SendPropertyChanged("AspnetUserId");
					this.OnAspnetUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EpicUser_Batch", Storage="_Batches", ThisKey="Id", OtherKey="UserCreatedId")]
		public EntitySet<Batch> Batches
		{
			get
			{
				return this._Batches;
			}
			set
			{
				this._Batches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EpicUser_Batch1", Storage="_Batches1", ThisKey="Id", OtherKey="UserUpdatedId")]
		public EntitySet<Batch> Batches1
		{
			get
			{
				return this._Batches1;
			}
			set
			{
				this._Batches1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EpicUser_BatchType", Storage="_BatchTypes", ThisKey="Id", OtherKey="UserCreatedId")]
		public EntitySet<BatchType> BatchTypes
		{
			get
			{
				return this._BatchTypes;
			}
			set
			{
				this._BatchTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EpicUser_FileReference", Storage="_FileReferences", ThisKey="Id", OtherKey="UserApprovedId")]
		public EntitySet<FileReference> FileReferences
		{
			get
			{
				return this._FileReferences;
			}
			set
			{
				this._FileReferences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EpicUser_FileReference1", Storage="_FileReferences1", ThisKey="Id", OtherKey="UserCreatedId")]
		public EntitySet<FileReference> FileReferences1
		{
			get
			{
				return this._FileReferences1;
			}
			set
			{
				this._FileReferences1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EpicUser_FileReference2", Storage="_FileReferences2", ThisKey="Id", OtherKey="UserPublishedId")]
		public EntitySet<FileReference> FileReferences2
		{
			get
			{
				return this._FileReferences2;
			}
			set
			{
				this._FileReferences2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EpicUser_ResourceOptionAttribute", Storage="_ResourceOptionAttributes", ThisKey="Id", OtherKey="UserCreatedId")]
		public EntitySet<ResourceOptionAttribute> ResourceOptionAttributes
		{
			get
			{
				return this._ResourceOptionAttributes;
			}
			set
			{
				this._ResourceOptionAttributes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Batches(Batch entity)
		{
			this.SendPropertyChanging();
			entity.EpicUser = this;
		}
		
		private void detach_Batches(Batch entity)
		{
			this.SendPropertyChanging();
			entity.EpicUser = null;
		}
		
		private void attach_Batches1(Batch entity)
		{
			this.SendPropertyChanging();
			entity.EpicUser1 = this;
		}
		
		private void detach_Batches1(Batch entity)
		{
			this.SendPropertyChanging();
			entity.EpicUser1 = null;
		}
		
		private void attach_BatchTypes(BatchType entity)
		{
			this.SendPropertyChanging();
			entity.EpicUser = this;
		}
		
		private void detach_BatchTypes(BatchType entity)
		{
			this.SendPropertyChanging();
			entity.EpicUser = null;
		}
		
		private void attach_FileReferences(FileReference entity)
		{
			this.SendPropertyChanging();
			entity.EpicUser = this;
		}
		
		private void detach_FileReferences(FileReference entity)
		{
			this.SendPropertyChanging();
			entity.EpicUser = null;
		}
		
		private void attach_FileReferences1(FileReference entity)
		{
			this.SendPropertyChanging();
			entity.EpicUser1 = this;
		}
		
		private void detach_FileReferences1(FileReference entity)
		{
			this.SendPropertyChanging();
			entity.EpicUser1 = null;
		}
		
		private void attach_FileReferences2(FileReference entity)
		{
			this.SendPropertyChanging();
			entity.EpicUser2 = this;
		}
		
		private void detach_FileReferences2(FileReference entity)
		{
			this.SendPropertyChanging();
			entity.EpicUser2 = null;
		}
		
		private void attach_ResourceOptionAttributes(ResourceOptionAttribute entity)
		{
			this.SendPropertyChanging();
			entity.EpicUser = this;
		}
		
		private void detach_ResourceOptionAttributes(ResourceOptionAttribute entity)
		{
			this.SendPropertyChanging();
			entity.EpicUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.Breaker")]
	public partial class Breaker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _IdentifiedObjectName;
		
		private bool _Switch_normalOpen;
		
		private int _Breaker_Id;
		
		private int _Breaker_iNode;
		
		private int _Breaker_zNode;
		
		private int _VoltageLevelid;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private EntityRef<VoltageLevel> _VoltageLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdentifiedObjectNameChanging(string value);
    partial void OnIdentifiedObjectNameChanged();
    partial void OnSwitch_normalOpenChanging(bool value);
    partial void OnSwitch_normalOpenChanged();
    partial void OnBreaker_IdChanging(int value);
    partial void OnBreaker_IdChanged();
    partial void OnBreaker_iNodeChanging(int value);
    partial void OnBreaker_iNodeChanged();
    partial void OnBreaker_zNodeChanging(int value);
    partial void OnBreaker_zNodeChanged();
    partial void OnVoltageLevelidChanging(int value);
    partial void OnVoltageLevelidChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    #endregion
		
		public Breaker()
		{
			this._VoltageLevel = default(EntityRef<VoltageLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdentifiedObjectName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string IdentifiedObjectName
		{
			get
			{
				return this._IdentifiedObjectName;
			}
			set
			{
				if ((this._IdentifiedObjectName != value))
				{
					this.OnIdentifiedObjectNameChanging(value);
					this.SendPropertyChanging();
					this._IdentifiedObjectName = value;
					this.SendPropertyChanged("IdentifiedObjectName");
					this.OnIdentifiedObjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Switch_normalOpen", DbType="Bit NOT NULL")]
		public bool Switch_normalOpen
		{
			get
			{
				return this._Switch_normalOpen;
			}
			set
			{
				if ((this._Switch_normalOpen != value))
				{
					this.OnSwitch_normalOpenChanging(value);
					this.SendPropertyChanging();
					this._Switch_normalOpen = value;
					this.SendPropertyChanged("Switch_normalOpen");
					this.OnSwitch_normalOpenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Breaker_Id", DbType="Int NOT NULL")]
		public int Breaker_Id
		{
			get
			{
				return this._Breaker_Id;
			}
			set
			{
				if ((this._Breaker_Id != value))
				{
					this.OnBreaker_IdChanging(value);
					this.SendPropertyChanging();
					this._Breaker_Id = value;
					this.SendPropertyChanged("Breaker_Id");
					this.OnBreaker_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Breaker_iNode", DbType="Int NOT NULL")]
		public int Breaker_iNode
		{
			get
			{
				return this._Breaker_iNode;
			}
			set
			{
				if ((this._Breaker_iNode != value))
				{
					this.OnBreaker_iNodeChanging(value);
					this.SendPropertyChanging();
					this._Breaker_iNode = value;
					this.SendPropertyChanged("Breaker_iNode");
					this.OnBreaker_iNodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Breaker_zNode", DbType="Int NOT NULL")]
		public int Breaker_zNode
		{
			get
			{
				return this._Breaker_zNode;
			}
			set
			{
				if ((this._Breaker_zNode != value))
				{
					this.OnBreaker_zNodeChanging(value);
					this.SendPropertyChanging();
					this._Breaker_zNode = value;
					this.SendPropertyChanged("Breaker_zNode");
					this.OnBreaker_zNodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoltageLevelid", DbType="Int NOT NULL")]
		public int VoltageLevelid
		{
			get
			{
				return this._VoltageLevelid;
			}
			set
			{
				if ((this._VoltageLevelid != value))
				{
					if (this._VoltageLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoltageLevelidChanging(value);
					this.SendPropertyChanging();
					this._VoltageLevelid = value;
					this.SendPropertyChanged("VoltageLevelid");
					this.OnVoltageLevelidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoltageLevel_Breaker", Storage="_VoltageLevel", ThisKey="VoltageLevelid", OtherKey="Id", IsForeignKey=true)]
		public VoltageLevel VoltageLevel
		{
			get
			{
				return this._VoltageLevel.Entity;
			}
			set
			{
				VoltageLevel previousValue = this._VoltageLevel.Entity;
				if (((previousValue != value) 
							|| (this._VoltageLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VoltageLevel.Entity = null;
						previousValue.Breakers.Remove(this);
					}
					this._VoltageLevel.Entity = value;
					if ((value != null))
					{
						value.Breakers.Add(this);
						this._VoltageLevelid = value.Id;
					}
					else
					{
						this._VoltageLevelid = default(int);
					}
					this.SendPropertyChanged("VoltageLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.TableHistory")]
	public partial class TableHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _TableName;
		
		private int _ChangedRowId;
		
		private string _UserChangedByLoginName;
		
		private string _ColumnName;
		
		private string _NewValue;
		
		private string _OldValue;
		
		private System.DateTime _ChangedDateTime;
		
		private byte _IsDeleted;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    partial void OnChangedRowIdChanging(int value);
    partial void OnChangedRowIdChanged();
    partial void OnUserChangedByLoginNameChanging(string value);
    partial void OnUserChangedByLoginNameChanged();
    partial void OnColumnNameChanging(string value);
    partial void OnColumnNameChanged();
    partial void OnNewValueChanging(string value);
    partial void OnNewValueChanged();
    partial void OnOldValueChanging(string value);
    partial void OnOldValueChanged();
    partial void OnChangedDateTimeChanging(System.DateTime value);
    partial void OnChangedDateTimeChanged();
    partial void OnIsDeletedChanging(byte value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public TableHistory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this.OnTableNameChanging(value);
					this.SendPropertyChanging();
					this._TableName = value;
					this.SendPropertyChanged("TableName");
					this.OnTableNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangedRowId", DbType="Int NOT NULL")]
		public int ChangedRowId
		{
			get
			{
				return this._ChangedRowId;
			}
			set
			{
				if ((this._ChangedRowId != value))
				{
					this.OnChangedRowIdChanging(value);
					this.SendPropertyChanging();
					this._ChangedRowId = value;
					this.SendPropertyChanged("ChangedRowId");
					this.OnChangedRowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserChangedByLoginName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserChangedByLoginName
		{
			get
			{
				return this._UserChangedByLoginName;
			}
			set
			{
				if ((this._UserChangedByLoginName != value))
				{
					this.OnUserChangedByLoginNameChanging(value);
					this.SendPropertyChanging();
					this._UserChangedByLoginName = value;
					this.SendPropertyChanged("UserChangedByLoginName");
					this.OnUserChangedByLoginNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColumnName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ColumnName
		{
			get
			{
				return this._ColumnName;
			}
			set
			{
				if ((this._ColumnName != value))
				{
					this.OnColumnNameChanging(value);
					this.SendPropertyChanging();
					this._ColumnName = value;
					this.SendPropertyChanged("ColumnName");
					this.OnColumnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewValue", DbType="NVarChar(MAX)")]
		public string NewValue
		{
			get
			{
				return this._NewValue;
			}
			set
			{
				if ((this._NewValue != value))
				{
					this.OnNewValueChanging(value);
					this.SendPropertyChanging();
					this._NewValue = value;
					this.SendPropertyChanged("NewValue");
					this.OnNewValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldValue", DbType="NVarChar(MAX)")]
		public string OldValue
		{
			get
			{
				return this._OldValue;
			}
			set
			{
				if ((this._OldValue != value))
				{
					this.OnOldValueChanging(value);
					this.SendPropertyChanging();
					this._OldValue = value;
					this.SendPropertyChanged("OldValue");
					this.OnOldValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime ChangedDateTime
		{
			get
			{
				return this._ChangedDateTime;
			}
			set
			{
				if ((this._ChangedDateTime != value))
				{
					this.OnChangedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._ChangedDateTime = value;
					this.SendPropertyChanged("ChangedDateTime");
					this.OnChangedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="TinyInt NOT NULL")]
		public byte IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.SubstationsSubstationAttributesView")]
	public partial class SubstationsSubstationAttributesView
	{
		
		private long _Id;
		
		private string _TableName;
		
		private int _ChangedRowId;
		
		private string _UserChangedByLoginName;
		
		private string _ColumnName;
		
		private string _NewValue;
		
		private string _OldValue;
		
		private System.DateTime _ChangedDateTime;
		
		private byte _IsDeleted;
		
		private int _THChangedRowId;
		
		public SubstationsSubstationAttributesView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL")]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this._TableName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangedRowId", DbType="Int NOT NULL")]
		public int ChangedRowId
		{
			get
			{
				return this._ChangedRowId;
			}
			set
			{
				if ((this._ChangedRowId != value))
				{
					this._ChangedRowId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserChangedByLoginName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserChangedByLoginName
		{
			get
			{
				return this._UserChangedByLoginName;
			}
			set
			{
				if ((this._UserChangedByLoginName != value))
				{
					this._UserChangedByLoginName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColumnName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ColumnName
		{
			get
			{
				return this._ColumnName;
			}
			set
			{
				if ((this._ColumnName != value))
				{
					this._ColumnName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewValue", DbType="NVarChar(MAX)")]
		public string NewValue
		{
			get
			{
				return this._NewValue;
			}
			set
			{
				if ((this._NewValue != value))
				{
					this._NewValue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldValue", DbType="NVarChar(MAX)")]
		public string OldValue
		{
			get
			{
				return this._OldValue;
			}
			set
			{
				if ((this._OldValue != value))
				{
					this._OldValue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime ChangedDateTime
		{
			get
			{
				return this._ChangedDateTime;
			}
			set
			{
				if ((this._ChangedDateTime != value))
				{
					this._ChangedDateTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="TinyInt NOT NULL")]
		public byte IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this._IsDeleted = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_THChangedRowId", DbType="Int NOT NULL")]
		public int THChangedRowId
		{
			get
			{
				return this._THChangedRowId;
			}
			set
			{
				if ((this._THChangedRowId != value))
				{
					this._THChangedRowId = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.ResourceStatuses")]
	public partial class ResourceStatuse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Value;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<int> _UserCreatedId;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private string _Name;
		
		private EntitySet<Load> _Loads;
		
		private EntitySet<GeneratingUnit> _GeneratingUnits;
		
		private EntitySet<Substation> _Substations;
		
		private EntitySet<ResourceBundle> _ResourceBundles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnUserCreatedIdChanging(System.Nullable<int> value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ResourceStatuse()
		{
			this._Loads = new EntitySet<Load>(new Action<Load>(this.attach_Loads), new Action<Load>(this.detach_Loads));
			this._GeneratingUnits = new EntitySet<GeneratingUnit>(new Action<GeneratingUnit>(this.attach_GeneratingUnits), new Action<GeneratingUnit>(this.detach_GeneratingUnits));
			this._Substations = new EntitySet<Substation>(new Action<Substation>(this.attach_Substations), new Action<Substation>(this.detach_Substations));
			this._ResourceBundles = new EntitySet<ResourceBundle>(new Action<ResourceBundle>(this.attach_ResourceBundles), new Action<ResourceBundle>(this.detach_ResourceBundles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int")]
		public System.Nullable<int> UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceStatuse_Load", Storage="_Loads", ThisKey="Id", OtherKey="StatusId")]
		public EntitySet<Load> Loads
		{
			get
			{
				return this._Loads;
			}
			set
			{
				this._Loads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceStatuse_GeneratingUnit", Storage="_GeneratingUnits", ThisKey="Id", OtherKey="GeneratorStatusID")]
		public EntitySet<GeneratingUnit> GeneratingUnits
		{
			get
			{
				return this._GeneratingUnits;
			}
			set
			{
				this._GeneratingUnits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceStatuse_Substation", Storage="_Substations", ThisKey="Id", OtherKey="ResourceStatusId")]
		public EntitySet<Substation> Substations
		{
			get
			{
				return this._Substations;
			}
			set
			{
				this._Substations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceStatuse_ResourceBundle", Storage="_ResourceBundles", ThisKey="Id", OtherKey="ResourceBundleStatusId")]
		public EntitySet<ResourceBundle> ResourceBundles
		{
			get
			{
				return this._ResourceBundles;
			}
			set
			{
				this._ResourceBundles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Loads(Load entity)
		{
			this.SendPropertyChanging();
			entity.ResourceStatuse = this;
		}
		
		private void detach_Loads(Load entity)
		{
			this.SendPropertyChanging();
			entity.ResourceStatuse = null;
		}
		
		private void attach_GeneratingUnits(GeneratingUnit entity)
		{
			this.SendPropertyChanging();
			entity.ResourceStatuse = this;
		}
		
		private void detach_GeneratingUnits(GeneratingUnit entity)
		{
			this.SendPropertyChanging();
			entity.ResourceStatuse = null;
		}
		
		private void attach_Substations(Substation entity)
		{
			this.SendPropertyChanging();
			entity.ResourceStatuse = this;
		}
		
		private void detach_Substations(Substation entity)
		{
			this.SendPropertyChanging();
			entity.ResourceStatuse = null;
		}
		
		private void attach_ResourceBundles(ResourceBundle entity)
		{
			this.SendPropertyChanging();
			entity.ResourceStatuse = this;
		}
		
		private void detach_ResourceBundles(ResourceBundle entity)
		{
			this.SendPropertyChanging();
			entity.ResourceStatuse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.VoltageLevels")]
	public partial class VoltageLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _OriginalPk;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private int _SubstationId;
		
		private System.Nullable<decimal> _NominalVoltage;
		
		private EntitySet<LinkLinesVoltageLevel> _LinkLinesVoltageLevels;
		
		private EntitySet<Breaker> _Breakers;
		
		private EntitySet<Load> _Loads;
		
		private EntitySet<GeneratingUnit> _GeneratingUnits;
		
		private EntityRef<Substation> _Substation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOriginalPkChanging(System.Nullable<int> value);
    partial void OnOriginalPkChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnSubstationIdChanging(int value);
    partial void OnSubstationIdChanged();
    partial void OnNominalVoltageChanging(System.Nullable<decimal> value);
    partial void OnNominalVoltageChanged();
    #endregion
		
		public VoltageLevel()
		{
			this._LinkLinesVoltageLevels = new EntitySet<LinkLinesVoltageLevel>(new Action<LinkLinesVoltageLevel>(this.attach_LinkLinesVoltageLevels), new Action<LinkLinesVoltageLevel>(this.detach_LinkLinesVoltageLevels));
			this._Breakers = new EntitySet<Breaker>(new Action<Breaker>(this.attach_Breakers), new Action<Breaker>(this.detach_Breakers));
			this._Loads = new EntitySet<Load>(new Action<Load>(this.attach_Loads), new Action<Load>(this.detach_Loads));
			this._GeneratingUnits = new EntitySet<GeneratingUnit>(new Action<GeneratingUnit>(this.attach_GeneratingUnits), new Action<GeneratingUnit>(this.detach_GeneratingUnits));
			this._Substation = default(EntityRef<Substation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalPk", DbType="Int")]
		public System.Nullable<int> OriginalPk
		{
			get
			{
				return this._OriginalPk;
			}
			set
			{
				if ((this._OriginalPk != value))
				{
					this.OnOriginalPkChanging(value);
					this.SendPropertyChanging();
					this._OriginalPk = value;
					this.SendPropertyChanged("OriginalPk");
					this.OnOriginalPkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubstationId", DbType="Int NOT NULL")]
		public int SubstationId
		{
			get
			{
				return this._SubstationId;
			}
			set
			{
				if ((this._SubstationId != value))
				{
					if (this._Substation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstationIdChanging(value);
					this.SendPropertyChanging();
					this._SubstationId = value;
					this.SendPropertyChanged("SubstationId");
					this.OnSubstationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NominalVoltage", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> NominalVoltage
		{
			get
			{
				return this._NominalVoltage;
			}
			set
			{
				if ((this._NominalVoltage != value))
				{
					this.OnNominalVoltageChanging(value);
					this.SendPropertyChanging();
					this._NominalVoltage = value;
					this.SendPropertyChanged("NominalVoltage");
					this.OnNominalVoltageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoltageLevel_LinkLinesVoltageLevel", Storage="_LinkLinesVoltageLevels", ThisKey="Id", OtherKey="VoltageLevelId")]
		public EntitySet<LinkLinesVoltageLevel> LinkLinesVoltageLevels
		{
			get
			{
				return this._LinkLinesVoltageLevels;
			}
			set
			{
				this._LinkLinesVoltageLevels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoltageLevel_Breaker", Storage="_Breakers", ThisKey="Id", OtherKey="VoltageLevelid")]
		public EntitySet<Breaker> Breakers
		{
			get
			{
				return this._Breakers;
			}
			set
			{
				this._Breakers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoltageLevel_Load", Storage="_Loads", ThisKey="Id", OtherKey="VoltageLevelId")]
		public EntitySet<Load> Loads
		{
			get
			{
				return this._Loads;
			}
			set
			{
				this._Loads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoltageLevel_GeneratingUnit", Storage="_GeneratingUnits", ThisKey="Id", OtherKey="VoltageLevelId")]
		public EntitySet<GeneratingUnit> GeneratingUnits
		{
			get
			{
				return this._GeneratingUnits;
			}
			set
			{
				this._GeneratingUnits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_VoltageLevel", Storage="_Substation", ThisKey="SubstationId", OtherKey="Id", IsForeignKey=true)]
		public Substation Substation
		{
			get
			{
				return this._Substation.Entity;
			}
			set
			{
				Substation previousValue = this._Substation.Entity;
				if (((previousValue != value) 
							|| (this._Substation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Substation.Entity = null;
						previousValue.VoltageLevels.Remove(this);
					}
					this._Substation.Entity = value;
					if ((value != null))
					{
						value.VoltageLevels.Add(this);
						this._SubstationId = value.Id;
					}
					else
					{
						this._SubstationId = default(int);
					}
					this.SendPropertyChanged("Substation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LinkLinesVoltageLevels(LinkLinesVoltageLevel entity)
		{
			this.SendPropertyChanging();
			entity.VoltageLevel = this;
		}
		
		private void detach_LinkLinesVoltageLevels(LinkLinesVoltageLevel entity)
		{
			this.SendPropertyChanging();
			entity.VoltageLevel = null;
		}
		
		private void attach_Breakers(Breaker entity)
		{
			this.SendPropertyChanging();
			entity.VoltageLevel = this;
		}
		
		private void detach_Breakers(Breaker entity)
		{
			this.SendPropertyChanging();
			entity.VoltageLevel = null;
		}
		
		private void attach_Loads(Load entity)
		{
			this.SendPropertyChanging();
			entity.VoltageLevel = this;
		}
		
		private void detach_Loads(Load entity)
		{
			this.SendPropertyChanging();
			entity.VoltageLevel = null;
		}
		
		private void attach_GeneratingUnits(GeneratingUnit entity)
		{
			this.SendPropertyChanging();
			entity.VoltageLevel = this;
		}
		
		private void detach_GeneratingUnits(GeneratingUnit entity)
		{
			this.SendPropertyChanging();
			entity.VoltageLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.Names")]
	public partial class Name : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name1;
		
		private int _NameTypeId;
		
		private System.Nullable<int> _SubstationId;
		
		private System.Nullable<int> _GeneratingUnitId;
		
		private bool _IsActive;
		
		private System.Nullable<int> _ResourceBundleId;
		
		private System.Nullable<int> _LoadId;
		
		private EntityRef<NameType> _NameType;
		
		private EntityRef<Load> _Load;
		
		private EntityRef<GeneratingUnit> _GeneratingUnit;
		
		private EntityRef<Substation> _Substation;
		
		private EntityRef<ResourceBundle> _ResourceBundle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnName1Changing(string value);
    partial void OnName1Changed();
    partial void OnNameTypeIdChanging(int value);
    partial void OnNameTypeIdChanged();
    partial void OnSubstationIdChanging(System.Nullable<int> value);
    partial void OnSubstationIdChanged();
    partial void OnGeneratingUnitIdChanging(System.Nullable<int> value);
    partial void OnGeneratingUnitIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnResourceBundleIdChanging(System.Nullable<int> value);
    partial void OnResourceBundleIdChanged();
    partial void OnLoadIdChanging(System.Nullable<int> value);
    partial void OnLoadIdChanged();
    #endregion
		
		public Name()
		{
			this._NameType = default(EntityRef<NameType>);
			this._Load = default(EntityRef<Load>);
			this._GeneratingUnit = default(EntityRef<GeneratingUnit>);
			this._Substation = default(EntityRef<Substation>);
			this._ResourceBundle = default(EntityRef<ResourceBundle>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Name", Storage="_Name1", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name1
		{
			get
			{
				return this._Name1;
			}
			set
			{
				if ((this._Name1 != value))
				{
					this.OnName1Changing(value);
					this.SendPropertyChanging();
					this._Name1 = value;
					this.SendPropertyChanged("Name1");
					this.OnName1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameTypeId", DbType="Int NOT NULL")]
		public int NameTypeId
		{
			get
			{
				return this._NameTypeId;
			}
			set
			{
				if ((this._NameTypeId != value))
				{
					if (this._NameType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNameTypeIdChanging(value);
					this.SendPropertyChanging();
					this._NameTypeId = value;
					this.SendPropertyChanged("NameTypeId");
					this.OnNameTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubstationId", DbType="Int")]
		public System.Nullable<int> SubstationId
		{
			get
			{
				return this._SubstationId;
			}
			set
			{
				if ((this._SubstationId != value))
				{
					if (this._Substation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstationIdChanging(value);
					this.SendPropertyChanging();
					this._SubstationId = value;
					this.SendPropertyChanged("SubstationId");
					this.OnSubstationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratingUnitId", DbType="Int")]
		public System.Nullable<int> GeneratingUnitId
		{
			get
			{
				return this._GeneratingUnitId;
			}
			set
			{
				if ((this._GeneratingUnitId != value))
				{
					if (this._GeneratingUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeneratingUnitIdChanging(value);
					this.SendPropertyChanging();
					this._GeneratingUnitId = value;
					this.SendPropertyChanged("GeneratingUnitId");
					this.OnGeneratingUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceBundleId", DbType="Int")]
		public System.Nullable<int> ResourceBundleId
		{
			get
			{
				return this._ResourceBundleId;
			}
			set
			{
				if ((this._ResourceBundleId != value))
				{
					if (this._ResourceBundle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceBundleIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceBundleId = value;
					this.SendPropertyChanged("ResourceBundleId");
					this.OnResourceBundleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadId", DbType="Int")]
		public System.Nullable<int> LoadId
		{
			get
			{
				return this._LoadId;
			}
			set
			{
				if ((this._LoadId != value))
				{
					if (this._Load.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoadIdChanging(value);
					this.SendPropertyChanging();
					this._LoadId = value;
					this.SendPropertyChanged("LoadId");
					this.OnLoadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NameType_Name", Storage="_NameType", ThisKey="NameTypeId", OtherKey="Id", IsForeignKey=true)]
		public NameType NameType
		{
			get
			{
				return this._NameType.Entity;
			}
			set
			{
				NameType previousValue = this._NameType.Entity;
				if (((previousValue != value) 
							|| (this._NameType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NameType.Entity = null;
						previousValue.Names.Remove(this);
					}
					this._NameType.Entity = value;
					if ((value != null))
					{
						value.Names.Add(this);
						this._NameTypeId = value.Id;
					}
					else
					{
						this._NameTypeId = default(int);
					}
					this.SendPropertyChanged("NameType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Load_Name", Storage="_Load", ThisKey="LoadId", OtherKey="Id", IsForeignKey=true)]
		public Load Load
		{
			get
			{
				return this._Load.Entity;
			}
			set
			{
				Load previousValue = this._Load.Entity;
				if (((previousValue != value) 
							|| (this._Load.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Load.Entity = null;
						previousValue.Names.Remove(this);
					}
					this._Load.Entity = value;
					if ((value != null))
					{
						value.Names.Add(this);
						this._LoadId = value.Id;
					}
					else
					{
						this._LoadId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Load");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneratingUnit_Name", Storage="_GeneratingUnit", ThisKey="GeneratingUnitId", OtherKey="Id", IsForeignKey=true)]
		public GeneratingUnit GeneratingUnit
		{
			get
			{
				return this._GeneratingUnit.Entity;
			}
			set
			{
				GeneratingUnit previousValue = this._GeneratingUnit.Entity;
				if (((previousValue != value) 
							|| (this._GeneratingUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneratingUnit.Entity = null;
						previousValue.Names.Remove(this);
					}
					this._GeneratingUnit.Entity = value;
					if ((value != null))
					{
						value.Names.Add(this);
						this._GeneratingUnitId = value.Id;
					}
					else
					{
						this._GeneratingUnitId = default(Nullable<int>);
					}
					this.SendPropertyChanged("GeneratingUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_Name", Storage="_Substation", ThisKey="SubstationId", OtherKey="Id", IsForeignKey=true)]
		public Substation Substation
		{
			get
			{
				return this._Substation.Entity;
			}
			set
			{
				Substation previousValue = this._Substation.Entity;
				if (((previousValue != value) 
							|| (this._Substation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Substation.Entity = null;
						previousValue.Names.Remove(this);
					}
					this._Substation.Entity = value;
					if ((value != null))
					{
						value.Names.Add(this);
						this._SubstationId = value.Id;
					}
					else
					{
						this._SubstationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Substation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceBundle_Name", Storage="_ResourceBundle", ThisKey="ResourceBundleId", OtherKey="Id", IsForeignKey=true)]
		public ResourceBundle ResourceBundle
		{
			get
			{
				return this._ResourceBundle.Entity;
			}
			set
			{
				ResourceBundle previousValue = this._ResourceBundle.Entity;
				if (((previousValue != value) 
							|| (this._ResourceBundle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceBundle.Entity = null;
						previousValue.Names.Remove(this);
					}
					this._ResourceBundle.Entity = value;
					if ((value != null))
					{
						value.Names.Add(this);
						this._ResourceBundleId = value.Id;
					}
					else
					{
						this._ResourceBundleId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ResourceBundle");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="link.LinkElectricityPurchaseAgreementsSubstation")]
	public partial class LinkElectricityPurchaseAgreementsSubstation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SubstationId;
		
		private int _EPAId;
		
		private EntityRef<ElectricityPurchaseAgreement> _ElectricityPurchaseAgreement;
		
		private EntityRef<Substation> _Substation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSubstationIdChanging(int value);
    partial void OnSubstationIdChanged();
    partial void OnEPAIdChanging(int value);
    partial void OnEPAIdChanged();
    #endregion
		
		public LinkElectricityPurchaseAgreementsSubstation()
		{
			this._ElectricityPurchaseAgreement = default(EntityRef<ElectricityPurchaseAgreement>);
			this._Substation = default(EntityRef<Substation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubstationId", DbType="Int NOT NULL")]
		public int SubstationId
		{
			get
			{
				return this._SubstationId;
			}
			set
			{
				if ((this._SubstationId != value))
				{
					if (this._Substation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstationIdChanging(value);
					this.SendPropertyChanging();
					this._SubstationId = value;
					this.SendPropertyChanged("SubstationId");
					this.OnSubstationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EPAId", DbType="Int NOT NULL")]
		public int EPAId
		{
			get
			{
				return this._EPAId;
			}
			set
			{
				if ((this._EPAId != value))
				{
					if (this._ElectricityPurchaseAgreement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEPAIdChanging(value);
					this.SendPropertyChanging();
					this._EPAId = value;
					this.SendPropertyChanged("EPAId");
					this.OnEPAIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElectricityPurchaseAgreement_LinkElectricityPurchaseAgreementsSubstation", Storage="_ElectricityPurchaseAgreement", ThisKey="EPAId", OtherKey="Id", IsForeignKey=true)]
		public ElectricityPurchaseAgreement ElectricityPurchaseAgreement
		{
			get
			{
				return this._ElectricityPurchaseAgreement.Entity;
			}
			set
			{
				ElectricityPurchaseAgreement previousValue = this._ElectricityPurchaseAgreement.Entity;
				if (((previousValue != value) 
							|| (this._ElectricityPurchaseAgreement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ElectricityPurchaseAgreement.Entity = null;
						previousValue.LinkElectricityPurchaseAgreementsSubstations.Remove(this);
					}
					this._ElectricityPurchaseAgreement.Entity = value;
					if ((value != null))
					{
						value.LinkElectricityPurchaseAgreementsSubstations.Add(this);
						this._EPAId = value.Id;
					}
					else
					{
						this._EPAId = default(int);
					}
					this.SendPropertyChanged("ElectricityPurchaseAgreement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_LinkElectricityPurchaseAgreementsSubstation", Storage="_Substation", ThisKey="SubstationId", OtherKey="Id", IsForeignKey=true)]
		public Substation Substation
		{
			get
			{
				return this._Substation.Entity;
			}
			set
			{
				Substation previousValue = this._Substation.Entity;
				if (((previousValue != value) 
							|| (this._Substation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Substation.Entity = null;
						previousValue.LinkElectricityPurchaseAgreementsSubstations.Remove(this);
					}
					this._Substation.Entity = value;
					if ((value != null))
					{
						value.LinkElectricityPurchaseAgreementsSubstations.Add(this);
						this._SubstationId = value.Id;
					}
					else
					{
						this._SubstationId = default(int);
					}
					this.SendPropertyChanged("Substation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.Loads")]
	public partial class Load : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _OriginalPk;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private int _StatusId;
		
		private System.Nullable<int> _VoltageLevelId;
		
		private string _AccountNumber;
		
		private string _Description;
		
		private System.Nullable<decimal> _GenerationBaseline;
		
		private System.Nullable<decimal> _RatedMva;
		
		private EntitySet<Name> _Names;
		
		private EntitySet<LinkNote> _LinkNotes;
		
		private EntitySet<LoadAttribute> _LoadAttributes;
		
		private EntityRef<VoltageLevel> _VoltageLevel;
		
		private EntityRef<ResourceStatuse> _ResourceStatuse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOriginalPkChanging(System.Nullable<int> value);
    partial void OnOriginalPkChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnStatusIdChanging(int value);
    partial void OnStatusIdChanged();
    partial void OnVoltageLevelIdChanging(System.Nullable<int> value);
    partial void OnVoltageLevelIdChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnGenerationBaselineChanging(System.Nullable<decimal> value);
    partial void OnGenerationBaselineChanged();
    partial void OnRatedMvaChanging(System.Nullable<decimal> value);
    partial void OnRatedMvaChanged();
    #endregion
		
		public Load()
		{
			this._Names = new EntitySet<Name>(new Action<Name>(this.attach_Names), new Action<Name>(this.detach_Names));
			this._LinkNotes = new EntitySet<LinkNote>(new Action<LinkNote>(this.attach_LinkNotes), new Action<LinkNote>(this.detach_LinkNotes));
			this._LoadAttributes = new EntitySet<LoadAttribute>(new Action<LoadAttribute>(this.attach_LoadAttributes), new Action<LoadAttribute>(this.detach_LoadAttributes));
			this._VoltageLevel = default(EntityRef<VoltageLevel>);
			this._ResourceStatuse = default(EntityRef<ResourceStatuse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalPk", DbType="Int")]
		public System.Nullable<int> OriginalPk
		{
			get
			{
				return this._OriginalPk;
			}
			set
			{
				if ((this._OriginalPk != value))
				{
					this.OnOriginalPkChanging(value);
					this.SendPropertyChanging();
					this._OriginalPk = value;
					this.SendPropertyChanged("OriginalPk");
					this.OnOriginalPkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusId", DbType="Int NOT NULL")]
		public int StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					if (this._ResourceStatuse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoltageLevelId", DbType="Int")]
		public System.Nullable<int> VoltageLevelId
		{
			get
			{
				return this._VoltageLevelId;
			}
			set
			{
				if ((this._VoltageLevelId != value))
				{
					if (this._VoltageLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoltageLevelIdChanging(value);
					this.SendPropertyChanging();
					this._VoltageLevelId = value;
					this.SendPropertyChanged("VoltageLevelId");
					this.OnVoltageLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNumber", DbType="NVarChar(100)")]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenerationBaseline", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> GenerationBaseline
		{
			get
			{
				return this._GenerationBaseline;
			}
			set
			{
				if ((this._GenerationBaseline != value))
				{
					this.OnGenerationBaselineChanging(value);
					this.SendPropertyChanging();
					this._GenerationBaseline = value;
					this.SendPropertyChanged("GenerationBaseline");
					this.OnGenerationBaselineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatedMva", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> RatedMva
		{
			get
			{
				return this._RatedMva;
			}
			set
			{
				if ((this._RatedMva != value))
				{
					this.OnRatedMvaChanging(value);
					this.SendPropertyChanging();
					this._RatedMva = value;
					this.SendPropertyChanged("RatedMva");
					this.OnRatedMvaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Load_Name", Storage="_Names", ThisKey="Id", OtherKey="LoadId")]
		public EntitySet<Name> Names
		{
			get
			{
				return this._Names;
			}
			set
			{
				this._Names.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Load_LinkNote", Storage="_LinkNotes", ThisKey="Id", OtherKey="LoadId")]
		public EntitySet<LinkNote> LinkNotes
		{
			get
			{
				return this._LinkNotes;
			}
			set
			{
				this._LinkNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Load_LoadAttribute", Storage="_LoadAttributes", ThisKey="Id", OtherKey="LoadId")]
		public EntitySet<LoadAttribute> LoadAttributes
		{
			get
			{
				return this._LoadAttributes;
			}
			set
			{
				this._LoadAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoltageLevel_Load", Storage="_VoltageLevel", ThisKey="VoltageLevelId", OtherKey="Id", IsForeignKey=true)]
		public VoltageLevel VoltageLevel
		{
			get
			{
				return this._VoltageLevel.Entity;
			}
			set
			{
				VoltageLevel previousValue = this._VoltageLevel.Entity;
				if (((previousValue != value) 
							|| (this._VoltageLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VoltageLevel.Entity = null;
						previousValue.Loads.Remove(this);
					}
					this._VoltageLevel.Entity = value;
					if ((value != null))
					{
						value.Loads.Add(this);
						this._VoltageLevelId = value.Id;
					}
					else
					{
						this._VoltageLevelId = default(Nullable<int>);
					}
					this.SendPropertyChanged("VoltageLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceStatuse_Load", Storage="_ResourceStatuse", ThisKey="StatusId", OtherKey="Id", IsForeignKey=true)]
		public ResourceStatuse ResourceStatuse
		{
			get
			{
				return this._ResourceStatuse.Entity;
			}
			set
			{
				ResourceStatuse previousValue = this._ResourceStatuse.Entity;
				if (((previousValue != value) 
							|| (this._ResourceStatuse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceStatuse.Entity = null;
						previousValue.Loads.Remove(this);
					}
					this._ResourceStatuse.Entity = value;
					if ((value != null))
					{
						value.Loads.Add(this);
						this._StatusId = value.Id;
					}
					else
					{
						this._StatusId = default(int);
					}
					this.SendPropertyChanged("ResourceStatuse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.Load = this;
		}
		
		private void detach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.Load = null;
		}
		
		private void attach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.Load = this;
		}
		
		private void detach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.Load = null;
		}
		
		private void attach_LoadAttributes(LoadAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Load = this;
		}
		
		private void detach_LoadAttributes(LoadAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Load = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.PowerCall")]
	public partial class PowerCall : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Value;
		
		private int _UserCreatedId;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<GeneratingUnit> _GeneratingUnits;
		
		private EntitySet<ElectricityPurchaseAgreement> _ElectricityPurchaseAgreements;
		
		private EntitySet<Substation> _Substations;
		
		private EntitySet<ResourceBundle> _ResourceBundles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public PowerCall()
		{
			this._GeneratingUnits = new EntitySet<GeneratingUnit>(new Action<GeneratingUnit>(this.attach_GeneratingUnits), new Action<GeneratingUnit>(this.detach_GeneratingUnits));
			this._ElectricityPurchaseAgreements = new EntitySet<ElectricityPurchaseAgreement>(new Action<ElectricityPurchaseAgreement>(this.attach_ElectricityPurchaseAgreements), new Action<ElectricityPurchaseAgreement>(this.detach_ElectricityPurchaseAgreements));
			this._Substations = new EntitySet<Substation>(new Action<Substation>(this.attach_Substations), new Action<Substation>(this.detach_Substations));
			this._ResourceBundles = new EntitySet<ResourceBundle>(new Action<ResourceBundle>(this.attach_ResourceBundles), new Action<ResourceBundle>(this.detach_ResourceBundles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="Date NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerCall_GeneratingUnit", Storage="_GeneratingUnits", ThisKey="Id", OtherKey="PowerCallId")]
		public EntitySet<GeneratingUnit> GeneratingUnits
		{
			get
			{
				return this._GeneratingUnits;
			}
			set
			{
				this._GeneratingUnits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerCall_ElectricityPurchaseAgreement", Storage="_ElectricityPurchaseAgreements", ThisKey="Id", OtherKey="PowerCallId")]
		public EntitySet<ElectricityPurchaseAgreement> ElectricityPurchaseAgreements
		{
			get
			{
				return this._ElectricityPurchaseAgreements;
			}
			set
			{
				this._ElectricityPurchaseAgreements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerCall_Substation", Storage="_Substations", ThisKey="Id", OtherKey="PowerCallId")]
		public EntitySet<Substation> Substations
		{
			get
			{
				return this._Substations;
			}
			set
			{
				this._Substations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerCall_ResourceBundle", Storage="_ResourceBundles", ThisKey="Id", OtherKey="PowerCallId")]
		public EntitySet<ResourceBundle> ResourceBundles
		{
			get
			{
				return this._ResourceBundles;
			}
			set
			{
				this._ResourceBundles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GeneratingUnits(GeneratingUnit entity)
		{
			this.SendPropertyChanging();
			entity.PowerCall = this;
		}
		
		private void detach_GeneratingUnits(GeneratingUnit entity)
		{
			this.SendPropertyChanging();
			entity.PowerCall = null;
		}
		
		private void attach_ElectricityPurchaseAgreements(ElectricityPurchaseAgreement entity)
		{
			this.SendPropertyChanging();
			entity.PowerCall = this;
		}
		
		private void detach_ElectricityPurchaseAgreements(ElectricityPurchaseAgreement entity)
		{
			this.SendPropertyChanging();
			entity.PowerCall = null;
		}
		
		private void attach_Substations(Substation entity)
		{
			this.SendPropertyChanging();
			entity.PowerCall = this;
		}
		
		private void detach_Substations(Substation entity)
		{
			this.SendPropertyChanging();
			entity.PowerCall = null;
		}
		
		private void attach_ResourceBundles(ResourceBundle entity)
		{
			this.SendPropertyChanging();
			entity.PowerCall = this;
		}
		
		private void detach_ResourceBundles(ResourceBundle entity)
		{
			this.SendPropertyChanging();
			entity.PowerCall = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.EPAStatuses")]
	public partial class EPAStatuse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private EntitySet<ElectricityPurchaseAgreement> _ElectricityPurchaseAgreements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    #endregion
		
		public EPAStatuse()
		{
			this._ElectricityPurchaseAgreements = new EntitySet<ElectricityPurchaseAgreement>(new Action<ElectricityPurchaseAgreement>(this.attach_ElectricityPurchaseAgreements), new Action<ElectricityPurchaseAgreement>(this.detach_ElectricityPurchaseAgreements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EPAStatuse_ElectricityPurchaseAgreement", Storage="_ElectricityPurchaseAgreements", ThisKey="ID", OtherKey="EPAStatusId")]
		public EntitySet<ElectricityPurchaseAgreement> ElectricityPurchaseAgreements
		{
			get
			{
				return this._ElectricityPurchaseAgreements;
			}
			set
			{
				this._ElectricityPurchaseAgreements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ElectricityPurchaseAgreements(ElectricityPurchaseAgreement entity)
		{
			this.SendPropertyChanging();
			entity.EPAStatuse = this;
		}
		
		private void detach_ElectricityPurchaseAgreements(ElectricityPurchaseAgreement entity)
		{
			this.SendPropertyChanging();
			entity.EPAStatuse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.GeneratorAttributes")]
	public partial class GeneratorAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _OriginalId;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private System.Nullable<System.DateTime> _DateEnd;
		
		private System.Nullable<System.DateTime> _DateReplaced;
		
		private int _GeneratingUnitId;
		
		private System.Nullable<decimal> _RatedMVA;
		
		private System.Nullable<decimal> _RatedOverExcitedPowerFactor;
		
		private System.Nullable<decimal> _RatedUnderExcitedPowerFactor;
		
		private System.Nullable<decimal> _NamePlateCapacityInMW;
		
		private System.Nullable<decimal> _MaximumPowerOutput;
		
		private System.Nullable<decimal> _RatedPowerFactor;
		
		private int _ResourcePlanId;
		
		private System.Nullable<decimal> _DependableGeneratingCapacity;
		
		private System.Nullable<int> _Probability;
		
		private System.Nullable<decimal> _EffectiveLoadCarryingCapacity;
		
		private System.Nullable<System.DateTime> _InServiceStartDate;
		
		private System.Nullable<System.DateTime> _InServiceEndDate;
		
		private System.Nullable<bool> _IsNitsNominated;
		
		private System.Nullable<decimal> _PointToPointCapacity;
		
		private System.Nullable<decimal> _MaxTakeOrPayCapacity;
		
		private System.Nullable<decimal> _NitsDesignatedCapacity;
		
		private System.Nullable<decimal> _EPACapacity;
		
		private System.Nullable<decimal> _MaxOutputForNonFirmTransmission;
		
		private System.Nullable<decimal> _MaxOutputForFirmTransmission;
		
		private System.Nullable<decimal> _ReliabilityMustRunCapacity;
		
		private System.Nullable<decimal> _MonthlyAverageCapacity;
		
		private System.Nullable<decimal> _PhysicalMinimumOutput;
		
		private System.Nullable<decimal> _RegulatoryMinimumOutput;
		
		private System.Nullable<decimal> _SystemCapacity;
		
		private System.Nullable<int> _ProjectPhaseId;
		
		private System.Nullable<decimal> _LeadingPowerFactor;
		
		private System.Nullable<decimal> _LaggingPowerFactor;
		
		private EntitySet<LinkNote> _LinkNotes;
		
		private EntityRef<GeneratingUnit> _GeneratingUnit;
		
		private EntityRef<ResourcePlan> _ResourcePlan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOriginalIdChanging(System.Nullable<int> value);
    partial void OnOriginalIdChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnDateEndChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEndChanged();
    partial void OnDateReplacedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateReplacedChanged();
    partial void OnGeneratingUnitIdChanging(int value);
    partial void OnGeneratingUnitIdChanged();
    partial void OnRatedMVAChanging(System.Nullable<decimal> value);
    partial void OnRatedMVAChanged();
    partial void OnRatedOverExcitedPowerFactorChanging(System.Nullable<decimal> value);
    partial void OnRatedOverExcitedPowerFactorChanged();
    partial void OnRatedUnderExcitedPowerFactorChanging(System.Nullable<decimal> value);
    partial void OnRatedUnderExcitedPowerFactorChanged();
    partial void OnNamePlateCapacityInMWChanging(System.Nullable<decimal> value);
    partial void OnNamePlateCapacityInMWChanged();
    partial void OnMaximumPowerOutputChanging(System.Nullable<decimal> value);
    partial void OnMaximumPowerOutputChanged();
    partial void OnRatedPowerFactorChanging(System.Nullable<decimal> value);
    partial void OnRatedPowerFactorChanged();
    partial void OnResourcePlanIdChanging(int value);
    partial void OnResourcePlanIdChanged();
    partial void OnDependableGeneratingCapacityChanging(System.Nullable<decimal> value);
    partial void OnDependableGeneratingCapacityChanged();
    partial void OnProbabilityChanging(System.Nullable<int> value);
    partial void OnProbabilityChanged();
    partial void OnEffectiveLoadCarryingCapacityChanging(System.Nullable<decimal> value);
    partial void OnEffectiveLoadCarryingCapacityChanged();
    partial void OnInServiceStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInServiceStartDateChanged();
    partial void OnInServiceEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInServiceEndDateChanged();
    partial void OnIsNitsNominatedChanging(System.Nullable<bool> value);
    partial void OnIsNitsNominatedChanged();
    partial void OnPointToPointCapacityChanging(System.Nullable<decimal> value);
    partial void OnPointToPointCapacityChanged();
    partial void OnMaxTakeOrPayCapacityChanging(System.Nullable<decimal> value);
    partial void OnMaxTakeOrPayCapacityChanged();
    partial void OnNitsDesignatedCapacityChanging(System.Nullable<decimal> value);
    partial void OnNitsDesignatedCapacityChanged();
    partial void OnEPACapacityChanging(System.Nullable<decimal> value);
    partial void OnEPACapacityChanged();
    partial void OnMaxOutputForNonFirmTransmissionChanging(System.Nullable<decimal> value);
    partial void OnMaxOutputForNonFirmTransmissionChanged();
    partial void OnMaxOutputForFirmTransmissionChanging(System.Nullable<decimal> value);
    partial void OnMaxOutputForFirmTransmissionChanged();
    partial void OnReliabilityMustRunCapacityChanging(System.Nullable<decimal> value);
    partial void OnReliabilityMustRunCapacityChanged();
    partial void OnMonthlyAverageCapacityChanging(System.Nullable<decimal> value);
    partial void OnMonthlyAverageCapacityChanged();
    partial void OnPhysicalMinimumOutputChanging(System.Nullable<decimal> value);
    partial void OnPhysicalMinimumOutputChanged();
    partial void OnRegulatoryMinimumOutputChanging(System.Nullable<decimal> value);
    partial void OnRegulatoryMinimumOutputChanged();
    partial void OnSystemCapacityChanging(System.Nullable<decimal> value);
    partial void OnSystemCapacityChanged();
    partial void OnProjectPhaseIdChanging(System.Nullable<int> value);
    partial void OnProjectPhaseIdChanged();
    partial void OnLeadingPowerFactorChanging(System.Nullable<decimal> value);
    partial void OnLeadingPowerFactorChanged();
    partial void OnLaggingPowerFactorChanging(System.Nullable<decimal> value);
    partial void OnLaggingPowerFactorChanged();
    #endregion
		
		public GeneratorAttribute()
		{
			this._LinkNotes = new EntitySet<LinkNote>(new Action<LinkNote>(this.attach_LinkNotes), new Action<LinkNote>(this.detach_LinkNotes));
			this._GeneratingUnit = default(EntityRef<GeneratingUnit>);
			this._ResourcePlan = default(EntityRef<ResourcePlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalId", DbType="Int")]
		public System.Nullable<int> OriginalId
		{
			get
			{
				return this._OriginalId;
			}
			set
			{
				if ((this._OriginalId != value))
				{
					this.OnOriginalIdChanging(value);
					this.SendPropertyChanging();
					this._OriginalId = value;
					this.SendPropertyChanged("OriginalId");
					this.OnOriginalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this.OnDateEndChanging(value);
					this.SendPropertyChanging();
					this._DateEnd = value;
					this.SendPropertyChanged("DateEnd");
					this.OnDateEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateReplaced", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateReplaced
		{
			get
			{
				return this._DateReplaced;
			}
			set
			{
				if ((this._DateReplaced != value))
				{
					this.OnDateReplacedChanging(value);
					this.SendPropertyChanging();
					this._DateReplaced = value;
					this.SendPropertyChanged("DateReplaced");
					this.OnDateReplacedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratingUnitId", DbType="Int NOT NULL")]
		public int GeneratingUnitId
		{
			get
			{
				return this._GeneratingUnitId;
			}
			set
			{
				if ((this._GeneratingUnitId != value))
				{
					if (this._GeneratingUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeneratingUnitIdChanging(value);
					this.SendPropertyChanging();
					this._GeneratingUnitId = value;
					this.SendPropertyChanged("GeneratingUnitId");
					this.OnGeneratingUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatedMVA", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> RatedMVA
		{
			get
			{
				return this._RatedMVA;
			}
			set
			{
				if ((this._RatedMVA != value))
				{
					this.OnRatedMVAChanging(value);
					this.SendPropertyChanging();
					this._RatedMVA = value;
					this.SendPropertyChanged("RatedMVA");
					this.OnRatedMVAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatedOverExcitedPowerFactor", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> RatedOverExcitedPowerFactor
		{
			get
			{
				return this._RatedOverExcitedPowerFactor;
			}
			set
			{
				if ((this._RatedOverExcitedPowerFactor != value))
				{
					this.OnRatedOverExcitedPowerFactorChanging(value);
					this.SendPropertyChanging();
					this._RatedOverExcitedPowerFactor = value;
					this.SendPropertyChanged("RatedOverExcitedPowerFactor");
					this.OnRatedOverExcitedPowerFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatedUnderExcitedPowerFactor", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> RatedUnderExcitedPowerFactor
		{
			get
			{
				return this._RatedUnderExcitedPowerFactor;
			}
			set
			{
				if ((this._RatedUnderExcitedPowerFactor != value))
				{
					this.OnRatedUnderExcitedPowerFactorChanging(value);
					this.SendPropertyChanging();
					this._RatedUnderExcitedPowerFactor = value;
					this.SendPropertyChanged("RatedUnderExcitedPowerFactor");
					this.OnRatedUnderExcitedPowerFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NamePlateCapacityInMW", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> NamePlateCapacityInMW
		{
			get
			{
				return this._NamePlateCapacityInMW;
			}
			set
			{
				if ((this._NamePlateCapacityInMW != value))
				{
					this.OnNamePlateCapacityInMWChanging(value);
					this.SendPropertyChanging();
					this._NamePlateCapacityInMW = value;
					this.SendPropertyChanged("NamePlateCapacityInMW");
					this.OnNamePlateCapacityInMWChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaximumPowerOutput", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> MaximumPowerOutput
		{
			get
			{
				return this._MaximumPowerOutput;
			}
			set
			{
				if ((this._MaximumPowerOutput != value))
				{
					this.OnMaximumPowerOutputChanging(value);
					this.SendPropertyChanging();
					this._MaximumPowerOutput = value;
					this.SendPropertyChanged("MaximumPowerOutput");
					this.OnMaximumPowerOutputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatedPowerFactor", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> RatedPowerFactor
		{
			get
			{
				return this._RatedPowerFactor;
			}
			set
			{
				if ((this._RatedPowerFactor != value))
				{
					this.OnRatedPowerFactorChanging(value);
					this.SendPropertyChanging();
					this._RatedPowerFactor = value;
					this.SendPropertyChanged("RatedPowerFactor");
					this.OnRatedPowerFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourcePlanId", DbType="Int NOT NULL")]
		public int ResourcePlanId
		{
			get
			{
				return this._ResourcePlanId;
			}
			set
			{
				if ((this._ResourcePlanId != value))
				{
					if (this._ResourcePlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourcePlanIdChanging(value);
					this.SendPropertyChanging();
					this._ResourcePlanId = value;
					this.SendPropertyChanged("ResourcePlanId");
					this.OnResourcePlanIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DependableGeneratingCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> DependableGeneratingCapacity
		{
			get
			{
				return this._DependableGeneratingCapacity;
			}
			set
			{
				if ((this._DependableGeneratingCapacity != value))
				{
					this.OnDependableGeneratingCapacityChanging(value);
					this.SendPropertyChanging();
					this._DependableGeneratingCapacity = value;
					this.SendPropertyChanged("DependableGeneratingCapacity");
					this.OnDependableGeneratingCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Probability", DbType="Int")]
		public System.Nullable<int> Probability
		{
			get
			{
				return this._Probability;
			}
			set
			{
				if ((this._Probability != value))
				{
					this.OnProbabilityChanging(value);
					this.SendPropertyChanging();
					this._Probability = value;
					this.SendPropertyChanged("Probability");
					this.OnProbabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveLoadCarryingCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> EffectiveLoadCarryingCapacity
		{
			get
			{
				return this._EffectiveLoadCarryingCapacity;
			}
			set
			{
				if ((this._EffectiveLoadCarryingCapacity != value))
				{
					this.OnEffectiveLoadCarryingCapacityChanging(value);
					this.SendPropertyChanging();
					this._EffectiveLoadCarryingCapacity = value;
					this.SendPropertyChanged("EffectiveLoadCarryingCapacity");
					this.OnEffectiveLoadCarryingCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InServiceStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InServiceStartDate
		{
			get
			{
				return this._InServiceStartDate;
			}
			set
			{
				if ((this._InServiceStartDate != value))
				{
					this.OnInServiceStartDateChanging(value);
					this.SendPropertyChanging();
					this._InServiceStartDate = value;
					this.SendPropertyChanged("InServiceStartDate");
					this.OnInServiceStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InServiceEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InServiceEndDate
		{
			get
			{
				return this._InServiceEndDate;
			}
			set
			{
				if ((this._InServiceEndDate != value))
				{
					this.OnInServiceEndDateChanging(value);
					this.SendPropertyChanging();
					this._InServiceEndDate = value;
					this.SendPropertyChanged("InServiceEndDate");
					this.OnInServiceEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNitsNominated", DbType="Bit")]
		public System.Nullable<bool> IsNitsNominated
		{
			get
			{
				return this._IsNitsNominated;
			}
			set
			{
				if ((this._IsNitsNominated != value))
				{
					this.OnIsNitsNominatedChanging(value);
					this.SendPropertyChanging();
					this._IsNitsNominated = value;
					this.SendPropertyChanged("IsNitsNominated");
					this.OnIsNitsNominatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PointToPointCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> PointToPointCapacity
		{
			get
			{
				return this._PointToPointCapacity;
			}
			set
			{
				if ((this._PointToPointCapacity != value))
				{
					this.OnPointToPointCapacityChanging(value);
					this.SendPropertyChanging();
					this._PointToPointCapacity = value;
					this.SendPropertyChanged("PointToPointCapacity");
					this.OnPointToPointCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxTakeOrPayCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> MaxTakeOrPayCapacity
		{
			get
			{
				return this._MaxTakeOrPayCapacity;
			}
			set
			{
				if ((this._MaxTakeOrPayCapacity != value))
				{
					this.OnMaxTakeOrPayCapacityChanging(value);
					this.SendPropertyChanging();
					this._MaxTakeOrPayCapacity = value;
					this.SendPropertyChanged("MaxTakeOrPayCapacity");
					this.OnMaxTakeOrPayCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NitsDesignatedCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> NitsDesignatedCapacity
		{
			get
			{
				return this._NitsDesignatedCapacity;
			}
			set
			{
				if ((this._NitsDesignatedCapacity != value))
				{
					this.OnNitsDesignatedCapacityChanging(value);
					this.SendPropertyChanging();
					this._NitsDesignatedCapacity = value;
					this.SendPropertyChanged("NitsDesignatedCapacity");
					this.OnNitsDesignatedCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EPACapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> EPACapacity
		{
			get
			{
				return this._EPACapacity;
			}
			set
			{
				if ((this._EPACapacity != value))
				{
					this.OnEPACapacityChanging(value);
					this.SendPropertyChanging();
					this._EPACapacity = value;
					this.SendPropertyChanged("EPACapacity");
					this.OnEPACapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxOutputForNonFirmTransmission", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> MaxOutputForNonFirmTransmission
		{
			get
			{
				return this._MaxOutputForNonFirmTransmission;
			}
			set
			{
				if ((this._MaxOutputForNonFirmTransmission != value))
				{
					this.OnMaxOutputForNonFirmTransmissionChanging(value);
					this.SendPropertyChanging();
					this._MaxOutputForNonFirmTransmission = value;
					this.SendPropertyChanged("MaxOutputForNonFirmTransmission");
					this.OnMaxOutputForNonFirmTransmissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxOutputForFirmTransmission", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> MaxOutputForFirmTransmission
		{
			get
			{
				return this._MaxOutputForFirmTransmission;
			}
			set
			{
				if ((this._MaxOutputForFirmTransmission != value))
				{
					this.OnMaxOutputForFirmTransmissionChanging(value);
					this.SendPropertyChanging();
					this._MaxOutputForFirmTransmission = value;
					this.SendPropertyChanged("MaxOutputForFirmTransmission");
					this.OnMaxOutputForFirmTransmissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReliabilityMustRunCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> ReliabilityMustRunCapacity
		{
			get
			{
				return this._ReliabilityMustRunCapacity;
			}
			set
			{
				if ((this._ReliabilityMustRunCapacity != value))
				{
					this.OnReliabilityMustRunCapacityChanging(value);
					this.SendPropertyChanging();
					this._ReliabilityMustRunCapacity = value;
					this.SendPropertyChanged("ReliabilityMustRunCapacity");
					this.OnReliabilityMustRunCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthlyAverageCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> MonthlyAverageCapacity
		{
			get
			{
				return this._MonthlyAverageCapacity;
			}
			set
			{
				if ((this._MonthlyAverageCapacity != value))
				{
					this.OnMonthlyAverageCapacityChanging(value);
					this.SendPropertyChanging();
					this._MonthlyAverageCapacity = value;
					this.SendPropertyChanged("MonthlyAverageCapacity");
					this.OnMonthlyAverageCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalMinimumOutput", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> PhysicalMinimumOutput
		{
			get
			{
				return this._PhysicalMinimumOutput;
			}
			set
			{
				if ((this._PhysicalMinimumOutput != value))
				{
					this.OnPhysicalMinimumOutputChanging(value);
					this.SendPropertyChanging();
					this._PhysicalMinimumOutput = value;
					this.SendPropertyChanged("PhysicalMinimumOutput");
					this.OnPhysicalMinimumOutputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegulatoryMinimumOutput", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> RegulatoryMinimumOutput
		{
			get
			{
				return this._RegulatoryMinimumOutput;
			}
			set
			{
				if ((this._RegulatoryMinimumOutput != value))
				{
					this.OnRegulatoryMinimumOutputChanging(value);
					this.SendPropertyChanging();
					this._RegulatoryMinimumOutput = value;
					this.SendPropertyChanged("RegulatoryMinimumOutput");
					this.OnRegulatoryMinimumOutputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> SystemCapacity
		{
			get
			{
				return this._SystemCapacity;
			}
			set
			{
				if ((this._SystemCapacity != value))
				{
					this.OnSystemCapacityChanging(value);
					this.SendPropertyChanging();
					this._SystemCapacity = value;
					this.SendPropertyChanged("SystemCapacity");
					this.OnSystemCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectPhaseId", DbType="Int")]
		public System.Nullable<int> ProjectPhaseId
		{
			get
			{
				return this._ProjectPhaseId;
			}
			set
			{
				if ((this._ProjectPhaseId != value))
				{
					this.OnProjectPhaseIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectPhaseId = value;
					this.SendPropertyChanged("ProjectPhaseId");
					this.OnProjectPhaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadingPowerFactor", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> LeadingPowerFactor
		{
			get
			{
				return this._LeadingPowerFactor;
			}
			set
			{
				if ((this._LeadingPowerFactor != value))
				{
					this.OnLeadingPowerFactorChanging(value);
					this.SendPropertyChanging();
					this._LeadingPowerFactor = value;
					this.SendPropertyChanged("LeadingPowerFactor");
					this.OnLeadingPowerFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LaggingPowerFactor", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> LaggingPowerFactor
		{
			get
			{
				return this._LaggingPowerFactor;
			}
			set
			{
				if ((this._LaggingPowerFactor != value))
				{
					this.OnLaggingPowerFactorChanging(value);
					this.SendPropertyChanging();
					this._LaggingPowerFactor = value;
					this.SendPropertyChanged("LaggingPowerFactor");
					this.OnLaggingPowerFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneratorAttribute_LinkNote", Storage="_LinkNotes", ThisKey="Id", OtherKey="GeneratorAttributesId")]
		public EntitySet<LinkNote> LinkNotes
		{
			get
			{
				return this._LinkNotes;
			}
			set
			{
				this._LinkNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneratingUnit_GeneratorAttribute", Storage="_GeneratingUnit", ThisKey="GeneratingUnitId", OtherKey="Id", IsForeignKey=true)]
		public GeneratingUnit GeneratingUnit
		{
			get
			{
				return this._GeneratingUnit.Entity;
			}
			set
			{
				GeneratingUnit previousValue = this._GeneratingUnit.Entity;
				if (((previousValue != value) 
							|| (this._GeneratingUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneratingUnit.Entity = null;
						previousValue.GeneratorAttributes.Remove(this);
					}
					this._GeneratingUnit.Entity = value;
					if ((value != null))
					{
						value.GeneratorAttributes.Add(this);
						this._GeneratingUnitId = value.Id;
					}
					else
					{
						this._GeneratingUnitId = default(int);
					}
					this.SendPropertyChanged("GeneratingUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourcePlan_GeneratorAttribute", Storage="_ResourcePlan", ThisKey="ResourcePlanId", OtherKey="Id", IsForeignKey=true)]
		public ResourcePlan ResourcePlan
		{
			get
			{
				return this._ResourcePlan.Entity;
			}
			set
			{
				ResourcePlan previousValue = this._ResourcePlan.Entity;
				if (((previousValue != value) 
							|| (this._ResourcePlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourcePlan.Entity = null;
						previousValue.GeneratorAttributes.Remove(this);
					}
					this._ResourcePlan.Entity = value;
					if ((value != null))
					{
						value.GeneratorAttributes.Add(this);
						this._ResourcePlanId = value.Id;
					}
					else
					{
						this._ResourcePlanId = default(int);
					}
					this.SendPropertyChanged("ResourcePlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.GeneratorAttribute = this;
		}
		
		private void detach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.GeneratorAttribute = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.BaseVoltages")]
	public partial class BaseVoltage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _Voltage;
		
		private System.Nullable<bool> _IsDc;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<int> _UserCreatedId;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private EntitySet<Line> _Lines;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVoltageChanging(decimal value);
    partial void OnVoltageChanged();
    partial void OnIsDcChanging(System.Nullable<bool> value);
    partial void OnIsDcChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnUserCreatedIdChanging(System.Nullable<int> value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    #endregion
		
		public BaseVoltage()
		{
			this._Lines = new EntitySet<Line>(new Action<Line>(this.attach_Lines), new Action<Line>(this.detach_Lines));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Voltage", DbType="Decimal(20,10) NOT NULL")]
		public decimal Voltage
		{
			get
			{
				return this._Voltage;
			}
			set
			{
				if ((this._Voltage != value))
				{
					this.OnVoltageChanging(value);
					this.SendPropertyChanging();
					this._Voltage = value;
					this.SendPropertyChanged("Voltage");
					this.OnVoltageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDc", DbType="Bit")]
		public System.Nullable<bool> IsDc
		{
			get
			{
				return this._IsDc;
			}
			set
			{
				if ((this._IsDc != value))
				{
					this.OnIsDcChanging(value);
					this.SendPropertyChanging();
					this._IsDc = value;
					this.SendPropertyChanged("IsDc");
					this.OnIsDcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int")]
		public System.Nullable<int> UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseVoltage_Line", Storage="_Lines", ThisKey="Id", OtherKey="VoltageId")]
		public EntitySet<Line> Lines
		{
			get
			{
				return this._Lines;
			}
			set
			{
				this._Lines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lines(Line entity)
		{
			this.SendPropertyChanging();
			entity.BaseVoltage = this;
		}
		
		private void detach_Lines(Line entity)
		{
			this.SendPropertyChanging();
			entity.BaseVoltage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.GeneratingUnits")]
	public partial class GeneratingUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private int _GeneratorStatusID;
		
		private System.Nullable<int> _GeneratorTypeID;
		
		private string _Description;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<int> _VoltageLevelId;
		
		private System.Nullable<decimal> _MaxOperatingP;
		
		private System.Nullable<decimal> _MinOperatingP;
		
		private System.Nullable<decimal> _InitialP;
		
		private System.Nullable<decimal> _NormalPF;
		
		private System.Nullable<decimal> _LongPF;
		
		private System.Nullable<decimal> _ShortPF;
		
		private System.Nullable<int> _ManufacturerId;
		
		private string _Model;
		
		private string _SerialNumber;
		
		private System.Nullable<int> _NumberOfPolePairs;
		
		private bool _IsSyncCondenserCapable;
		
		private System.Nullable<int> _EnergySourceId;
		
		private System.Nullable<System.DateTime> _CIMLoadTS;
		
		private System.Nullable<System.DateTime> _NITSPlanLoadTS;
		
		private System.Nullable<int> _PowerCallId;
		
		private EntitySet<Name> _Names;
		
		private EntitySet<GeneratorAttribute> _GeneratorAttributes;
		
		private EntitySet<LinkTsrGeneratingUnit> _LinkTsrGeneratingUnits;
		
		private EntitySet<LinkNote> _LinkNotes;
		
		private EntityRef<VoltageLevel> _VoltageLevel;
		
		private EntityRef<PowerCall> _PowerCall;
		
		private EntityRef<ResourceStatuse> _ResourceStatuse;
		
		private EntityRef<FuelType> _FuelType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnGeneratorStatusIDChanging(int value);
    partial void OnGeneratorStatusIDChanged();
    partial void OnGeneratorTypeIDChanging(System.Nullable<int> value);
    partial void OnGeneratorTypeIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnVoltageLevelIdChanging(System.Nullable<int> value);
    partial void OnVoltageLevelIdChanged();
    partial void OnMaxOperatingPChanging(System.Nullable<decimal> value);
    partial void OnMaxOperatingPChanged();
    partial void OnMinOperatingPChanging(System.Nullable<decimal> value);
    partial void OnMinOperatingPChanged();
    partial void OnInitialPChanging(System.Nullable<decimal> value);
    partial void OnInitialPChanged();
    partial void OnNormalPFChanging(System.Nullable<decimal> value);
    partial void OnNormalPFChanged();
    partial void OnLongPFChanging(System.Nullable<decimal> value);
    partial void OnLongPFChanged();
    partial void OnShortPFChanging(System.Nullable<decimal> value);
    partial void OnShortPFChanged();
    partial void OnManufacturerIdChanging(System.Nullable<int> value);
    partial void OnManufacturerIdChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnSerialNumberChanging(string value);
    partial void OnSerialNumberChanged();
    partial void OnNumberOfPolePairsChanging(System.Nullable<int> value);
    partial void OnNumberOfPolePairsChanged();
    partial void OnIsSyncCondenserCapableChanging(bool value);
    partial void OnIsSyncCondenserCapableChanged();
    partial void OnEnergySourceIdChanging(System.Nullable<int> value);
    partial void OnEnergySourceIdChanged();
    partial void OnCIMLoadTSChanging(System.Nullable<System.DateTime> value);
    partial void OnCIMLoadTSChanged();
    partial void OnNITSPlanLoadTSChanging(System.Nullable<System.DateTime> value);
    partial void OnNITSPlanLoadTSChanged();
    partial void OnPowerCallIdChanging(System.Nullable<int> value);
    partial void OnPowerCallIdChanged();
    #endregion
		
		public GeneratingUnit()
		{
			this._Names = new EntitySet<Name>(new Action<Name>(this.attach_Names), new Action<Name>(this.detach_Names));
			this._GeneratorAttributes = new EntitySet<GeneratorAttribute>(new Action<GeneratorAttribute>(this.attach_GeneratorAttributes), new Action<GeneratorAttribute>(this.detach_GeneratorAttributes));
			this._LinkTsrGeneratingUnits = new EntitySet<LinkTsrGeneratingUnit>(new Action<LinkTsrGeneratingUnit>(this.attach_LinkTsrGeneratingUnits), new Action<LinkTsrGeneratingUnit>(this.detach_LinkTsrGeneratingUnits));
			this._LinkNotes = new EntitySet<LinkNote>(new Action<LinkNote>(this.attach_LinkNotes), new Action<LinkNote>(this.detach_LinkNotes));
			this._VoltageLevel = default(EntityRef<VoltageLevel>);
			this._PowerCall = default(EntityRef<PowerCall>);
			this._ResourceStatuse = default(EntityRef<ResourceStatuse>);
			this._FuelType = default(EntityRef<FuelType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratorStatusID", DbType="Int NOT NULL")]
		public int GeneratorStatusID
		{
			get
			{
				return this._GeneratorStatusID;
			}
			set
			{
				if ((this._GeneratorStatusID != value))
				{
					if (this._ResourceStatuse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeneratorStatusIDChanging(value);
					this.SendPropertyChanging();
					this._GeneratorStatusID = value;
					this.SendPropertyChanged("GeneratorStatusID");
					this.OnGeneratorStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratorTypeID", DbType="Int")]
		public System.Nullable<int> GeneratorTypeID
		{
			get
			{
				return this._GeneratorTypeID;
			}
			set
			{
				if ((this._GeneratorTypeID != value))
				{
					this.OnGeneratorTypeIDChanging(value);
					this.SendPropertyChanging();
					this._GeneratorTypeID = value;
					this.SendPropertyChanged("GeneratorTypeID");
					this.OnGeneratorTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoltageLevelId", DbType="Int")]
		public System.Nullable<int> VoltageLevelId
		{
			get
			{
				return this._VoltageLevelId;
			}
			set
			{
				if ((this._VoltageLevelId != value))
				{
					if (this._VoltageLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoltageLevelIdChanging(value);
					this.SendPropertyChanging();
					this._VoltageLevelId = value;
					this.SendPropertyChanged("VoltageLevelId");
					this.OnVoltageLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxOperatingP", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> MaxOperatingP
		{
			get
			{
				return this._MaxOperatingP;
			}
			set
			{
				if ((this._MaxOperatingP != value))
				{
					this.OnMaxOperatingPChanging(value);
					this.SendPropertyChanging();
					this._MaxOperatingP = value;
					this.SendPropertyChanged("MaxOperatingP");
					this.OnMaxOperatingPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinOperatingP", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> MinOperatingP
		{
			get
			{
				return this._MinOperatingP;
			}
			set
			{
				if ((this._MinOperatingP != value))
				{
					this.OnMinOperatingPChanging(value);
					this.SendPropertyChanging();
					this._MinOperatingP = value;
					this.SendPropertyChanged("MinOperatingP");
					this.OnMinOperatingPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialP", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> InitialP
		{
			get
			{
				return this._InitialP;
			}
			set
			{
				if ((this._InitialP != value))
				{
					this.OnInitialPChanging(value);
					this.SendPropertyChanging();
					this._InitialP = value;
					this.SendPropertyChanged("InitialP");
					this.OnInitialPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NormalPF", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> NormalPF
		{
			get
			{
				return this._NormalPF;
			}
			set
			{
				if ((this._NormalPF != value))
				{
					this.OnNormalPFChanging(value);
					this.SendPropertyChanging();
					this._NormalPF = value;
					this.SendPropertyChanged("NormalPF");
					this.OnNormalPFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongPF", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> LongPF
		{
			get
			{
				return this._LongPF;
			}
			set
			{
				if ((this._LongPF != value))
				{
					this.OnLongPFChanging(value);
					this.SendPropertyChanging();
					this._LongPF = value;
					this.SendPropertyChanged("LongPF");
					this.OnLongPFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortPF", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> ShortPF
		{
			get
			{
				return this._ShortPF;
			}
			set
			{
				if ((this._ShortPF != value))
				{
					this.OnShortPFChanging(value);
					this.SendPropertyChanging();
					this._ShortPF = value;
					this.SendPropertyChanged("ShortPF");
					this.OnShortPFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManufacturerId", DbType="Int")]
		public System.Nullable<int> ManufacturerId
		{
			get
			{
				return this._ManufacturerId;
			}
			set
			{
				if ((this._ManufacturerId != value))
				{
					this.OnManufacturerIdChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerId = value;
					this.SendPropertyChanged("ManufacturerId");
					this.OnManufacturerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="NVarChar(255)")]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="NVarChar(255)")]
		public string SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfPolePairs", DbType="Int")]
		public System.Nullable<int> NumberOfPolePairs
		{
			get
			{
				return this._NumberOfPolePairs;
			}
			set
			{
				if ((this._NumberOfPolePairs != value))
				{
					this.OnNumberOfPolePairsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfPolePairs = value;
					this.SendPropertyChanged("NumberOfPolePairs");
					this.OnNumberOfPolePairsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSyncCondenserCapable", DbType="Bit NOT NULL")]
		public bool IsSyncCondenserCapable
		{
			get
			{
				return this._IsSyncCondenserCapable;
			}
			set
			{
				if ((this._IsSyncCondenserCapable != value))
				{
					this.OnIsSyncCondenserCapableChanging(value);
					this.SendPropertyChanging();
					this._IsSyncCondenserCapable = value;
					this.SendPropertyChanged("IsSyncCondenserCapable");
					this.OnIsSyncCondenserCapableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnergySourceId", DbType="Int")]
		public System.Nullable<int> EnergySourceId
		{
			get
			{
				return this._EnergySourceId;
			}
			set
			{
				if ((this._EnergySourceId != value))
				{
					if (this._FuelType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnergySourceIdChanging(value);
					this.SendPropertyChanging();
					this._EnergySourceId = value;
					this.SendPropertyChanged("EnergySourceId");
					this.OnEnergySourceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CIMLoadTS", DbType="DateTime")]
		public System.Nullable<System.DateTime> CIMLoadTS
		{
			get
			{
				return this._CIMLoadTS;
			}
			set
			{
				if ((this._CIMLoadTS != value))
				{
					this.OnCIMLoadTSChanging(value);
					this.SendPropertyChanging();
					this._CIMLoadTS = value;
					this.SendPropertyChanged("CIMLoadTS");
					this.OnCIMLoadTSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NITSPlanLoadTS", DbType="DateTime")]
		public System.Nullable<System.DateTime> NITSPlanLoadTS
		{
			get
			{
				return this._NITSPlanLoadTS;
			}
			set
			{
				if ((this._NITSPlanLoadTS != value))
				{
					this.OnNITSPlanLoadTSChanging(value);
					this.SendPropertyChanging();
					this._NITSPlanLoadTS = value;
					this.SendPropertyChanged("NITSPlanLoadTS");
					this.OnNITSPlanLoadTSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PowerCallId", DbType="Int")]
		public System.Nullable<int> PowerCallId
		{
			get
			{
				return this._PowerCallId;
			}
			set
			{
				if ((this._PowerCallId != value))
				{
					if (this._PowerCall.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPowerCallIdChanging(value);
					this.SendPropertyChanging();
					this._PowerCallId = value;
					this.SendPropertyChanged("PowerCallId");
					this.OnPowerCallIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneratingUnit_Name", Storage="_Names", ThisKey="Id", OtherKey="GeneratingUnitId")]
		public EntitySet<Name> Names
		{
			get
			{
				return this._Names;
			}
			set
			{
				this._Names.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneratingUnit_GeneratorAttribute", Storage="_GeneratorAttributes", ThisKey="Id", OtherKey="GeneratingUnitId")]
		public EntitySet<GeneratorAttribute> GeneratorAttributes
		{
			get
			{
				return this._GeneratorAttributes;
			}
			set
			{
				this._GeneratorAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneratingUnit_LinkTsrGeneratingUnit", Storage="_LinkTsrGeneratingUnits", ThisKey="Id", OtherKey="GeneratingUnitId")]
		public EntitySet<LinkTsrGeneratingUnit> LinkTsrGeneratingUnits
		{
			get
			{
				return this._LinkTsrGeneratingUnits;
			}
			set
			{
				this._LinkTsrGeneratingUnits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneratingUnit_LinkNote", Storage="_LinkNotes", ThisKey="Id", OtherKey="GeneratingUnitId")]
		public EntitySet<LinkNote> LinkNotes
		{
			get
			{
				return this._LinkNotes;
			}
			set
			{
				this._LinkNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoltageLevel_GeneratingUnit", Storage="_VoltageLevel", ThisKey="VoltageLevelId", OtherKey="Id", IsForeignKey=true)]
		public VoltageLevel VoltageLevel
		{
			get
			{
				return this._VoltageLevel.Entity;
			}
			set
			{
				VoltageLevel previousValue = this._VoltageLevel.Entity;
				if (((previousValue != value) 
							|| (this._VoltageLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VoltageLevel.Entity = null;
						previousValue.GeneratingUnits.Remove(this);
					}
					this._VoltageLevel.Entity = value;
					if ((value != null))
					{
						value.GeneratingUnits.Add(this);
						this._VoltageLevelId = value.Id;
					}
					else
					{
						this._VoltageLevelId = default(Nullable<int>);
					}
					this.SendPropertyChanged("VoltageLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerCall_GeneratingUnit", Storage="_PowerCall", ThisKey="PowerCallId", OtherKey="Id", IsForeignKey=true)]
		public PowerCall PowerCall
		{
			get
			{
				return this._PowerCall.Entity;
			}
			set
			{
				PowerCall previousValue = this._PowerCall.Entity;
				if (((previousValue != value) 
							|| (this._PowerCall.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PowerCall.Entity = null;
						previousValue.GeneratingUnits.Remove(this);
					}
					this._PowerCall.Entity = value;
					if ((value != null))
					{
						value.GeneratingUnits.Add(this);
						this._PowerCallId = value.Id;
					}
					else
					{
						this._PowerCallId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PowerCall");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceStatuse_GeneratingUnit", Storage="_ResourceStatuse", ThisKey="GeneratorStatusID", OtherKey="Id", IsForeignKey=true)]
		public ResourceStatuse ResourceStatuse
		{
			get
			{
				return this._ResourceStatuse.Entity;
			}
			set
			{
				ResourceStatuse previousValue = this._ResourceStatuse.Entity;
				if (((previousValue != value) 
							|| (this._ResourceStatuse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceStatuse.Entity = null;
						previousValue.GeneratingUnits.Remove(this);
					}
					this._ResourceStatuse.Entity = value;
					if ((value != null))
					{
						value.GeneratingUnits.Add(this);
						this._GeneratorStatusID = value.Id;
					}
					else
					{
						this._GeneratorStatusID = default(int);
					}
					this.SendPropertyChanged("ResourceStatuse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FuelType_GeneratingUnit", Storage="_FuelType", ThisKey="EnergySourceId", OtherKey="Id", IsForeignKey=true)]
		public FuelType FuelType
		{
			get
			{
				return this._FuelType.Entity;
			}
			set
			{
				FuelType previousValue = this._FuelType.Entity;
				if (((previousValue != value) 
							|| (this._FuelType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FuelType.Entity = null;
						previousValue.GeneratingUnits.Remove(this);
					}
					this._FuelType.Entity = value;
					if ((value != null))
					{
						value.GeneratingUnits.Add(this);
						this._EnergySourceId = value.Id;
					}
					else
					{
						this._EnergySourceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("FuelType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.GeneratingUnit = this;
		}
		
		private void detach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.GeneratingUnit = null;
		}
		
		private void attach_GeneratorAttributes(GeneratorAttribute entity)
		{
			this.SendPropertyChanging();
			entity.GeneratingUnit = this;
		}
		
		private void detach_GeneratorAttributes(GeneratorAttribute entity)
		{
			this.SendPropertyChanging();
			entity.GeneratingUnit = null;
		}
		
		private void attach_LinkTsrGeneratingUnits(LinkTsrGeneratingUnit entity)
		{
			this.SendPropertyChanging();
			entity.GeneratingUnit = this;
		}
		
		private void detach_LinkTsrGeneratingUnits(LinkTsrGeneratingUnit entity)
		{
			this.SendPropertyChanging();
			entity.GeneratingUnit = null;
		}
		
		private void attach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.GeneratingUnit = this;
		}
		
		private void detach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.GeneratingUnit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.ResourcePlanType")]
	public partial class ResourcePlanType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Value;
		
		private string _Name;
		
		private int _UserCreatedId;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private EntitySet<ResourcePlan> _ResourcePlans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    #endregion
		
		public ResourcePlanType()
		{
			this._ResourcePlans = new EntitySet<ResourcePlan>(new Action<ResourcePlan>(this.attach_ResourcePlans), new Action<ResourcePlan>(this.detach_ResourcePlans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourcePlanType_ResourcePlan", Storage="_ResourcePlans", ThisKey="Id", OtherKey="ResourcePlanTypeId")]
		public EntitySet<ResourcePlan> ResourcePlans
		{
			get
			{
				return this._ResourcePlans;
			}
			set
			{
				this._ResourcePlans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResourcePlans(ResourcePlan entity)
		{
			this.SendPropertyChanging();
			entity.ResourcePlanType = this;
		}
		
		private void detach_ResourcePlans(ResourcePlan entity)
		{
			this.SendPropertyChanging();
			entity.ResourcePlanType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.ResourcePlans")]
	public partial class ResourcePlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _PlanName;
		
		private string _Description;
		
		private int _CreatedByUserId;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private System.Nullable<int> _UpdatedByUserId;
		
		private int _FiscalYear;
		
		private System.Nullable<int> _Version;
		
		private int _ResourcePlanTypeId;
		
		private System.Nullable<int> _ResourcePlanIndex;
		
		private System.Nullable<int> _FileReferenceId;
		
		private System.Nullable<int> _ForecastBeginYear;
		
		private System.Nullable<int> _ForecastEndYear;
		
		private EntitySet<GeneratorAttribute> _GeneratorAttributes;
		
		private EntitySet<SubstationAttribute> _SubstationAttributes;
		
		private EntitySet<FileReference> _FileReferences;
		
		private EntitySet<ResourceBundleAttribute> _ResourceBundleAttributes;
		
		private EntitySet<LoadAttribute> _LoadAttributes;
		
		private EntityRef<ResourcePlanType> _ResourcePlanType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPlanNameChanging(string value);
    partial void OnPlanNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedByUserIdChanging(int value);
    partial void OnCreatedByUserIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUpdatedByUserIdChanging(System.Nullable<int> value);
    partial void OnUpdatedByUserIdChanged();
    partial void OnFiscalYearChanging(int value);
    partial void OnFiscalYearChanged();
    partial void OnVersionChanging(System.Nullable<int> value);
    partial void OnVersionChanged();
    partial void OnResourcePlanTypeIdChanging(int value);
    partial void OnResourcePlanTypeIdChanged();
    partial void OnResourcePlanIndexChanging(System.Nullable<int> value);
    partial void OnResourcePlanIndexChanged();
    partial void OnFileReferenceIdChanging(System.Nullable<int> value);
    partial void OnFileReferenceIdChanged();
    partial void OnForecastBeginYearChanging(System.Nullable<int> value);
    partial void OnForecastBeginYearChanged();
    partial void OnForecastEndYearChanging(System.Nullable<int> value);
    partial void OnForecastEndYearChanged();
    #endregion
		
		public ResourcePlan()
		{
			this._GeneratorAttributes = new EntitySet<GeneratorAttribute>(new Action<GeneratorAttribute>(this.attach_GeneratorAttributes), new Action<GeneratorAttribute>(this.detach_GeneratorAttributes));
			this._SubstationAttributes = new EntitySet<SubstationAttribute>(new Action<SubstationAttribute>(this.attach_SubstationAttributes), new Action<SubstationAttribute>(this.detach_SubstationAttributes));
			this._FileReferences = new EntitySet<FileReference>(new Action<FileReference>(this.attach_FileReferences), new Action<FileReference>(this.detach_FileReferences));
			this._ResourceBundleAttributes = new EntitySet<ResourceBundleAttribute>(new Action<ResourceBundleAttribute>(this.attach_ResourceBundleAttributes), new Action<ResourceBundleAttribute>(this.detach_ResourceBundleAttributes));
			this._LoadAttributes = new EntitySet<LoadAttribute>(new Action<LoadAttribute>(this.attach_LoadAttributes), new Action<LoadAttribute>(this.detach_LoadAttributes));
			this._ResourcePlanType = default(EntityRef<ResourcePlanType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanName", DbType="NVarChar(100)")]
		public string PlanName
		{
			get
			{
				return this._PlanName;
			}
			set
			{
				if ((this._PlanName != value))
				{
					this.OnPlanNameChanging(value);
					this.SendPropertyChanging();
					this._PlanName = value;
					this.SendPropertyChanged("PlanName");
					this.OnPlanNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByUserId", DbType="Int NOT NULL")]
		public int CreatedByUserId
		{
			get
			{
				return this._CreatedByUserId;
			}
			set
			{
				if ((this._CreatedByUserId != value))
				{
					this.OnCreatedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUserId = value;
					this.SendPropertyChanged("CreatedByUserId");
					this.OnCreatedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedByUserId", DbType="Int")]
		public System.Nullable<int> UpdatedByUserId
		{
			get
			{
				return this._UpdatedByUserId;
			}
			set
			{
				if ((this._UpdatedByUserId != value))
				{
					this.OnUpdatedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._UpdatedByUserId = value;
					this.SendPropertyChanged("UpdatedByUserId");
					this.OnUpdatedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FiscalYear", DbType="Int NOT NULL")]
		public int FiscalYear
		{
			get
			{
				return this._FiscalYear;
			}
			set
			{
				if ((this._FiscalYear != value))
				{
					this.OnFiscalYearChanging(value);
					this.SendPropertyChanging();
					this._FiscalYear = value;
					this.SendPropertyChanged("FiscalYear");
					this.OnFiscalYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int")]
		public System.Nullable<int> Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourcePlanTypeId", DbType="Int NOT NULL")]
		public int ResourcePlanTypeId
		{
			get
			{
				return this._ResourcePlanTypeId;
			}
			set
			{
				if ((this._ResourcePlanTypeId != value))
				{
					if (this._ResourcePlanType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourcePlanTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ResourcePlanTypeId = value;
					this.SendPropertyChanged("ResourcePlanTypeId");
					this.OnResourcePlanTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourcePlanIndex", DbType="Int")]
		public System.Nullable<int> ResourcePlanIndex
		{
			get
			{
				return this._ResourcePlanIndex;
			}
			set
			{
				if ((this._ResourcePlanIndex != value))
				{
					this.OnResourcePlanIndexChanging(value);
					this.SendPropertyChanging();
					this._ResourcePlanIndex = value;
					this.SendPropertyChanged("ResourcePlanIndex");
					this.OnResourcePlanIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileReferenceId", DbType="Int")]
		public System.Nullable<int> FileReferenceId
		{
			get
			{
				return this._FileReferenceId;
			}
			set
			{
				if ((this._FileReferenceId != value))
				{
					this.OnFileReferenceIdChanging(value);
					this.SendPropertyChanging();
					this._FileReferenceId = value;
					this.SendPropertyChanged("FileReferenceId");
					this.OnFileReferenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForecastBeginYear", DbType="Int")]
		public System.Nullable<int> ForecastBeginYear
		{
			get
			{
				return this._ForecastBeginYear;
			}
			set
			{
				if ((this._ForecastBeginYear != value))
				{
					this.OnForecastBeginYearChanging(value);
					this.SendPropertyChanging();
					this._ForecastBeginYear = value;
					this.SendPropertyChanged("ForecastBeginYear");
					this.OnForecastBeginYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForecastEndYear", DbType="Int")]
		public System.Nullable<int> ForecastEndYear
		{
			get
			{
				return this._ForecastEndYear;
			}
			set
			{
				if ((this._ForecastEndYear != value))
				{
					this.OnForecastEndYearChanging(value);
					this.SendPropertyChanging();
					this._ForecastEndYear = value;
					this.SendPropertyChanged("ForecastEndYear");
					this.OnForecastEndYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourcePlan_GeneratorAttribute", Storage="_GeneratorAttributes", ThisKey="Id", OtherKey="ResourcePlanId")]
		public EntitySet<GeneratorAttribute> GeneratorAttributes
		{
			get
			{
				return this._GeneratorAttributes;
			}
			set
			{
				this._GeneratorAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourcePlan_SubstationAttribute", Storage="_SubstationAttributes", ThisKey="Id", OtherKey="ResourcePlanId")]
		public EntitySet<SubstationAttribute> SubstationAttributes
		{
			get
			{
				return this._SubstationAttributes;
			}
			set
			{
				this._SubstationAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourcePlan_FileReference", Storage="_FileReferences", ThisKey="Id", OtherKey="ResourcePlanId")]
		public EntitySet<FileReference> FileReferences
		{
			get
			{
				return this._FileReferences;
			}
			set
			{
				this._FileReferences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourcePlan_ResourceBundleAttribute", Storage="_ResourceBundleAttributes", ThisKey="Id", OtherKey="ResourcePlanId")]
		public EntitySet<ResourceBundleAttribute> ResourceBundleAttributes
		{
			get
			{
				return this._ResourceBundleAttributes;
			}
			set
			{
				this._ResourceBundleAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourcePlan_LoadAttribute", Storage="_LoadAttributes", ThisKey="Id", OtherKey="ResourcePlanId")]
		public EntitySet<LoadAttribute> LoadAttributes
		{
			get
			{
				return this._LoadAttributes;
			}
			set
			{
				this._LoadAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourcePlanType_ResourcePlan", Storage="_ResourcePlanType", ThisKey="ResourcePlanTypeId", OtherKey="Id", IsForeignKey=true)]
		public ResourcePlanType ResourcePlanType
		{
			get
			{
				return this._ResourcePlanType.Entity;
			}
			set
			{
				ResourcePlanType previousValue = this._ResourcePlanType.Entity;
				if (((previousValue != value) 
							|| (this._ResourcePlanType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourcePlanType.Entity = null;
						previousValue.ResourcePlans.Remove(this);
					}
					this._ResourcePlanType.Entity = value;
					if ((value != null))
					{
						value.ResourcePlans.Add(this);
						this._ResourcePlanTypeId = value.Id;
					}
					else
					{
						this._ResourcePlanTypeId = default(int);
					}
					this.SendPropertyChanged("ResourcePlanType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GeneratorAttributes(GeneratorAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ResourcePlan = this;
		}
		
		private void detach_GeneratorAttributes(GeneratorAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ResourcePlan = null;
		}
		
		private void attach_SubstationAttributes(SubstationAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ResourcePlan = this;
		}
		
		private void detach_SubstationAttributes(SubstationAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ResourcePlan = null;
		}
		
		private void attach_FileReferences(FileReference entity)
		{
			this.SendPropertyChanging();
			entity.ResourcePlan = this;
		}
		
		private void detach_FileReferences(FileReference entity)
		{
			this.SendPropertyChanging();
			entity.ResourcePlan = null;
		}
		
		private void attach_ResourceBundleAttributes(ResourceBundleAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ResourcePlan = this;
		}
		
		private void detach_ResourceBundleAttributes(ResourceBundleAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ResourcePlan = null;
		}
		
		private void attach_LoadAttributes(LoadAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ResourcePlan = this;
		}
		
		private void detach_LoadAttributes(LoadAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ResourcePlan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.FiscalYear")]
	public partial class FiscalYear : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Value;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<int> _UserCreatedId;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private System.Nullable<int> _Year;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnUserCreatedIdChanging(System.Nullable<int> value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnYearChanging(System.Nullable<int> value);
    partial void OnYearChanged();
    #endregion
		
		public FiscalYear()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int")]
		public System.Nullable<int> UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.OwnershipTypes")]
	public partial class OwnershipType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Value;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<int> _UserCreatedId;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private EntitySet<Substation> _Substations;
		
		private EntitySet<ResourceOptionAttribute> _ResourceOptionAttributes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnUserCreatedIdChanging(System.Nullable<int> value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    #endregion
		
		public OwnershipType()
		{
			this._Substations = new EntitySet<Substation>(new Action<Substation>(this.attach_Substations), new Action<Substation>(this.detach_Substations));
			this._ResourceOptionAttributes = new EntitySet<ResourceOptionAttribute>(new Action<ResourceOptionAttribute>(this.attach_ResourceOptionAttributes), new Action<ResourceOptionAttribute>(this.detach_ResourceOptionAttributes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int")]
		public System.Nullable<int> UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnershipType_Substation", Storage="_Substations", ThisKey="Id", OtherKey="OwnershipTypeId")]
		public EntitySet<Substation> Substations
		{
			get
			{
				return this._Substations;
			}
			set
			{
				this._Substations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnershipType_ResourceOptionAttribute", Storage="_ResourceOptionAttributes", ThisKey="Id", OtherKey="OwnershipId")]
		public EntitySet<ResourceOptionAttribute> ResourceOptionAttributes
		{
			get
			{
				return this._ResourceOptionAttributes;
			}
			set
			{
				this._ResourceOptionAttributes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Substations(Substation entity)
		{
			this.SendPropertyChanging();
			entity.OwnershipType = this;
		}
		
		private void detach_Substations(Substation entity)
		{
			this.SendPropertyChanging();
			entity.OwnershipType = null;
		}
		
		private void attach_ResourceOptionAttributes(ResourceOptionAttribute entity)
		{
			this.SendPropertyChanging();
			entity.OwnershipType = this;
		}
		
		private void detach_ResourceOptionAttributes(ResourceOptionAttribute entity)
		{
			this.SendPropertyChanging();
			entity.OwnershipType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="app.Notes")]
	public partial class Note : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _NotesLinkId;
		
		private string _DocumentUri;
		
		private string _Note1;
		
		private int _UserCreatedId;
		
		private System.DateTime _DatedCreated;
		
		private int _NotesTypeId;
		
		private System.Nullable<int> _FileReferenceId;
		
		private System.Nullable<bool> _IsDeleted;
		
		private EntitySet<LinkNote> _LinkNotes;
		
		private EntityRef<FileReference> _FileReference;
		
		private EntityRef<NotesType> _NotesType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNotesLinkIdChanging(System.Nullable<int> value);
    partial void OnNotesLinkIdChanged();
    partial void OnDocumentUriChanging(string value);
    partial void OnDocumentUriChanged();
    partial void OnNote1Changing(string value);
    partial void OnNote1Changed();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnDatedCreatedChanging(System.DateTime value);
    partial void OnDatedCreatedChanged();
    partial void OnNotesTypeIdChanging(int value);
    partial void OnNotesTypeIdChanged();
    partial void OnFileReferenceIdChanging(System.Nullable<int> value);
    partial void OnFileReferenceIdChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Note()
		{
			this._LinkNotes = new EntitySet<LinkNote>(new Action<LinkNote>(this.attach_LinkNotes), new Action<LinkNote>(this.detach_LinkNotes));
			this._FileReference = default(EntityRef<FileReference>);
			this._NotesType = default(EntityRef<NotesType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotesLinkId", DbType="Int")]
		public System.Nullable<int> NotesLinkId
		{
			get
			{
				return this._NotesLinkId;
			}
			set
			{
				if ((this._NotesLinkId != value))
				{
					this.OnNotesLinkIdChanging(value);
					this.SendPropertyChanging();
					this._NotesLinkId = value;
					this.SendPropertyChanged("NotesLinkId");
					this.OnNotesLinkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentUri", DbType="NVarChar(255)")]
		public string DocumentUri
		{
			get
			{
				return this._DocumentUri;
			}
			set
			{
				if ((this._DocumentUri != value))
				{
					this.OnDocumentUriChanging(value);
					this.SendPropertyChanging();
					this._DocumentUri = value;
					this.SendPropertyChanged("DocumentUri");
					this.OnDocumentUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Note", Storage="_Note1", DbType="NVarChar(MAX)")]
		public string Note1
		{
			get
			{
				return this._Note1;
			}
			set
			{
				if ((this._Note1 != value))
				{
					this.OnNote1Changing(value);
					this.SendPropertyChanging();
					this._Note1 = value;
					this.SendPropertyChanged("Note1");
					this.OnNote1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatedCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DatedCreated
		{
			get
			{
				return this._DatedCreated;
			}
			set
			{
				if ((this._DatedCreated != value))
				{
					this.OnDatedCreatedChanging(value);
					this.SendPropertyChanging();
					this._DatedCreated = value;
					this.SendPropertyChanged("DatedCreated");
					this.OnDatedCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotesTypeId", DbType="Int NOT NULL")]
		public int NotesTypeId
		{
			get
			{
				return this._NotesTypeId;
			}
			set
			{
				if ((this._NotesTypeId != value))
				{
					if (this._NotesType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNotesTypeIdChanging(value);
					this.SendPropertyChanging();
					this._NotesTypeId = value;
					this.SendPropertyChanged("NotesTypeId");
					this.OnNotesTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileReferenceId", DbType="Int")]
		public System.Nullable<int> FileReferenceId
		{
			get
			{
				return this._FileReferenceId;
			}
			set
			{
				if ((this._FileReferenceId != value))
				{
					if (this._FileReference.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileReferenceIdChanging(value);
					this.SendPropertyChanging();
					this._FileReferenceId = value;
					this.SendPropertyChanged("FileReferenceId");
					this.OnFileReferenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Note_LinkNote", Storage="_LinkNotes", ThisKey="Id", OtherKey="NoteId")]
		public EntitySet<LinkNote> LinkNotes
		{
			get
			{
				return this._LinkNotes;
			}
			set
			{
				this._LinkNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileReference_Note", Storage="_FileReference", ThisKey="FileReferenceId", OtherKey="Id", IsForeignKey=true)]
		public FileReference FileReference
		{
			get
			{
				return this._FileReference.Entity;
			}
			set
			{
				FileReference previousValue = this._FileReference.Entity;
				if (((previousValue != value) 
							|| (this._FileReference.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileReference.Entity = null;
						previousValue.Notes.Remove(this);
					}
					this._FileReference.Entity = value;
					if ((value != null))
					{
						value.Notes.Add(this);
						this._FileReferenceId = value.Id;
					}
					else
					{
						this._FileReferenceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("FileReference");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NotesType_Note", Storage="_NotesType", ThisKey="NotesTypeId", OtherKey="Id", IsForeignKey=true)]
		public NotesType NotesType
		{
			get
			{
				return this._NotesType.Entity;
			}
			set
			{
				NotesType previousValue = this._NotesType.Entity;
				if (((previousValue != value) 
							|| (this._NotesType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NotesType.Entity = null;
						previousValue.Notes.Remove(this);
					}
					this._NotesType.Entity = value;
					if ((value != null))
					{
						value.Notes.Add(this);
						this._NotesTypeId = value.Id;
					}
					else
					{
						this._NotesTypeId = default(int);
					}
					this.SendPropertyChanged("NotesType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.Note = this;
		}
		
		private void detach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.Note = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.ElectricityPurchaseAgreements")]
	public partial class ElectricityPurchaseAgreement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<int> _PowerCallId;
		
		private string _ContractManager;
		
		private System.Nullable<decimal> _EPACapacity;
		
		private System.Nullable<decimal> _MaxTakeOrPay;
		
		private string _OwnerName;
		
		private string _Description;
		
		private string _Code;
		
		private System.Nullable<System.DateTime> _EstimatedInServiceDate;
		
		private System.Nullable<System.DateTime> _ActualInServiceDate;
		
		private System.Nullable<System.DateTime> _EstimatedTerminationDate;
		
		private System.Nullable<System.DateTime> _ActualTerminationDate;
		
		private string _SecondaryContractManager;
		
		private int _EPAStatusId;
		
		private System.Nullable<decimal> _NitsDesignatedCapacity;
		
		private EntitySet<LinkElectricityPurchaseAgreementsSubstation> _LinkElectricityPurchaseAgreementsSubstations;
		
		private EntitySet<LinkNote> _LinkNotes;
		
		private EntityRef<EPAStatuse> _EPAStatuse;
		
		private EntityRef<PowerCall> _PowerCall;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnPowerCallIdChanging(System.Nullable<int> value);
    partial void OnPowerCallIdChanged();
    partial void OnContractManagerChanging(string value);
    partial void OnContractManagerChanged();
    partial void OnEPACapacityChanging(System.Nullable<decimal> value);
    partial void OnEPACapacityChanged();
    partial void OnMaxTakeOrPayChanging(System.Nullable<decimal> value);
    partial void OnMaxTakeOrPayChanged();
    partial void OnOwnerNameChanging(string value);
    partial void OnOwnerNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnEstimatedInServiceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEstimatedInServiceDateChanged();
    partial void OnActualInServiceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualInServiceDateChanged();
    partial void OnEstimatedTerminationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEstimatedTerminationDateChanged();
    partial void OnActualTerminationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualTerminationDateChanged();
    partial void OnSecondaryContractManagerChanging(string value);
    partial void OnSecondaryContractManagerChanged();
    partial void OnEPAStatusIdChanging(int value);
    partial void OnEPAStatusIdChanged();
    partial void OnNitsDesignatedCapacityChanging(System.Nullable<decimal> value);
    partial void OnNitsDesignatedCapacityChanged();
    #endregion
		
		public ElectricityPurchaseAgreement()
		{
			this._LinkElectricityPurchaseAgreementsSubstations = new EntitySet<LinkElectricityPurchaseAgreementsSubstation>(new Action<LinkElectricityPurchaseAgreementsSubstation>(this.attach_LinkElectricityPurchaseAgreementsSubstations), new Action<LinkElectricityPurchaseAgreementsSubstation>(this.detach_LinkElectricityPurchaseAgreementsSubstations));
			this._LinkNotes = new EntitySet<LinkNote>(new Action<LinkNote>(this.attach_LinkNotes), new Action<LinkNote>(this.detach_LinkNotes));
			this._EPAStatuse = default(EntityRef<EPAStatuse>);
			this._PowerCall = default(EntityRef<PowerCall>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PowerCallId", DbType="Int")]
		public System.Nullable<int> PowerCallId
		{
			get
			{
				return this._PowerCallId;
			}
			set
			{
				if ((this._PowerCallId != value))
				{
					if (this._PowerCall.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPowerCallIdChanging(value);
					this.SendPropertyChanging();
					this._PowerCallId = value;
					this.SendPropertyChanged("PowerCallId");
					this.OnPowerCallIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractManager", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ContractManager
		{
			get
			{
				return this._ContractManager;
			}
			set
			{
				if ((this._ContractManager != value))
				{
					this.OnContractManagerChanging(value);
					this.SendPropertyChanging();
					this._ContractManager = value;
					this.SendPropertyChanged("ContractManager");
					this.OnContractManagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EPACapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> EPACapacity
		{
			get
			{
				return this._EPACapacity;
			}
			set
			{
				if ((this._EPACapacity != value))
				{
					this.OnEPACapacityChanging(value);
					this.SendPropertyChanging();
					this._EPACapacity = value;
					this.SendPropertyChanged("EPACapacity");
					this.OnEPACapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxTakeOrPay", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> MaxTakeOrPay
		{
			get
			{
				return this._MaxTakeOrPay;
			}
			set
			{
				if ((this._MaxTakeOrPay != value))
				{
					this.OnMaxTakeOrPayChanging(value);
					this.SendPropertyChanging();
					this._MaxTakeOrPay = value;
					this.SendPropertyChanged("MaxTakeOrPay");
					this.OnMaxTakeOrPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerName", DbType="NVarChar(80)")]
		public string OwnerName
		{
			get
			{
				return this._OwnerName;
			}
			set
			{
				if ((this._OwnerName != value))
				{
					this.OnOwnerNameChanging(value);
					this.SendPropertyChanging();
					this._OwnerName = value;
					this.SendPropertyChanged("OwnerName");
					this.OnOwnerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedInServiceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EstimatedInServiceDate
		{
			get
			{
				return this._EstimatedInServiceDate;
			}
			set
			{
				if ((this._EstimatedInServiceDate != value))
				{
					this.OnEstimatedInServiceDateChanging(value);
					this.SendPropertyChanging();
					this._EstimatedInServiceDate = value;
					this.SendPropertyChanged("EstimatedInServiceDate");
					this.OnEstimatedInServiceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualInServiceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActualInServiceDate
		{
			get
			{
				return this._ActualInServiceDate;
			}
			set
			{
				if ((this._ActualInServiceDate != value))
				{
					this.OnActualInServiceDateChanging(value);
					this.SendPropertyChanging();
					this._ActualInServiceDate = value;
					this.SendPropertyChanged("ActualInServiceDate");
					this.OnActualInServiceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedTerminationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EstimatedTerminationDate
		{
			get
			{
				return this._EstimatedTerminationDate;
			}
			set
			{
				if ((this._EstimatedTerminationDate != value))
				{
					this.OnEstimatedTerminationDateChanging(value);
					this.SendPropertyChanging();
					this._EstimatedTerminationDate = value;
					this.SendPropertyChanged("EstimatedTerminationDate");
					this.OnEstimatedTerminationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualTerminationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActualTerminationDate
		{
			get
			{
				return this._ActualTerminationDate;
			}
			set
			{
				if ((this._ActualTerminationDate != value))
				{
					this.OnActualTerminationDateChanging(value);
					this.SendPropertyChanging();
					this._ActualTerminationDate = value;
					this.SendPropertyChanged("ActualTerminationDate");
					this.OnActualTerminationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondaryContractManager", DbType="NVarChar(100)")]
		public string SecondaryContractManager
		{
			get
			{
				return this._SecondaryContractManager;
			}
			set
			{
				if ((this._SecondaryContractManager != value))
				{
					this.OnSecondaryContractManagerChanging(value);
					this.SendPropertyChanging();
					this._SecondaryContractManager = value;
					this.SendPropertyChanged("SecondaryContractManager");
					this.OnSecondaryContractManagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EPAStatusId", DbType="Int NOT NULL")]
		public int EPAStatusId
		{
			get
			{
				return this._EPAStatusId;
			}
			set
			{
				if ((this._EPAStatusId != value))
				{
					if (this._EPAStatuse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEPAStatusIdChanging(value);
					this.SendPropertyChanging();
					this._EPAStatusId = value;
					this.SendPropertyChanged("EPAStatusId");
					this.OnEPAStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NitsDesignatedCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> NitsDesignatedCapacity
		{
			get
			{
				return this._NitsDesignatedCapacity;
			}
			set
			{
				if ((this._NitsDesignatedCapacity != value))
				{
					this.OnNitsDesignatedCapacityChanging(value);
					this.SendPropertyChanging();
					this._NitsDesignatedCapacity = value;
					this.SendPropertyChanged("NitsDesignatedCapacity");
					this.OnNitsDesignatedCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElectricityPurchaseAgreement_LinkElectricityPurchaseAgreementsSubstation", Storage="_LinkElectricityPurchaseAgreementsSubstations", ThisKey="Id", OtherKey="EPAId")]
		public EntitySet<LinkElectricityPurchaseAgreementsSubstation> LinkElectricityPurchaseAgreementsSubstations
		{
			get
			{
				return this._LinkElectricityPurchaseAgreementsSubstations;
			}
			set
			{
				this._LinkElectricityPurchaseAgreementsSubstations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElectricityPurchaseAgreement_LinkNote", Storage="_LinkNotes", ThisKey="Id", OtherKey="ElectricityPurchaseAgreementId")]
		public EntitySet<LinkNote> LinkNotes
		{
			get
			{
				return this._LinkNotes;
			}
			set
			{
				this._LinkNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EPAStatuse_ElectricityPurchaseAgreement", Storage="_EPAStatuse", ThisKey="EPAStatusId", OtherKey="ID", IsForeignKey=true)]
		public EPAStatuse EPAStatuse
		{
			get
			{
				return this._EPAStatuse.Entity;
			}
			set
			{
				EPAStatuse previousValue = this._EPAStatuse.Entity;
				if (((previousValue != value) 
							|| (this._EPAStatuse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EPAStatuse.Entity = null;
						previousValue.ElectricityPurchaseAgreements.Remove(this);
					}
					this._EPAStatuse.Entity = value;
					if ((value != null))
					{
						value.ElectricityPurchaseAgreements.Add(this);
						this._EPAStatusId = value.ID;
					}
					else
					{
						this._EPAStatusId = default(int);
					}
					this.SendPropertyChanged("EPAStatuse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerCall_ElectricityPurchaseAgreement", Storage="_PowerCall", ThisKey="PowerCallId", OtherKey="Id", IsForeignKey=true)]
		public PowerCall PowerCall
		{
			get
			{
				return this._PowerCall.Entity;
			}
			set
			{
				PowerCall previousValue = this._PowerCall.Entity;
				if (((previousValue != value) 
							|| (this._PowerCall.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PowerCall.Entity = null;
						previousValue.ElectricityPurchaseAgreements.Remove(this);
					}
					this._PowerCall.Entity = value;
					if ((value != null))
					{
						value.ElectricityPurchaseAgreements.Add(this);
						this._PowerCallId = value.Id;
					}
					else
					{
						this._PowerCallId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PowerCall");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LinkElectricityPurchaseAgreementsSubstations(LinkElectricityPurchaseAgreementsSubstation entity)
		{
			this.SendPropertyChanging();
			entity.ElectricityPurchaseAgreement = this;
		}
		
		private void detach_LinkElectricityPurchaseAgreementsSubstations(LinkElectricityPurchaseAgreementsSubstation entity)
		{
			this.SendPropertyChanging();
			entity.ElectricityPurchaseAgreement = null;
		}
		
		private void attach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.ElectricityPurchaseAgreement = this;
		}
		
		private void detach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.ElectricityPurchaseAgreement = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="app.Batches")]
	public partial class Batch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _BatchTypeId;
		
		private string _FileUri;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private string _FileName;
		
		private System.DateTime _BatchStartTime;
		
		private System.Nullable<System.DateTime> _BatchEndTime;
		
		private EntityRef<EpicUser> _EpicUser;
		
		private EntityRef<EpicUser> _EpicUser1;
		
		private EntityRef<BatchType> _BatchType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBatchTypeIdChanging(int value);
    partial void OnBatchTypeIdChanged();
    partial void OnFileUriChanging(string value);
    partial void OnFileUriChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnBatchStartTimeChanging(System.DateTime value);
    partial void OnBatchStartTimeChanged();
    partial void OnBatchEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnBatchEndTimeChanged();
    #endregion
		
		public Batch()
		{
			this._EpicUser = default(EntityRef<EpicUser>);
			this._EpicUser1 = default(EntityRef<EpicUser>);
			this._BatchType = default(EntityRef<BatchType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatchTypeId", DbType="Int NOT NULL")]
		public int BatchTypeId
		{
			get
			{
				return this._BatchTypeId;
			}
			set
			{
				if ((this._BatchTypeId != value))
				{
					if (this._BatchType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBatchTypeIdChanging(value);
					this.SendPropertyChanging();
					this._BatchTypeId = value;
					this.SendPropertyChanged("BatchTypeId");
					this.OnBatchTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileUri", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FileUri
		{
			get
			{
				return this._FileUri;
			}
			set
			{
				if ((this._FileUri != value))
				{
					this.OnFileUriChanging(value);
					this.SendPropertyChanging();
					this._FileUri = value;
					this.SendPropertyChanged("FileUri");
					this.OnFileUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					if (this._EpicUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					if (this._EpicUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatchStartTime", DbType="DateTime NOT NULL")]
		public System.DateTime BatchStartTime
		{
			get
			{
				return this._BatchStartTime;
			}
			set
			{
				if ((this._BatchStartTime != value))
				{
					this.OnBatchStartTimeChanging(value);
					this.SendPropertyChanging();
					this._BatchStartTime = value;
					this.SendPropertyChanged("BatchStartTime");
					this.OnBatchStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatchEndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> BatchEndTime
		{
			get
			{
				return this._BatchEndTime;
			}
			set
			{
				if ((this._BatchEndTime != value))
				{
					this.OnBatchEndTimeChanging(value);
					this.SendPropertyChanging();
					this._BatchEndTime = value;
					this.SendPropertyChanged("BatchEndTime");
					this.OnBatchEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EpicUser_Batch", Storage="_EpicUser", ThisKey="UserCreatedId", OtherKey="Id", IsForeignKey=true)]
		public EpicUser EpicUser
		{
			get
			{
				return this._EpicUser.Entity;
			}
			set
			{
				EpicUser previousValue = this._EpicUser.Entity;
				if (((previousValue != value) 
							|| (this._EpicUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EpicUser.Entity = null;
						previousValue.Batches.Remove(this);
					}
					this._EpicUser.Entity = value;
					if ((value != null))
					{
						value.Batches.Add(this);
						this._UserCreatedId = value.Id;
					}
					else
					{
						this._UserCreatedId = default(int);
					}
					this.SendPropertyChanged("EpicUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EpicUser_Batch1", Storage="_EpicUser1", ThisKey="UserUpdatedId", OtherKey="Id", IsForeignKey=true)]
		public EpicUser EpicUser1
		{
			get
			{
				return this._EpicUser1.Entity;
			}
			set
			{
				EpicUser previousValue = this._EpicUser1.Entity;
				if (((previousValue != value) 
							|| (this._EpicUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EpicUser1.Entity = null;
						previousValue.Batches1.Remove(this);
					}
					this._EpicUser1.Entity = value;
					if ((value != null))
					{
						value.Batches1.Add(this);
						this._UserUpdatedId = value.Id;
					}
					else
					{
						this._UserUpdatedId = default(Nullable<int>);
					}
					this.SendPropertyChanged("EpicUser1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BatchType_Batch", Storage="_BatchType", ThisKey="BatchTypeId", OtherKey="Id", IsForeignKey=true)]
		public BatchType BatchType
		{
			get
			{
				return this._BatchType.Entity;
			}
			set
			{
				BatchType previousValue = this._BatchType.Entity;
				if (((previousValue != value) 
							|| (this._BatchType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BatchType.Entity = null;
						previousValue.Batches.Remove(this);
					}
					this._BatchType.Entity = value;
					if ((value != null))
					{
						value.Batches.Add(this);
						this._BatchTypeId = value.Id;
					}
					else
					{
						this._BatchTypeId = default(int);
					}
					this.SendPropertyChanged("BatchType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.BatchTypes")]
	public partial class BatchType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private EntitySet<Batch> _Batches;
		
		private EntityRef<EpicUser> _EpicUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    #endregion
		
		public BatchType()
		{
			this._Batches = new EntitySet<Batch>(new Action<Batch>(this.attach_Batches), new Action<Batch>(this.detach_Batches));
			this._EpicUser = default(EntityRef<EpicUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					if (this._EpicUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BatchType_Batch", Storage="_Batches", ThisKey="Id", OtherKey="BatchTypeId")]
		public EntitySet<Batch> Batches
		{
			get
			{
				return this._Batches;
			}
			set
			{
				this._Batches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EpicUser_BatchType", Storage="_EpicUser", ThisKey="UserCreatedId", OtherKey="Id", IsForeignKey=true)]
		public EpicUser EpicUser
		{
			get
			{
				return this._EpicUser.Entity;
			}
			set
			{
				EpicUser previousValue = this._EpicUser.Entity;
				if (((previousValue != value) 
							|| (this._EpicUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EpicUser.Entity = null;
						previousValue.BatchTypes.Remove(this);
					}
					this._EpicUser.Entity = value;
					if ((value != null))
					{
						value.BatchTypes.Add(this);
						this._UserCreatedId = value.Id;
					}
					else
					{
						this._UserCreatedId = default(int);
					}
					this.SendPropertyChanged("EpicUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Batches(Batch entity)
		{
			this.SendPropertyChanging();
			entity.BatchType = this;
		}
		
		private void detach_Batches(Batch entity)
		{
			this.SendPropertyChanging();
			entity.BatchType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.SubstationTypes")]
	public partial class SubstationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Value;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<int> _UserCreatedId;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private EntitySet<Substation> _Substations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnUserCreatedIdChanging(System.Nullable<int> value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    #endregion
		
		public SubstationType()
		{
			this._Substations = new EntitySet<Substation>(new Action<Substation>(this.attach_Substations), new Action<Substation>(this.detach_Substations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int")]
		public System.Nullable<int> UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubstationType_Substation", Storage="_Substations", ThisKey="Id", OtherKey="SubStationTypeId")]
		public EntitySet<Substation> Substations
		{
			get
			{
				return this._Substations;
			}
			set
			{
				this._Substations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Substations(Substation entity)
		{
			this.SendPropertyChanging();
			entity.SubstationType = this;
		}
		
		private void detach_Substations(Substation entity)
		{
			this.SendPropertyChanging();
			entity.SubstationType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.FuelTypes")]
	public partial class FuelType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Classification;
		
		private string _FuelClass;
		
		private string _FuelSubType;
		
		private string _Value;
		
		private bool _IsNonIntermittent;
		
		private string _Description;
		
		private int _UserCreatedId;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateEnd;
		
		private System.Nullable<System.DateTime> _DateReplaced;
		
		private System.Nullable<System.DateTime> _DateEffective;
		
		private System.Nullable<int> _OriginalId;
		
		private EntitySet<GeneratingUnit> _GeneratingUnits;
		
		private EntitySet<Substation> _Substations;
		
		private EntitySet<ResourceBundle> _ResourceBundles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnClassificationChanging(string value);
    partial void OnClassificationChanged();
    partial void OnFuelClassChanging(string value);
    partial void OnFuelClassChanged();
    partial void OnFuelSubTypeChanging(string value);
    partial void OnFuelSubTypeChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnIsNonIntermittentChanging(bool value);
    partial void OnIsNonIntermittentChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateEndChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEndChanged();
    partial void OnDateReplacedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateReplacedChanged();
    partial void OnDateEffectiveChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEffectiveChanged();
    partial void OnOriginalIdChanging(System.Nullable<int> value);
    partial void OnOriginalIdChanged();
    #endregion
		
		public FuelType()
		{
			this._GeneratingUnits = new EntitySet<GeneratingUnit>(new Action<GeneratingUnit>(this.attach_GeneratingUnits), new Action<GeneratingUnit>(this.detach_GeneratingUnits));
			this._Substations = new EntitySet<Substation>(new Action<Substation>(this.attach_Substations), new Action<Substation>(this.detach_Substations));
			this._ResourceBundles = new EntitySet<ResourceBundle>(new Action<ResourceBundle>(this.attach_ResourceBundles), new Action<ResourceBundle>(this.detach_ResourceBundles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Classification", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Classification
		{
			get
			{
				return this._Classification;
			}
			set
			{
				if ((this._Classification != value))
				{
					this.OnClassificationChanging(value);
					this.SendPropertyChanging();
					this._Classification = value;
					this.SendPropertyChanged("Classification");
					this.OnClassificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelClass", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FuelClass
		{
			get
			{
				return this._FuelClass;
			}
			set
			{
				if ((this._FuelClass != value))
				{
					this.OnFuelClassChanging(value);
					this.SendPropertyChanging();
					this._FuelClass = value;
					this.SendPropertyChanged("FuelClass");
					this.OnFuelClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelSubType", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FuelSubType
		{
			get
			{
				return this._FuelSubType;
			}
			set
			{
				if ((this._FuelSubType != value))
				{
					this.OnFuelSubTypeChanging(value);
					this.SendPropertyChanging();
					this._FuelSubType = value;
					this.SendPropertyChanged("FuelSubType");
					this.OnFuelSubTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNonIntermittent", DbType="Bit NOT NULL")]
		public bool IsNonIntermittent
		{
			get
			{
				return this._IsNonIntermittent;
			}
			set
			{
				if ((this._IsNonIntermittent != value))
				{
					this.OnIsNonIntermittentChanging(value);
					this.SendPropertyChanging();
					this._IsNonIntermittent = value;
					this.SendPropertyChanged("IsNonIntermittent");
					this.OnIsNonIntermittentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this.OnDateEndChanging(value);
					this.SendPropertyChanging();
					this._DateEnd = value;
					this.SendPropertyChanged("DateEnd");
					this.OnDateEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateReplaced", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateReplaced
		{
			get
			{
				return this._DateReplaced;
			}
			set
			{
				if ((this._DateReplaced != value))
				{
					this.OnDateReplacedChanging(value);
					this.SendPropertyChanging();
					this._DateReplaced = value;
					this.SendPropertyChanged("DateReplaced");
					this.OnDateReplacedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEffective", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateEffective
		{
			get
			{
				return this._DateEffective;
			}
			set
			{
				if ((this._DateEffective != value))
				{
					this.OnDateEffectiveChanging(value);
					this.SendPropertyChanging();
					this._DateEffective = value;
					this.SendPropertyChanged("DateEffective");
					this.OnDateEffectiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalId", DbType="Int")]
		public System.Nullable<int> OriginalId
		{
			get
			{
				return this._OriginalId;
			}
			set
			{
				if ((this._OriginalId != value))
				{
					this.OnOriginalIdChanging(value);
					this.SendPropertyChanging();
					this._OriginalId = value;
					this.SendPropertyChanged("OriginalId");
					this.OnOriginalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FuelType_GeneratingUnit", Storage="_GeneratingUnits", ThisKey="Id", OtherKey="EnergySourceId")]
		public EntitySet<GeneratingUnit> GeneratingUnits
		{
			get
			{
				return this._GeneratingUnits;
			}
			set
			{
				this._GeneratingUnits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FuelType_Substation", Storage="_Substations", ThisKey="Id", OtherKey="FuelTypeId")]
		public EntitySet<Substation> Substations
		{
			get
			{
				return this._Substations;
			}
			set
			{
				this._Substations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FuelType_ResourceBundle", Storage="_ResourceBundles", ThisKey="Id", OtherKey="FuelTypeId")]
		public EntitySet<ResourceBundle> ResourceBundles
		{
			get
			{
				return this._ResourceBundles;
			}
			set
			{
				this._ResourceBundles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GeneratingUnits(GeneratingUnit entity)
		{
			this.SendPropertyChanging();
			entity.FuelType = this;
		}
		
		private void detach_GeneratingUnits(GeneratingUnit entity)
		{
			this.SendPropertyChanging();
			entity.FuelType = null;
		}
		
		private void attach_Substations(Substation entity)
		{
			this.SendPropertyChanging();
			entity.FuelType = this;
		}
		
		private void detach_Substations(Substation entity)
		{
			this.SendPropertyChanging();
			entity.FuelType = null;
		}
		
		private void attach_ResourceBundles(ResourceBundle entity)
		{
			this.SendPropertyChanging();
			entity.FuelType = this;
		}
		
		private void detach_ResourceBundles(ResourceBundle entity)
		{
			this.SendPropertyChanging();
			entity.FuelType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.ElectricalGroups")]
	public partial class ElectricalGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<int> _ParentPk;
		
		private string _Name;
		
		private string _Abbreviation;
		
		private EntitySet<LinkElectricalGroupToLTAPSubRegion> _LinkElectricalGroupToLTAPSubRegions;
		
		private EntitySet<Substation> _Substations;
		
		private EntitySet<Map> _Maps;
		
		private EntitySet<LinkResourceBundleElectricalGroup> _LinkResourceBundleElectricalGroups;
		
		private EntitySet<ResourceBundle> _ResourceBundles;
		
		private EntitySet<LinkSubstationElectricalGroup> _LinkSubstationElectricalGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnParentPkChanging(System.Nullable<int> value);
    partial void OnParentPkChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    #endregion
		
		public ElectricalGroup()
		{
			this._LinkElectricalGroupToLTAPSubRegions = new EntitySet<LinkElectricalGroupToLTAPSubRegion>(new Action<LinkElectricalGroupToLTAPSubRegion>(this.attach_LinkElectricalGroupToLTAPSubRegions), new Action<LinkElectricalGroupToLTAPSubRegion>(this.detach_LinkElectricalGroupToLTAPSubRegions));
			this._Substations = new EntitySet<Substation>(new Action<Substation>(this.attach_Substations), new Action<Substation>(this.detach_Substations));
			this._Maps = new EntitySet<Map>(new Action<Map>(this.attach_Maps), new Action<Map>(this.detach_Maps));
			this._LinkResourceBundleElectricalGroups = new EntitySet<LinkResourceBundleElectricalGroup>(new Action<LinkResourceBundleElectricalGroup>(this.attach_LinkResourceBundleElectricalGroups), new Action<LinkResourceBundleElectricalGroup>(this.detach_LinkResourceBundleElectricalGroups));
			this._ResourceBundles = new EntitySet<ResourceBundle>(new Action<ResourceBundle>(this.attach_ResourceBundles), new Action<ResourceBundle>(this.detach_ResourceBundles));
			this._LinkSubstationElectricalGroups = new EntitySet<LinkSubstationElectricalGroup>(new Action<LinkSubstationElectricalGroup>(this.attach_LinkSubstationElectricalGroups), new Action<LinkSubstationElectricalGroup>(this.detach_LinkSubstationElectricalGroups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentPk", DbType="Int")]
		public System.Nullable<int> ParentPk
		{
			get
			{
				return this._ParentPk;
			}
			set
			{
				if ((this._ParentPk != value))
				{
					this.OnParentPkChanging(value);
					this.SendPropertyChanging();
					this._ParentPk = value;
					this.SendPropertyChanged("ParentPk");
					this.OnParentPkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abbreviation", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Abbreviation
		{
			get
			{
				return this._Abbreviation;
			}
			set
			{
				if ((this._Abbreviation != value))
				{
					this.OnAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._Abbreviation = value;
					this.SendPropertyChanged("Abbreviation");
					this.OnAbbreviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElectricalGroup_LinkElectricalGroupToLTAPSubRegion", Storage="_LinkElectricalGroupToLTAPSubRegions", ThisKey="Id", OtherKey="ElectricalGroupId")]
		public EntitySet<LinkElectricalGroupToLTAPSubRegion> LinkElectricalGroupToLTAPSubRegions
		{
			get
			{
				return this._LinkElectricalGroupToLTAPSubRegions;
			}
			set
			{
				this._LinkElectricalGroupToLTAPSubRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElectricalGroup_Substation", Storage="_Substations", ThisKey="Id", OtherKey="ElectricalGroupId")]
		public EntitySet<Substation> Substations
		{
			get
			{
				return this._Substations;
			}
			set
			{
				this._Substations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElectricalGroup_Map", Storage="_Maps", ThisKey="Id", OtherKey="MapDefinitionRootId")]
		public EntitySet<Map> Maps
		{
			get
			{
				return this._Maps;
			}
			set
			{
				this._Maps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElectricalGroup_LinkResourceBundleElectricalGroup", Storage="_LinkResourceBundleElectricalGroups", ThisKey="Id", OtherKey="ElectricalGroupId")]
		public EntitySet<LinkResourceBundleElectricalGroup> LinkResourceBundleElectricalGroups
		{
			get
			{
				return this._LinkResourceBundleElectricalGroups;
			}
			set
			{
				this._LinkResourceBundleElectricalGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElectricalGroup_ResourceBundle", Storage="_ResourceBundles", ThisKey="Id", OtherKey="ElectricalGroupId")]
		public EntitySet<ResourceBundle> ResourceBundles
		{
			get
			{
				return this._ResourceBundles;
			}
			set
			{
				this._ResourceBundles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElectricalGroup_LinkSubstationElectricalGroup", Storage="_LinkSubstationElectricalGroups", ThisKey="Id", OtherKey="ElectricalGroupId")]
		public EntitySet<LinkSubstationElectricalGroup> LinkSubstationElectricalGroups
		{
			get
			{
				return this._LinkSubstationElectricalGroups;
			}
			set
			{
				this._LinkSubstationElectricalGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LinkElectricalGroupToLTAPSubRegions(LinkElectricalGroupToLTAPSubRegion entity)
		{
			this.SendPropertyChanging();
			entity.ElectricalGroup = this;
		}
		
		private void detach_LinkElectricalGroupToLTAPSubRegions(LinkElectricalGroupToLTAPSubRegion entity)
		{
			this.SendPropertyChanging();
			entity.ElectricalGroup = null;
		}
		
		private void attach_Substations(Substation entity)
		{
			this.SendPropertyChanging();
			entity.ElectricalGroup = this;
		}
		
		private void detach_Substations(Substation entity)
		{
			this.SendPropertyChanging();
			entity.ElectricalGroup = null;
		}
		
		private void attach_Maps(Map entity)
		{
			this.SendPropertyChanging();
			entity.ElectricalGroup = this;
		}
		
		private void detach_Maps(Map entity)
		{
			this.SendPropertyChanging();
			entity.ElectricalGroup = null;
		}
		
		private void attach_LinkResourceBundleElectricalGroups(LinkResourceBundleElectricalGroup entity)
		{
			this.SendPropertyChanging();
			entity.ElectricalGroup = this;
		}
		
		private void detach_LinkResourceBundleElectricalGroups(LinkResourceBundleElectricalGroup entity)
		{
			this.SendPropertyChanging();
			entity.ElectricalGroup = null;
		}
		
		private void attach_ResourceBundles(ResourceBundle entity)
		{
			this.SendPropertyChanging();
			entity.ElectricalGroup = this;
		}
		
		private void detach_ResourceBundles(ResourceBundle entity)
		{
			this.SendPropertyChanging();
			entity.ElectricalGroup = null;
		}
		
		private void attach_LinkSubstationElectricalGroups(LinkSubstationElectricalGroup entity)
		{
			this.SendPropertyChanging();
			entity.ElectricalGroup = this;
		}
		
		private void detach_LinkSubstationElectricalGroups(LinkSubstationElectricalGroup entity)
		{
			this.SendPropertyChanging();
			entity.ElectricalGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="link.LinkElectricalGroupToLTAPSubRegion")]
	public partial class LinkElectricalGroupToLTAPSubRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _LTAPSubRegionId;
		
		private int _ElectricalGroupId;
		
		private EntityRef<ElectricalGroup> _ElectricalGroup;
		
		private EntityRef<LTAPSubRegion> _LTAPSubRegion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLTAPSubRegionIdChanging(int value);
    partial void OnLTAPSubRegionIdChanged();
    partial void OnElectricalGroupIdChanging(int value);
    partial void OnElectricalGroupIdChanged();
    #endregion
		
		public LinkElectricalGroupToLTAPSubRegion()
		{
			this._ElectricalGroup = default(EntityRef<ElectricalGroup>);
			this._LTAPSubRegion = default(EntityRef<LTAPSubRegion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LTAPSubRegionId", DbType="Int NOT NULL")]
		public int LTAPSubRegionId
		{
			get
			{
				return this._LTAPSubRegionId;
			}
			set
			{
				if ((this._LTAPSubRegionId != value))
				{
					if (this._LTAPSubRegion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLTAPSubRegionIdChanging(value);
					this.SendPropertyChanging();
					this._LTAPSubRegionId = value;
					this.SendPropertyChanged("LTAPSubRegionId");
					this.OnLTAPSubRegionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectricalGroupId", DbType="Int NOT NULL")]
		public int ElectricalGroupId
		{
			get
			{
				return this._ElectricalGroupId;
			}
			set
			{
				if ((this._ElectricalGroupId != value))
				{
					if (this._ElectricalGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnElectricalGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ElectricalGroupId = value;
					this.SendPropertyChanged("ElectricalGroupId");
					this.OnElectricalGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElectricalGroup_LinkElectricalGroupToLTAPSubRegion", Storage="_ElectricalGroup", ThisKey="ElectricalGroupId", OtherKey="Id", IsForeignKey=true)]
		public ElectricalGroup ElectricalGroup
		{
			get
			{
				return this._ElectricalGroup.Entity;
			}
			set
			{
				ElectricalGroup previousValue = this._ElectricalGroup.Entity;
				if (((previousValue != value) 
							|| (this._ElectricalGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ElectricalGroup.Entity = null;
						previousValue.LinkElectricalGroupToLTAPSubRegions.Remove(this);
					}
					this._ElectricalGroup.Entity = value;
					if ((value != null))
					{
						value.LinkElectricalGroupToLTAPSubRegions.Add(this);
						this._ElectricalGroupId = value.Id;
					}
					else
					{
						this._ElectricalGroupId = default(int);
					}
					this.SendPropertyChanged("ElectricalGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LTAPSubRegion_LinkElectricalGroupToLTAPSubRegion", Storage="_LTAPSubRegion", ThisKey="LTAPSubRegionId", OtherKey="Id", IsForeignKey=true)]
		public LTAPSubRegion LTAPSubRegion
		{
			get
			{
				return this._LTAPSubRegion.Entity;
			}
			set
			{
				LTAPSubRegion previousValue = this._LTAPSubRegion.Entity;
				if (((previousValue != value) 
							|| (this._LTAPSubRegion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LTAPSubRegion.Entity = null;
						previousValue.LinkElectricalGroupToLTAPSubRegions.Remove(this);
					}
					this._LTAPSubRegion.Entity = value;
					if ((value != null))
					{
						value.LinkElectricalGroupToLTAPSubRegions.Add(this);
						this._LTAPSubRegionId = value.Id;
					}
					else
					{
						this._LTAPSubRegionId = default(int);
					}
					this.SendPropertyChanged("LTAPSubRegion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.LTAPSubRegion")]
	public partial class LTAPSubRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Abbreviation;
		
		private string _Description;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private EntitySet<LinkElectricalGroupToLTAPSubRegion> _LinkElectricalGroupToLTAPSubRegions;
		
		private EntitySet<Substation> _Substations;
		
		private EntitySet<ResourceBundle> _ResourceBundles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    #endregion
		
		public LTAPSubRegion()
		{
			this._LinkElectricalGroupToLTAPSubRegions = new EntitySet<LinkElectricalGroupToLTAPSubRegion>(new Action<LinkElectricalGroupToLTAPSubRegion>(this.attach_LinkElectricalGroupToLTAPSubRegions), new Action<LinkElectricalGroupToLTAPSubRegion>(this.detach_LinkElectricalGroupToLTAPSubRegions));
			this._Substations = new EntitySet<Substation>(new Action<Substation>(this.attach_Substations), new Action<Substation>(this.detach_Substations));
			this._ResourceBundles = new EntitySet<ResourceBundle>(new Action<ResourceBundle>(this.attach_ResourceBundles), new Action<ResourceBundle>(this.detach_ResourceBundles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abbreviation", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Abbreviation
		{
			get
			{
				return this._Abbreviation;
			}
			set
			{
				if ((this._Abbreviation != value))
				{
					this.OnAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._Abbreviation = value;
					this.SendPropertyChanged("Abbreviation");
					this.OnAbbreviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LTAPSubRegion_LinkElectricalGroupToLTAPSubRegion", Storage="_LinkElectricalGroupToLTAPSubRegions", ThisKey="Id", OtherKey="LTAPSubRegionId")]
		public EntitySet<LinkElectricalGroupToLTAPSubRegion> LinkElectricalGroupToLTAPSubRegions
		{
			get
			{
				return this._LinkElectricalGroupToLTAPSubRegions;
			}
			set
			{
				this._LinkElectricalGroupToLTAPSubRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LTAPSubRegion_Substation", Storage="_Substations", ThisKey="Id", OtherKey="LTAPSubRegionId")]
		public EntitySet<Substation> Substations
		{
			get
			{
				return this._Substations;
			}
			set
			{
				this._Substations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LTAPSubRegion_ResourceBundle", Storage="_ResourceBundles", ThisKey="Id", OtherKey="LTAPSubRegionId")]
		public EntitySet<ResourceBundle> ResourceBundles
		{
			get
			{
				return this._ResourceBundles;
			}
			set
			{
				this._ResourceBundles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LinkElectricalGroupToLTAPSubRegions(LinkElectricalGroupToLTAPSubRegion entity)
		{
			this.SendPropertyChanging();
			entity.LTAPSubRegion = this;
		}
		
		private void detach_LinkElectricalGroupToLTAPSubRegions(LinkElectricalGroupToLTAPSubRegion entity)
		{
			this.SendPropertyChanging();
			entity.LTAPSubRegion = null;
		}
		
		private void attach_Substations(Substation entity)
		{
			this.SendPropertyChanging();
			entity.LTAPSubRegion = this;
		}
		
		private void detach_Substations(Substation entity)
		{
			this.SendPropertyChanging();
			entity.LTAPSubRegion = null;
		}
		
		private void attach_ResourceBundles(ResourceBundle entity)
		{
			this.SendPropertyChanging();
			entity.LTAPSubRegion = this;
		}
		
		private void detach_ResourceBundles(ResourceBundle entity)
		{
			this.SendPropertyChanging();
			entity.LTAPSubRegion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.Substations")]
	public partial class Substation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<int> _GeoLocationId;
		
		private string _Description;
		
		private string _SingleLineDiagramUri;
		
		private string _LocalOperationOrderLink;
		
		private System.Nullable<int> _MeterId;
		
		private System.Nullable<int> _ElectricalGroupId;
		
		private System.Nullable<decimal> _Latitude;
		
		private System.Nullable<decimal> _Longitude;
		
		private System.Nullable<int> _PowerCallId;
		
		private System.Nullable<bool> _IsSynchronousCondenserCapable;
		
		private System.Nullable<System.DateTime> _CIMLoadTS;
		
		private System.Nullable<System.DateTime> _LRBLoadTS;
		
		private System.Nullable<System.DateTime> _FacilityLoadTS;
		
		private System.Nullable<System.DateTime> _NITSPlanLoadTS;
		
		private System.Nullable<int> _SubStationTypeId;
		
		private System.Nullable<int> _FuelTypeId;
		
		private System.Nullable<int> _OwnershipTypeId;
		
		private System.Nullable<int> _LTAPSubRegionId;
		
		private System.Nullable<int> _ResourceStatusId;
		
		private string _PrimaryPoi;
		
		private string _SecondaryPoi;
		
		private string _PoiCircuitDesignation;
		
		private System.Nullable<decimal> _PoiVoltage;
		
		private EntitySet<VoltageLevel> _VoltageLevels;
		
		private EntitySet<Name> _Names;
		
		private EntitySet<LinkElectricityPurchaseAgreementsSubstation> _LinkElectricityPurchaseAgreementsSubstations;
		
		private EntitySet<SubstationAttribute> _SubstationAttributes;
		
		private EntitySet<LinkTsrSubstation> _LinkTsrSubstations;
		
		private EntitySet<LinkSubstationElectricalGroup> _LinkSubstationElectricalGroups;
		
		private EntitySet<TransmissionVoltageCustomer> _TransmissionVoltageCustomers;
		
		private EntitySet<LinkNote> _LinkNotes;
		
		private EntityRef<ElectricalGroup> _ElectricalGroup;
		
		private EntityRef<FuelType> _FuelType;
		
		private EntityRef<LTAPSubRegion> _LTAPSubRegion;
		
		private EntityRef<OwnershipType> _OwnershipType;
		
		private EntityRef<SubstationType> _SubstationType;
		
		private EntityRef<Meter> _Meter;
		
		private EntityRef<PowerCall> _PowerCall;
		
		private EntityRef<ResourceStatuse> _ResourceStatuse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnGeoLocationIdChanging(System.Nullable<int> value);
    partial void OnGeoLocationIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSingleLineDiagramUriChanging(string value);
    partial void OnSingleLineDiagramUriChanged();
    partial void OnLocalOperationOrderLinkChanging(string value);
    partial void OnLocalOperationOrderLinkChanged();
    partial void OnMeterIdChanging(System.Nullable<int> value);
    partial void OnMeterIdChanged();
    partial void OnElectricalGroupIdChanging(System.Nullable<int> value);
    partial void OnElectricalGroupIdChanged();
    partial void OnLatitudeChanging(System.Nullable<decimal> value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(System.Nullable<decimal> value);
    partial void OnLongitudeChanged();
    partial void OnPowerCallIdChanging(System.Nullable<int> value);
    partial void OnPowerCallIdChanged();
    partial void OnIsSynchronousCondenserCapableChanging(System.Nullable<bool> value);
    partial void OnIsSynchronousCondenserCapableChanged();
    partial void OnCIMLoadTSChanging(System.Nullable<System.DateTime> value);
    partial void OnCIMLoadTSChanged();
    partial void OnLRBLoadTSChanging(System.Nullable<System.DateTime> value);
    partial void OnLRBLoadTSChanged();
    partial void OnFacilityLoadTSChanging(System.Nullable<System.DateTime> value);
    partial void OnFacilityLoadTSChanged();
    partial void OnNITSPlanLoadTSChanging(System.Nullable<System.DateTime> value);
    partial void OnNITSPlanLoadTSChanged();
    partial void OnSubStationTypeIdChanging(System.Nullable<int> value);
    partial void OnSubStationTypeIdChanged();
    partial void OnFuelTypeIdChanging(System.Nullable<int> value);
    partial void OnFuelTypeIdChanged();
    partial void OnOwnershipTypeIdChanging(System.Nullable<int> value);
    partial void OnOwnershipTypeIdChanged();
    partial void OnLTAPSubRegionIdChanging(System.Nullable<int> value);
    partial void OnLTAPSubRegionIdChanged();
    partial void OnResourceStatusIdChanging(System.Nullable<int> value);
    partial void OnResourceStatusIdChanged();
    partial void OnPrimaryPoiChanging(string value);
    partial void OnPrimaryPoiChanged();
    partial void OnSecondaryPoiChanging(string value);
    partial void OnSecondaryPoiChanged();
    partial void OnPoiCircuitDesignationChanging(string value);
    partial void OnPoiCircuitDesignationChanged();
    partial void OnPoiVoltageChanging(System.Nullable<decimal> value);
    partial void OnPoiVoltageChanged();
    #endregion
		
		public Substation()
		{
			this._VoltageLevels = new EntitySet<VoltageLevel>(new Action<VoltageLevel>(this.attach_VoltageLevels), new Action<VoltageLevel>(this.detach_VoltageLevels));
			this._Names = new EntitySet<Name>(new Action<Name>(this.attach_Names), new Action<Name>(this.detach_Names));
			this._LinkElectricityPurchaseAgreementsSubstations = new EntitySet<LinkElectricityPurchaseAgreementsSubstation>(new Action<LinkElectricityPurchaseAgreementsSubstation>(this.attach_LinkElectricityPurchaseAgreementsSubstations), new Action<LinkElectricityPurchaseAgreementsSubstation>(this.detach_LinkElectricityPurchaseAgreementsSubstations));
			this._SubstationAttributes = new EntitySet<SubstationAttribute>(new Action<SubstationAttribute>(this.attach_SubstationAttributes), new Action<SubstationAttribute>(this.detach_SubstationAttributes));
			this._LinkTsrSubstations = new EntitySet<LinkTsrSubstation>(new Action<LinkTsrSubstation>(this.attach_LinkTsrSubstations), new Action<LinkTsrSubstation>(this.detach_LinkTsrSubstations));
			this._LinkSubstationElectricalGroups = new EntitySet<LinkSubstationElectricalGroup>(new Action<LinkSubstationElectricalGroup>(this.attach_LinkSubstationElectricalGroups), new Action<LinkSubstationElectricalGroup>(this.detach_LinkSubstationElectricalGroups));
			this._TransmissionVoltageCustomers = new EntitySet<TransmissionVoltageCustomer>(new Action<TransmissionVoltageCustomer>(this.attach_TransmissionVoltageCustomers), new Action<TransmissionVoltageCustomer>(this.detach_TransmissionVoltageCustomers));
			this._LinkNotes = new EntitySet<LinkNote>(new Action<LinkNote>(this.attach_LinkNotes), new Action<LinkNote>(this.detach_LinkNotes));
			this._ElectricalGroup = default(EntityRef<ElectricalGroup>);
			this._FuelType = default(EntityRef<FuelType>);
			this._LTAPSubRegion = default(EntityRef<LTAPSubRegion>);
			this._OwnershipType = default(EntityRef<OwnershipType>);
			this._SubstationType = default(EntityRef<SubstationType>);
			this._Meter = default(EntityRef<Meter>);
			this._PowerCall = default(EntityRef<PowerCall>);
			this._ResourceStatuse = default(EntityRef<ResourceStatuse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeoLocationId", DbType="Int")]
		public System.Nullable<int> GeoLocationId
		{
			get
			{
				return this._GeoLocationId;
			}
			set
			{
				if ((this._GeoLocationId != value))
				{
					this.OnGeoLocationIdChanging(value);
					this.SendPropertyChanging();
					this._GeoLocationId = value;
					this.SendPropertyChanged("GeoLocationId");
					this.OnGeoLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SingleLineDiagramUri", DbType="VarChar(255)")]
		public string SingleLineDiagramUri
		{
			get
			{
				return this._SingleLineDiagramUri;
			}
			set
			{
				if ((this._SingleLineDiagramUri != value))
				{
					this.OnSingleLineDiagramUriChanging(value);
					this.SendPropertyChanging();
					this._SingleLineDiagramUri = value;
					this.SendPropertyChanged("SingleLineDiagramUri");
					this.OnSingleLineDiagramUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalOperationOrderLink", DbType="VarChar(255)")]
		public string LocalOperationOrderLink
		{
			get
			{
				return this._LocalOperationOrderLink;
			}
			set
			{
				if ((this._LocalOperationOrderLink != value))
				{
					this.OnLocalOperationOrderLinkChanging(value);
					this.SendPropertyChanging();
					this._LocalOperationOrderLink = value;
					this.SendPropertyChanged("LocalOperationOrderLink");
					this.OnLocalOperationOrderLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterId", DbType="Int")]
		public System.Nullable<int> MeterId
		{
			get
			{
				return this._MeterId;
			}
			set
			{
				if ((this._MeterId != value))
				{
					if (this._Meter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeterIdChanging(value);
					this.SendPropertyChanging();
					this._MeterId = value;
					this.SendPropertyChanged("MeterId");
					this.OnMeterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectricalGroupId", DbType="Int")]
		public System.Nullable<int> ElectricalGroupId
		{
			get
			{
				return this._ElectricalGroupId;
			}
			set
			{
				if ((this._ElectricalGroupId != value))
				{
					if (this._ElectricalGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnElectricalGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ElectricalGroupId = value;
					this.SendPropertyChanged("ElectricalGroupId");
					this.OnElectricalGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PowerCallId", DbType="Int")]
		public System.Nullable<int> PowerCallId
		{
			get
			{
				return this._PowerCallId;
			}
			set
			{
				if ((this._PowerCallId != value))
				{
					if (this._PowerCall.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPowerCallIdChanging(value);
					this.SendPropertyChanging();
					this._PowerCallId = value;
					this.SendPropertyChanged("PowerCallId");
					this.OnPowerCallIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSynchronousCondenserCapable", DbType="Bit")]
		public System.Nullable<bool> IsSynchronousCondenserCapable
		{
			get
			{
				return this._IsSynchronousCondenserCapable;
			}
			set
			{
				if ((this._IsSynchronousCondenserCapable != value))
				{
					this.OnIsSynchronousCondenserCapableChanging(value);
					this.SendPropertyChanging();
					this._IsSynchronousCondenserCapable = value;
					this.SendPropertyChanged("IsSynchronousCondenserCapable");
					this.OnIsSynchronousCondenserCapableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CIMLoadTS", DbType="DateTime")]
		public System.Nullable<System.DateTime> CIMLoadTS
		{
			get
			{
				return this._CIMLoadTS;
			}
			set
			{
				if ((this._CIMLoadTS != value))
				{
					this.OnCIMLoadTSChanging(value);
					this.SendPropertyChanging();
					this._CIMLoadTS = value;
					this.SendPropertyChanged("CIMLoadTS");
					this.OnCIMLoadTSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LRBLoadTS", DbType="DateTime")]
		public System.Nullable<System.DateTime> LRBLoadTS
		{
			get
			{
				return this._LRBLoadTS;
			}
			set
			{
				if ((this._LRBLoadTS != value))
				{
					this.OnLRBLoadTSChanging(value);
					this.SendPropertyChanging();
					this._LRBLoadTS = value;
					this.SendPropertyChanged("LRBLoadTS");
					this.OnLRBLoadTSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacilityLoadTS", DbType="DateTime")]
		public System.Nullable<System.DateTime> FacilityLoadTS
		{
			get
			{
				return this._FacilityLoadTS;
			}
			set
			{
				if ((this._FacilityLoadTS != value))
				{
					this.OnFacilityLoadTSChanging(value);
					this.SendPropertyChanging();
					this._FacilityLoadTS = value;
					this.SendPropertyChanged("FacilityLoadTS");
					this.OnFacilityLoadTSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NITSPlanLoadTS", DbType="DateTime")]
		public System.Nullable<System.DateTime> NITSPlanLoadTS
		{
			get
			{
				return this._NITSPlanLoadTS;
			}
			set
			{
				if ((this._NITSPlanLoadTS != value))
				{
					this.OnNITSPlanLoadTSChanging(value);
					this.SendPropertyChanging();
					this._NITSPlanLoadTS = value;
					this.SendPropertyChanged("NITSPlanLoadTS");
					this.OnNITSPlanLoadTSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubStationTypeId", DbType="Int")]
		public System.Nullable<int> SubStationTypeId
		{
			get
			{
				return this._SubStationTypeId;
			}
			set
			{
				if ((this._SubStationTypeId != value))
				{
					if (this._SubstationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubStationTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SubStationTypeId = value;
					this.SendPropertyChanged("SubStationTypeId");
					this.OnSubStationTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelTypeId", DbType="Int")]
		public System.Nullable<int> FuelTypeId
		{
			get
			{
				return this._FuelTypeId;
			}
			set
			{
				if ((this._FuelTypeId != value))
				{
					if (this._FuelType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFuelTypeIdChanging(value);
					this.SendPropertyChanging();
					this._FuelTypeId = value;
					this.SendPropertyChanged("FuelTypeId");
					this.OnFuelTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnershipTypeId", DbType="Int")]
		public System.Nullable<int> OwnershipTypeId
		{
			get
			{
				return this._OwnershipTypeId;
			}
			set
			{
				if ((this._OwnershipTypeId != value))
				{
					if (this._OwnershipType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnershipTypeIdChanging(value);
					this.SendPropertyChanging();
					this._OwnershipTypeId = value;
					this.SendPropertyChanged("OwnershipTypeId");
					this.OnOwnershipTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LTAPSubRegionId", DbType="Int")]
		public System.Nullable<int> LTAPSubRegionId
		{
			get
			{
				return this._LTAPSubRegionId;
			}
			set
			{
				if ((this._LTAPSubRegionId != value))
				{
					if (this._LTAPSubRegion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLTAPSubRegionIdChanging(value);
					this.SendPropertyChanging();
					this._LTAPSubRegionId = value;
					this.SendPropertyChanged("LTAPSubRegionId");
					this.OnLTAPSubRegionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceStatusId", DbType="Int")]
		public System.Nullable<int> ResourceStatusId
		{
			get
			{
				return this._ResourceStatusId;
			}
			set
			{
				if ((this._ResourceStatusId != value))
				{
					if (this._ResourceStatuse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceStatusIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceStatusId = value;
					this.SendPropertyChanged("ResourceStatusId");
					this.OnResourceStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryPoi", DbType="NVarChar(100)")]
		public string PrimaryPoi
		{
			get
			{
				return this._PrimaryPoi;
			}
			set
			{
				if ((this._PrimaryPoi != value))
				{
					this.OnPrimaryPoiChanging(value);
					this.SendPropertyChanging();
					this._PrimaryPoi = value;
					this.SendPropertyChanged("PrimaryPoi");
					this.OnPrimaryPoiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondaryPoi", DbType="NVarChar(100)")]
		public string SecondaryPoi
		{
			get
			{
				return this._SecondaryPoi;
			}
			set
			{
				if ((this._SecondaryPoi != value))
				{
					this.OnSecondaryPoiChanging(value);
					this.SendPropertyChanging();
					this._SecondaryPoi = value;
					this.SendPropertyChanged("SecondaryPoi");
					this.OnSecondaryPoiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoiCircuitDesignation", DbType="NVarChar(100)")]
		public string PoiCircuitDesignation
		{
			get
			{
				return this._PoiCircuitDesignation;
			}
			set
			{
				if ((this._PoiCircuitDesignation != value))
				{
					this.OnPoiCircuitDesignationChanging(value);
					this.SendPropertyChanging();
					this._PoiCircuitDesignation = value;
					this.SendPropertyChanged("PoiCircuitDesignation");
					this.OnPoiCircuitDesignationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoiVoltage", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> PoiVoltage
		{
			get
			{
				return this._PoiVoltage;
			}
			set
			{
				if ((this._PoiVoltage != value))
				{
					this.OnPoiVoltageChanging(value);
					this.SendPropertyChanging();
					this._PoiVoltage = value;
					this.SendPropertyChanged("PoiVoltage");
					this.OnPoiVoltageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_VoltageLevel", Storage="_VoltageLevels", ThisKey="Id", OtherKey="SubstationId")]
		public EntitySet<VoltageLevel> VoltageLevels
		{
			get
			{
				return this._VoltageLevels;
			}
			set
			{
				this._VoltageLevels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_Name", Storage="_Names", ThisKey="Id", OtherKey="SubstationId")]
		public EntitySet<Name> Names
		{
			get
			{
				return this._Names;
			}
			set
			{
				this._Names.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_LinkElectricityPurchaseAgreementsSubstation", Storage="_LinkElectricityPurchaseAgreementsSubstations", ThisKey="Id", OtherKey="SubstationId")]
		public EntitySet<LinkElectricityPurchaseAgreementsSubstation> LinkElectricityPurchaseAgreementsSubstations
		{
			get
			{
				return this._LinkElectricityPurchaseAgreementsSubstations;
			}
			set
			{
				this._LinkElectricityPurchaseAgreementsSubstations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_SubstationAttribute", Storage="_SubstationAttributes", ThisKey="Id", OtherKey="SubstationId")]
		public EntitySet<SubstationAttribute> SubstationAttributes
		{
			get
			{
				return this._SubstationAttributes;
			}
			set
			{
				this._SubstationAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_LinkTsrSubstation", Storage="_LinkTsrSubstations", ThisKey="Id", OtherKey="SubstationId")]
		public EntitySet<LinkTsrSubstation> LinkTsrSubstations
		{
			get
			{
				return this._LinkTsrSubstations;
			}
			set
			{
				this._LinkTsrSubstations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_LinkSubstationElectricalGroup", Storage="_LinkSubstationElectricalGroups", ThisKey="Id", OtherKey="SubstationId")]
		public EntitySet<LinkSubstationElectricalGroup> LinkSubstationElectricalGroups
		{
			get
			{
				return this._LinkSubstationElectricalGroups;
			}
			set
			{
				this._LinkSubstationElectricalGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_TransmissionVoltageCustomer", Storage="_TransmissionVoltageCustomers", ThisKey="Id", OtherKey="FacilityId")]
		public EntitySet<TransmissionVoltageCustomer> TransmissionVoltageCustomers
		{
			get
			{
				return this._TransmissionVoltageCustomers;
			}
			set
			{
				this._TransmissionVoltageCustomers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_LinkNote", Storage="_LinkNotes", ThisKey="Id", OtherKey="SubstationId")]
		public EntitySet<LinkNote> LinkNotes
		{
			get
			{
				return this._LinkNotes;
			}
			set
			{
				this._LinkNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElectricalGroup_Substation", Storage="_ElectricalGroup", ThisKey="ElectricalGroupId", OtherKey="Id", IsForeignKey=true)]
		public ElectricalGroup ElectricalGroup
		{
			get
			{
				return this._ElectricalGroup.Entity;
			}
			set
			{
				ElectricalGroup previousValue = this._ElectricalGroup.Entity;
				if (((previousValue != value) 
							|| (this._ElectricalGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ElectricalGroup.Entity = null;
						previousValue.Substations.Remove(this);
					}
					this._ElectricalGroup.Entity = value;
					if ((value != null))
					{
						value.Substations.Add(this);
						this._ElectricalGroupId = value.Id;
					}
					else
					{
						this._ElectricalGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ElectricalGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FuelType_Substation", Storage="_FuelType", ThisKey="FuelTypeId", OtherKey="Id", IsForeignKey=true)]
		public FuelType FuelType
		{
			get
			{
				return this._FuelType.Entity;
			}
			set
			{
				FuelType previousValue = this._FuelType.Entity;
				if (((previousValue != value) 
							|| (this._FuelType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FuelType.Entity = null;
						previousValue.Substations.Remove(this);
					}
					this._FuelType.Entity = value;
					if ((value != null))
					{
						value.Substations.Add(this);
						this._FuelTypeId = value.Id;
					}
					else
					{
						this._FuelTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("FuelType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LTAPSubRegion_Substation", Storage="_LTAPSubRegion", ThisKey="LTAPSubRegionId", OtherKey="Id", IsForeignKey=true)]
		public LTAPSubRegion LTAPSubRegion
		{
			get
			{
				return this._LTAPSubRegion.Entity;
			}
			set
			{
				LTAPSubRegion previousValue = this._LTAPSubRegion.Entity;
				if (((previousValue != value) 
							|| (this._LTAPSubRegion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LTAPSubRegion.Entity = null;
						previousValue.Substations.Remove(this);
					}
					this._LTAPSubRegion.Entity = value;
					if ((value != null))
					{
						value.Substations.Add(this);
						this._LTAPSubRegionId = value.Id;
					}
					else
					{
						this._LTAPSubRegionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("LTAPSubRegion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnershipType_Substation", Storage="_OwnershipType", ThisKey="OwnershipTypeId", OtherKey="Id", IsForeignKey=true)]
		public OwnershipType OwnershipType
		{
			get
			{
				return this._OwnershipType.Entity;
			}
			set
			{
				OwnershipType previousValue = this._OwnershipType.Entity;
				if (((previousValue != value) 
							|| (this._OwnershipType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnershipType.Entity = null;
						previousValue.Substations.Remove(this);
					}
					this._OwnershipType.Entity = value;
					if ((value != null))
					{
						value.Substations.Add(this);
						this._OwnershipTypeId = value.Id;
					}
					else
					{
						this._OwnershipTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("OwnershipType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubstationType_Substation", Storage="_SubstationType", ThisKey="SubStationTypeId", OtherKey="Id", IsForeignKey=true)]
		public SubstationType SubstationType
		{
			get
			{
				return this._SubstationType.Entity;
			}
			set
			{
				SubstationType previousValue = this._SubstationType.Entity;
				if (((previousValue != value) 
							|| (this._SubstationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubstationType.Entity = null;
						previousValue.Substations.Remove(this);
					}
					this._SubstationType.Entity = value;
					if ((value != null))
					{
						value.Substations.Add(this);
						this._SubStationTypeId = value.Id;
					}
					else
					{
						this._SubStationTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubstationType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_Substation", Storage="_Meter", ThisKey="MeterId", OtherKey="Id", IsForeignKey=true)]
		public Meter Meter
		{
			get
			{
				return this._Meter.Entity;
			}
			set
			{
				Meter previousValue = this._Meter.Entity;
				if (((previousValue != value) 
							|| (this._Meter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meter.Entity = null;
						previousValue.Substations.Remove(this);
					}
					this._Meter.Entity = value;
					if ((value != null))
					{
						value.Substations.Add(this);
						this._MeterId = value.Id;
					}
					else
					{
						this._MeterId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Meter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerCall_Substation", Storage="_PowerCall", ThisKey="PowerCallId", OtherKey="Id", IsForeignKey=true)]
		public PowerCall PowerCall
		{
			get
			{
				return this._PowerCall.Entity;
			}
			set
			{
				PowerCall previousValue = this._PowerCall.Entity;
				if (((previousValue != value) 
							|| (this._PowerCall.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PowerCall.Entity = null;
						previousValue.Substations.Remove(this);
					}
					this._PowerCall.Entity = value;
					if ((value != null))
					{
						value.Substations.Add(this);
						this._PowerCallId = value.Id;
					}
					else
					{
						this._PowerCallId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PowerCall");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceStatuse_Substation", Storage="_ResourceStatuse", ThisKey="ResourceStatusId", OtherKey="Id", IsForeignKey=true)]
		public ResourceStatuse ResourceStatuse
		{
			get
			{
				return this._ResourceStatuse.Entity;
			}
			set
			{
				ResourceStatuse previousValue = this._ResourceStatuse.Entity;
				if (((previousValue != value) 
							|| (this._ResourceStatuse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceStatuse.Entity = null;
						previousValue.Substations.Remove(this);
					}
					this._ResourceStatuse.Entity = value;
					if ((value != null))
					{
						value.Substations.Add(this);
						this._ResourceStatusId = value.Id;
					}
					else
					{
						this._ResourceStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ResourceStatuse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VoltageLevels(VoltageLevel entity)
		{
			this.SendPropertyChanging();
			entity.Substation = this;
		}
		
		private void detach_VoltageLevels(VoltageLevel entity)
		{
			this.SendPropertyChanging();
			entity.Substation = null;
		}
		
		private void attach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.Substation = this;
		}
		
		private void detach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.Substation = null;
		}
		
		private void attach_LinkElectricityPurchaseAgreementsSubstations(LinkElectricityPurchaseAgreementsSubstation entity)
		{
			this.SendPropertyChanging();
			entity.Substation = this;
		}
		
		private void detach_LinkElectricityPurchaseAgreementsSubstations(LinkElectricityPurchaseAgreementsSubstation entity)
		{
			this.SendPropertyChanging();
			entity.Substation = null;
		}
		
		private void attach_SubstationAttributes(SubstationAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Substation = this;
		}
		
		private void detach_SubstationAttributes(SubstationAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Substation = null;
		}
		
		private void attach_LinkTsrSubstations(LinkTsrSubstation entity)
		{
			this.SendPropertyChanging();
			entity.Substation = this;
		}
		
		private void detach_LinkTsrSubstations(LinkTsrSubstation entity)
		{
			this.SendPropertyChanging();
			entity.Substation = null;
		}
		
		private void attach_LinkSubstationElectricalGroups(LinkSubstationElectricalGroup entity)
		{
			this.SendPropertyChanging();
			entity.Substation = this;
		}
		
		private void detach_LinkSubstationElectricalGroups(LinkSubstationElectricalGroup entity)
		{
			this.SendPropertyChanging();
			entity.Substation = null;
		}
		
		private void attach_TransmissionVoltageCustomers(TransmissionVoltageCustomer entity)
		{
			this.SendPropertyChanging();
			entity.Substation = this;
		}
		
		private void detach_TransmissionVoltageCustomers(TransmissionVoltageCustomer entity)
		{
			this.SendPropertyChanging();
			entity.Substation = null;
		}
		
		private void attach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.Substation = this;
		}
		
		private void detach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.Substation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.AuditRecords")]
	public partial class AuditRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private byte _Action;
		
		private string _EntityTable;
		
		private int _EntityTableKey;
		
		private string _AssociationTable;
		
		private System.Nullable<int> _AssociationTableKey;
		
		private System.DateTime _AuditDate;
		
		private string _UserName;
		
		private EntitySet<AuditRecordField> _AuditRecordFields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnActionChanging(byte value);
    partial void OnActionChanged();
    partial void OnEntityTableChanging(string value);
    partial void OnEntityTableChanged();
    partial void OnEntityTableKeyChanging(int value);
    partial void OnEntityTableKeyChanged();
    partial void OnAssociationTableChanging(string value);
    partial void OnAssociationTableChanged();
    partial void OnAssociationTableKeyChanging(System.Nullable<int> value);
    partial void OnAssociationTableKeyChanged();
    partial void OnAuditDateChanging(System.DateTime value);
    partial void OnAuditDateChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public AuditRecord()
		{
			this._AuditRecordFields = new EntitySet<AuditRecordField>(new Action<AuditRecordField>(this.attach_AuditRecordFields), new Action<AuditRecordField>(this.detach_AuditRecordFields));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="TinyInt NOT NULL")]
		public byte Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityTable", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EntityTable
		{
			get
			{
				return this._EntityTable;
			}
			set
			{
				if ((this._EntityTable != value))
				{
					this.OnEntityTableChanging(value);
					this.SendPropertyChanging();
					this._EntityTable = value;
					this.SendPropertyChanged("EntityTable");
					this.OnEntityTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityTableKey", DbType="Int NOT NULL")]
		public int EntityTableKey
		{
			get
			{
				return this._EntityTableKey;
			}
			set
			{
				if ((this._EntityTableKey != value))
				{
					this.OnEntityTableKeyChanging(value);
					this.SendPropertyChanging();
					this._EntityTableKey = value;
					this.SendPropertyChanged("EntityTableKey");
					this.OnEntityTableKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssociationTable", DbType="VarChar(50)")]
		public string AssociationTable
		{
			get
			{
				return this._AssociationTable;
			}
			set
			{
				if ((this._AssociationTable != value))
				{
					this.OnAssociationTableChanging(value);
					this.SendPropertyChanging();
					this._AssociationTable = value;
					this.SendPropertyChanged("AssociationTable");
					this.OnAssociationTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssociationTableKey", DbType="Int")]
		public System.Nullable<int> AssociationTableKey
		{
			get
			{
				return this._AssociationTableKey;
			}
			set
			{
				if ((this._AssociationTableKey != value))
				{
					this.OnAssociationTableKeyChanging(value);
					this.SendPropertyChanging();
					this._AssociationTableKey = value;
					this.SendPropertyChanged("AssociationTableKey");
					this.OnAssociationTableKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime AuditDate
		{
			get
			{
				return this._AuditDate;
			}
			set
			{
				if ((this._AuditDate != value))
				{
					this.OnAuditDateChanging(value);
					this.SendPropertyChanging();
					this._AuditDate = value;
					this.SendPropertyChanged("AuditDate");
					this.OnAuditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditRecord_AuditRecordField", Storage="_AuditRecordFields", ThisKey="Id", OtherKey="AuditRecordId")]
		public EntitySet<AuditRecordField> AuditRecordFields
		{
			get
			{
				return this._AuditRecordFields;
			}
			set
			{
				this._AuditRecordFields.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuditRecordFields(AuditRecordField entity)
		{
			this.SendPropertyChanging();
			entity.AuditRecord = this;
		}
		
		private void detach_AuditRecordFields(AuditRecordField entity)
		{
			this.SendPropertyChanging();
			entity.AuditRecord = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.AuditRecordFields")]
	public partial class AuditRecordField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _AuditRecordId;
		
		private string _MemberName;
		
		private string _OldValue;
		
		private string _NewValue;
		
		private EntityRef<AuditRecord> _AuditRecord;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAuditRecordIdChanging(int value);
    partial void OnAuditRecordIdChanged();
    partial void OnMemberNameChanging(string value);
    partial void OnMemberNameChanged();
    partial void OnOldValueChanging(string value);
    partial void OnOldValueChanged();
    partial void OnNewValueChanging(string value);
    partial void OnNewValueChanged();
    #endregion
		
		public AuditRecordField()
		{
			this._AuditRecord = default(EntityRef<AuditRecord>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditRecordId", DbType="Int NOT NULL")]
		public int AuditRecordId
		{
			get
			{
				return this._AuditRecordId;
			}
			set
			{
				if ((this._AuditRecordId != value))
				{
					if (this._AuditRecord.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuditRecordIdChanging(value);
					this.SendPropertyChanging();
					this._AuditRecordId = value;
					this.SendPropertyChanged("AuditRecordId");
					this.OnAuditRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string MemberName
		{
			get
			{
				return this._MemberName;
			}
			set
			{
				if ((this._MemberName != value))
				{
					this.OnMemberNameChanging(value);
					this.SendPropertyChanging();
					this._MemberName = value;
					this.SendPropertyChanged("MemberName");
					this.OnMemberNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldValue", DbType="VarChar(MAX)")]
		public string OldValue
		{
			get
			{
				return this._OldValue;
			}
			set
			{
				if ((this._OldValue != value))
				{
					this.OnOldValueChanging(value);
					this.SendPropertyChanging();
					this._OldValue = value;
					this.SendPropertyChanged("OldValue");
					this.OnOldValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewValue", DbType="VarChar(MAX)")]
		public string NewValue
		{
			get
			{
				return this._NewValue;
			}
			set
			{
				if ((this._NewValue != value))
				{
					this.OnNewValueChanging(value);
					this.SendPropertyChanging();
					this._NewValue = value;
					this.SendPropertyChanged("NewValue");
					this.OnNewValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditRecord_AuditRecordField", Storage="_AuditRecord", ThisKey="AuditRecordId", OtherKey="Id", IsForeignKey=true)]
		public AuditRecord AuditRecord
		{
			get
			{
				return this._AuditRecord.Entity;
			}
			set
			{
				AuditRecord previousValue = this._AuditRecord.Entity;
				if (((previousValue != value) 
							|| (this._AuditRecord.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditRecord.Entity = null;
						previousValue.AuditRecordFields.Remove(this);
					}
					this._AuditRecord.Entity = value;
					if ((value != null))
					{
						value.AuditRecordFields.Add(this);
						this._AuditRecordId = value.Id;
					}
					else
					{
						this._AuditRecordId = default(int);
					}
					this.SendPropertyChanged("AuditRecord");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.SubstationAttributes")]
	public partial class SubstationAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _OriginalId;
		
		private System.Nullable<int> _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateEnd;
		
		private System.Nullable<System.DateTime> _DateReplaced;
		
		private System.Nullable<System.DateTime> _DateEffective;
		
		private System.Nullable<int> _ProjectPhaseId;
		
		private int _SubstationId;
		
		private int _ResourcePlanId;
		
		private System.Nullable<decimal> _RatedMVA;
		
		private System.Nullable<decimal> _RatedOverExcitedPowerFactor;
		
		private System.Nullable<decimal> _RatedUnderExcitedPowerFactor;
		
		private System.Nullable<decimal> _NamePlateCapacityInMW;
		
		private System.Nullable<decimal> _RatedOverExcitedMvar;
		
		private System.Nullable<decimal> _RatedUnderExcitedMvar;
		
		private System.Nullable<decimal> _RatedPowerFactor;
		
		private System.Nullable<decimal> _DependableGeneratingCapacity;
		
		private System.Nullable<decimal> _EffectiveLoadCarryingCapacity;
		
		private System.Nullable<decimal> _LoadGrossSummerPeak;
		
		private System.Nullable<decimal> _LoadGrossSummerMin;
		
		private System.Nullable<decimal> _LoadGrossWinterPeak;
		
		private System.Nullable<decimal> _LoadGrossWinterMin;
		
		private System.Nullable<decimal> _MaximumPowerOutput;
		
		private System.Nullable<bool> _Nominated;
		
		private System.Nullable<int> _Probability;
		
		private System.Nullable<System.DateTime> _InServiceStartDate;
		
		private System.Nullable<System.DateTime> _InServiceEndDate;
		
		private System.Nullable<decimal> _NitsDesignatedCapacity;
		
		private System.Nullable<decimal> _EPACapacity;
		
		private System.Nullable<decimal> _MaxTakeOrPayCapacity;
		
		private System.Nullable<decimal> _PointToPointCapacity;
		
		private System.Nullable<decimal> _ReliabilityMustRunCapacity;
		
		private System.Nullable<decimal> _SystemCapacity;
		
		private bool _UsePdgcMasteredValue;
		
		private bool _UsePmpoMasteredValue;
		
		private bool _UsePptpMasteredValue;
		
		private bool _UsePrmrMasteredValue;
		
		private bool _UsePndcMasteredValue;
		
		private bool _UsePnpMasteredValue;
		
		private bool _UsePdmx0MasteredValue;
		
		private bool _UsePdmx1MasteredValue;
		
		private bool _UsePelccMasteredValue;
		
		private System.Nullable<decimal> _MaxOutputForFirmTransmission;
		
		private System.Nullable<decimal> _MaxOutputForNonFirmTransmission;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private System.Nullable<decimal> _InterconnectionsRequestCapacity;
		
		private EntityRef<ResourcePlan> _ResourcePlan;
		
		private EntityRef<Substation> _Substation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOriginalIdChanging(System.Nullable<int> value);
    partial void OnOriginalIdChanged();
    partial void OnUserCreatedIdChanging(System.Nullable<int> value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateEndChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEndChanged();
    partial void OnDateReplacedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateReplacedChanged();
    partial void OnDateEffectiveChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEffectiveChanged();
    partial void OnProjectPhaseIdChanging(System.Nullable<int> value);
    partial void OnProjectPhaseIdChanged();
    partial void OnSubstationIdChanging(int value);
    partial void OnSubstationIdChanged();
    partial void OnResourcePlanIdChanging(int value);
    partial void OnResourcePlanIdChanged();
    partial void OnRatedMVAChanging(System.Nullable<decimal> value);
    partial void OnRatedMVAChanged();
    partial void OnRatedOverExcitedPowerFactorChanging(System.Nullable<decimal> value);
    partial void OnRatedOverExcitedPowerFactorChanged();
    partial void OnRatedUnderExcitedPowerFactorChanging(System.Nullable<decimal> value);
    partial void OnRatedUnderExcitedPowerFactorChanged();
    partial void OnNamePlateCapacityInMWChanging(System.Nullable<decimal> value);
    partial void OnNamePlateCapacityInMWChanged();
    partial void OnRatedOverExcitedMvarChanging(System.Nullable<decimal> value);
    partial void OnRatedOverExcitedMvarChanged();
    partial void OnRatedUnderExcitedMvarChanging(System.Nullable<decimal> value);
    partial void OnRatedUnderExcitedMvarChanged();
    partial void OnRatedPowerFactorChanging(System.Nullable<decimal> value);
    partial void OnRatedPowerFactorChanged();
    partial void OnDependableGeneratingCapacityChanging(System.Nullable<decimal> value);
    partial void OnDependableGeneratingCapacityChanged();
    partial void OnEffectiveLoadCarryingCapacityChanging(System.Nullable<decimal> value);
    partial void OnEffectiveLoadCarryingCapacityChanged();
    partial void OnLoadGrossSummerPeakChanging(System.Nullable<decimal> value);
    partial void OnLoadGrossSummerPeakChanged();
    partial void OnLoadGrossSummerMinChanging(System.Nullable<decimal> value);
    partial void OnLoadGrossSummerMinChanged();
    partial void OnLoadGrossWinterPeakChanging(System.Nullable<decimal> value);
    partial void OnLoadGrossWinterPeakChanged();
    partial void OnLoadGrossWinterMinChanging(System.Nullable<decimal> value);
    partial void OnLoadGrossWinterMinChanged();
    partial void OnMaximumPowerOutputChanging(System.Nullable<decimal> value);
    partial void OnMaximumPowerOutputChanged();
    partial void OnNominatedChanging(System.Nullable<bool> value);
    partial void OnNominatedChanged();
    partial void OnProbabilityChanging(System.Nullable<int> value);
    partial void OnProbabilityChanged();
    partial void OnInServiceStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInServiceStartDateChanged();
    partial void OnInServiceEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInServiceEndDateChanged();
    partial void OnNitsDesignatedCapacityChanging(System.Nullable<decimal> value);
    partial void OnNitsDesignatedCapacityChanged();
    partial void OnEPACapacityChanging(System.Nullable<decimal> value);
    partial void OnEPACapacityChanged();
    partial void OnMaxTakeOrPayCapacityChanging(System.Nullable<decimal> value);
    partial void OnMaxTakeOrPayCapacityChanged();
    partial void OnPointToPointCapacityChanging(System.Nullable<decimal> value);
    partial void OnPointToPointCapacityChanged();
    partial void OnReliabilityMustRunCapacityChanging(System.Nullable<decimal> value);
    partial void OnReliabilityMustRunCapacityChanged();
    partial void OnSystemCapacityChanging(System.Nullable<decimal> value);
    partial void OnSystemCapacityChanged();
    partial void OnUsePdgcMasteredValueChanging(bool value);
    partial void OnUsePdgcMasteredValueChanged();
    partial void OnUsePmpoMasteredValueChanging(bool value);
    partial void OnUsePmpoMasteredValueChanged();
    partial void OnUsePptpMasteredValueChanging(bool value);
    partial void OnUsePptpMasteredValueChanged();
    partial void OnUsePrmrMasteredValueChanging(bool value);
    partial void OnUsePrmrMasteredValueChanged();
    partial void OnUsePndcMasteredValueChanging(bool value);
    partial void OnUsePndcMasteredValueChanged();
    partial void OnUsePnpMasteredValueChanging(bool value);
    partial void OnUsePnpMasteredValueChanged();
    partial void OnUsePdmx0MasteredValueChanging(bool value);
    partial void OnUsePdmx0MasteredValueChanged();
    partial void OnUsePdmx1MasteredValueChanging(bool value);
    partial void OnUsePdmx1MasteredValueChanged();
    partial void OnUsePelccMasteredValueChanging(bool value);
    partial void OnUsePelccMasteredValueChanged();
    partial void OnMaxOutputForFirmTransmissionChanging(System.Nullable<decimal> value);
    partial void OnMaxOutputForFirmTransmissionChanged();
    partial void OnMaxOutputForNonFirmTransmissionChanging(System.Nullable<decimal> value);
    partial void OnMaxOutputForNonFirmTransmissionChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnInterconnectionsRequestCapacityChanging(System.Nullable<decimal> value);
    partial void OnInterconnectionsRequestCapacityChanged();
    #endregion
		
		public SubstationAttribute()
		{
			this._ResourcePlan = default(EntityRef<ResourcePlan>);
			this._Substation = default(EntityRef<Substation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalId", DbType="Int")]
		public System.Nullable<int> OriginalId
		{
			get
			{
				return this._OriginalId;
			}
			set
			{
				if ((this._OriginalId != value))
				{
					this.OnOriginalIdChanging(value);
					this.SendPropertyChanging();
					this._OriginalId = value;
					this.SendPropertyChanged("OriginalId");
					this.OnOriginalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int")]
		public System.Nullable<int> UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this.OnDateEndChanging(value);
					this.SendPropertyChanging();
					this._DateEnd = value;
					this.SendPropertyChanged("DateEnd");
					this.OnDateEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateReplaced", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateReplaced
		{
			get
			{
				return this._DateReplaced;
			}
			set
			{
				if ((this._DateReplaced != value))
				{
					this.OnDateReplacedChanging(value);
					this.SendPropertyChanging();
					this._DateReplaced = value;
					this.SendPropertyChanged("DateReplaced");
					this.OnDateReplacedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEffective", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateEffective
		{
			get
			{
				return this._DateEffective;
			}
			set
			{
				if ((this._DateEffective != value))
				{
					this.OnDateEffectiveChanging(value);
					this.SendPropertyChanging();
					this._DateEffective = value;
					this.SendPropertyChanged("DateEffective");
					this.OnDateEffectiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectPhaseId", DbType="Int")]
		public System.Nullable<int> ProjectPhaseId
		{
			get
			{
				return this._ProjectPhaseId;
			}
			set
			{
				if ((this._ProjectPhaseId != value))
				{
					this.OnProjectPhaseIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectPhaseId = value;
					this.SendPropertyChanged("ProjectPhaseId");
					this.OnProjectPhaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubstationId", DbType="Int NOT NULL")]
		public int SubstationId
		{
			get
			{
				return this._SubstationId;
			}
			set
			{
				if ((this._SubstationId != value))
				{
					if (this._Substation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstationIdChanging(value);
					this.SendPropertyChanging();
					this._SubstationId = value;
					this.SendPropertyChanged("SubstationId");
					this.OnSubstationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourcePlanId", DbType="Int NOT NULL")]
		public int ResourcePlanId
		{
			get
			{
				return this._ResourcePlanId;
			}
			set
			{
				if ((this._ResourcePlanId != value))
				{
					if (this._ResourcePlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourcePlanIdChanging(value);
					this.SendPropertyChanging();
					this._ResourcePlanId = value;
					this.SendPropertyChanged("ResourcePlanId");
					this.OnResourcePlanIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatedMVA", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> RatedMVA
		{
			get
			{
				return this._RatedMVA;
			}
			set
			{
				if ((this._RatedMVA != value))
				{
					this.OnRatedMVAChanging(value);
					this.SendPropertyChanging();
					this._RatedMVA = value;
					this.SendPropertyChanged("RatedMVA");
					this.OnRatedMVAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatedOverExcitedPowerFactor", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> RatedOverExcitedPowerFactor
		{
			get
			{
				return this._RatedOverExcitedPowerFactor;
			}
			set
			{
				if ((this._RatedOverExcitedPowerFactor != value))
				{
					this.OnRatedOverExcitedPowerFactorChanging(value);
					this.SendPropertyChanging();
					this._RatedOverExcitedPowerFactor = value;
					this.SendPropertyChanged("RatedOverExcitedPowerFactor");
					this.OnRatedOverExcitedPowerFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatedUnderExcitedPowerFactor", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> RatedUnderExcitedPowerFactor
		{
			get
			{
				return this._RatedUnderExcitedPowerFactor;
			}
			set
			{
				if ((this._RatedUnderExcitedPowerFactor != value))
				{
					this.OnRatedUnderExcitedPowerFactorChanging(value);
					this.SendPropertyChanging();
					this._RatedUnderExcitedPowerFactor = value;
					this.SendPropertyChanged("RatedUnderExcitedPowerFactor");
					this.OnRatedUnderExcitedPowerFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NamePlateCapacityInMW", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> NamePlateCapacityInMW
		{
			get
			{
				return this._NamePlateCapacityInMW;
			}
			set
			{
				if ((this._NamePlateCapacityInMW != value))
				{
					this.OnNamePlateCapacityInMWChanging(value);
					this.SendPropertyChanging();
					this._NamePlateCapacityInMW = value;
					this.SendPropertyChanged("NamePlateCapacityInMW");
					this.OnNamePlateCapacityInMWChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatedOverExcitedMvar", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> RatedOverExcitedMvar
		{
			get
			{
				return this._RatedOverExcitedMvar;
			}
			set
			{
				if ((this._RatedOverExcitedMvar != value))
				{
					this.OnRatedOverExcitedMvarChanging(value);
					this.SendPropertyChanging();
					this._RatedOverExcitedMvar = value;
					this.SendPropertyChanged("RatedOverExcitedMvar");
					this.OnRatedOverExcitedMvarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatedUnderExcitedMvar", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> RatedUnderExcitedMvar
		{
			get
			{
				return this._RatedUnderExcitedMvar;
			}
			set
			{
				if ((this._RatedUnderExcitedMvar != value))
				{
					this.OnRatedUnderExcitedMvarChanging(value);
					this.SendPropertyChanging();
					this._RatedUnderExcitedMvar = value;
					this.SendPropertyChanged("RatedUnderExcitedMvar");
					this.OnRatedUnderExcitedMvarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatedPowerFactor", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> RatedPowerFactor
		{
			get
			{
				return this._RatedPowerFactor;
			}
			set
			{
				if ((this._RatedPowerFactor != value))
				{
					this.OnRatedPowerFactorChanging(value);
					this.SendPropertyChanging();
					this._RatedPowerFactor = value;
					this.SendPropertyChanged("RatedPowerFactor");
					this.OnRatedPowerFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DependableGeneratingCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> DependableGeneratingCapacity
		{
			get
			{
				return this._DependableGeneratingCapacity;
			}
			set
			{
				if ((this._DependableGeneratingCapacity != value))
				{
					this.OnDependableGeneratingCapacityChanging(value);
					this.SendPropertyChanging();
					this._DependableGeneratingCapacity = value;
					this.SendPropertyChanged("DependableGeneratingCapacity");
					this.OnDependableGeneratingCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveLoadCarryingCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> EffectiveLoadCarryingCapacity
		{
			get
			{
				return this._EffectiveLoadCarryingCapacity;
			}
			set
			{
				if ((this._EffectiveLoadCarryingCapacity != value))
				{
					this.OnEffectiveLoadCarryingCapacityChanging(value);
					this.SendPropertyChanging();
					this._EffectiveLoadCarryingCapacity = value;
					this.SendPropertyChanged("EffectiveLoadCarryingCapacity");
					this.OnEffectiveLoadCarryingCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadGrossSummerPeak", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> LoadGrossSummerPeak
		{
			get
			{
				return this._LoadGrossSummerPeak;
			}
			set
			{
				if ((this._LoadGrossSummerPeak != value))
				{
					this.OnLoadGrossSummerPeakChanging(value);
					this.SendPropertyChanging();
					this._LoadGrossSummerPeak = value;
					this.SendPropertyChanged("LoadGrossSummerPeak");
					this.OnLoadGrossSummerPeakChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadGrossSummerMin", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> LoadGrossSummerMin
		{
			get
			{
				return this._LoadGrossSummerMin;
			}
			set
			{
				if ((this._LoadGrossSummerMin != value))
				{
					this.OnLoadGrossSummerMinChanging(value);
					this.SendPropertyChanging();
					this._LoadGrossSummerMin = value;
					this.SendPropertyChanged("LoadGrossSummerMin");
					this.OnLoadGrossSummerMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadGrossWinterPeak", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> LoadGrossWinterPeak
		{
			get
			{
				return this._LoadGrossWinterPeak;
			}
			set
			{
				if ((this._LoadGrossWinterPeak != value))
				{
					this.OnLoadGrossWinterPeakChanging(value);
					this.SendPropertyChanging();
					this._LoadGrossWinterPeak = value;
					this.SendPropertyChanged("LoadGrossWinterPeak");
					this.OnLoadGrossWinterPeakChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadGrossWinterMin", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> LoadGrossWinterMin
		{
			get
			{
				return this._LoadGrossWinterMin;
			}
			set
			{
				if ((this._LoadGrossWinterMin != value))
				{
					this.OnLoadGrossWinterMinChanging(value);
					this.SendPropertyChanging();
					this._LoadGrossWinterMin = value;
					this.SendPropertyChanged("LoadGrossWinterMin");
					this.OnLoadGrossWinterMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaximumPowerOutput", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> MaximumPowerOutput
		{
			get
			{
				return this._MaximumPowerOutput;
			}
			set
			{
				if ((this._MaximumPowerOutput != value))
				{
					this.OnMaximumPowerOutputChanging(value);
					this.SendPropertyChanging();
					this._MaximumPowerOutput = value;
					this.SendPropertyChanged("MaximumPowerOutput");
					this.OnMaximumPowerOutputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nominated", DbType="Bit")]
		public System.Nullable<bool> Nominated
		{
			get
			{
				return this._Nominated;
			}
			set
			{
				if ((this._Nominated != value))
				{
					this.OnNominatedChanging(value);
					this.SendPropertyChanging();
					this._Nominated = value;
					this.SendPropertyChanged("Nominated");
					this.OnNominatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Probability", DbType="Int")]
		public System.Nullable<int> Probability
		{
			get
			{
				return this._Probability;
			}
			set
			{
				if ((this._Probability != value))
				{
					this.OnProbabilityChanging(value);
					this.SendPropertyChanging();
					this._Probability = value;
					this.SendPropertyChanged("Probability");
					this.OnProbabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InServiceStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InServiceStartDate
		{
			get
			{
				return this._InServiceStartDate;
			}
			set
			{
				if ((this._InServiceStartDate != value))
				{
					this.OnInServiceStartDateChanging(value);
					this.SendPropertyChanging();
					this._InServiceStartDate = value;
					this.SendPropertyChanged("InServiceStartDate");
					this.OnInServiceStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InServiceEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InServiceEndDate
		{
			get
			{
				return this._InServiceEndDate;
			}
			set
			{
				if ((this._InServiceEndDate != value))
				{
					this.OnInServiceEndDateChanging(value);
					this.SendPropertyChanging();
					this._InServiceEndDate = value;
					this.SendPropertyChanged("InServiceEndDate");
					this.OnInServiceEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NitsDesignatedCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> NitsDesignatedCapacity
		{
			get
			{
				return this._NitsDesignatedCapacity;
			}
			set
			{
				if ((this._NitsDesignatedCapacity != value))
				{
					this.OnNitsDesignatedCapacityChanging(value);
					this.SendPropertyChanging();
					this._NitsDesignatedCapacity = value;
					this.SendPropertyChanged("NitsDesignatedCapacity");
					this.OnNitsDesignatedCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EPACapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> EPACapacity
		{
			get
			{
				return this._EPACapacity;
			}
			set
			{
				if ((this._EPACapacity != value))
				{
					this.OnEPACapacityChanging(value);
					this.SendPropertyChanging();
					this._EPACapacity = value;
					this.SendPropertyChanged("EPACapacity");
					this.OnEPACapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxTakeOrPayCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> MaxTakeOrPayCapacity
		{
			get
			{
				return this._MaxTakeOrPayCapacity;
			}
			set
			{
				if ((this._MaxTakeOrPayCapacity != value))
				{
					this.OnMaxTakeOrPayCapacityChanging(value);
					this.SendPropertyChanging();
					this._MaxTakeOrPayCapacity = value;
					this.SendPropertyChanged("MaxTakeOrPayCapacity");
					this.OnMaxTakeOrPayCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PointToPointCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> PointToPointCapacity
		{
			get
			{
				return this._PointToPointCapacity;
			}
			set
			{
				if ((this._PointToPointCapacity != value))
				{
					this.OnPointToPointCapacityChanging(value);
					this.SendPropertyChanging();
					this._PointToPointCapacity = value;
					this.SendPropertyChanged("PointToPointCapacity");
					this.OnPointToPointCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReliabilityMustRunCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> ReliabilityMustRunCapacity
		{
			get
			{
				return this._ReliabilityMustRunCapacity;
			}
			set
			{
				if ((this._ReliabilityMustRunCapacity != value))
				{
					this.OnReliabilityMustRunCapacityChanging(value);
					this.SendPropertyChanging();
					this._ReliabilityMustRunCapacity = value;
					this.SendPropertyChanged("ReliabilityMustRunCapacity");
					this.OnReliabilityMustRunCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> SystemCapacity
		{
			get
			{
				return this._SystemCapacity;
			}
			set
			{
				if ((this._SystemCapacity != value))
				{
					this.OnSystemCapacityChanging(value);
					this.SendPropertyChanging();
					this._SystemCapacity = value;
					this.SendPropertyChanged("SystemCapacity");
					this.OnSystemCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsePdgcMasteredValue", DbType="Bit NOT NULL")]
		public bool UsePdgcMasteredValue
		{
			get
			{
				return this._UsePdgcMasteredValue;
			}
			set
			{
				if ((this._UsePdgcMasteredValue != value))
				{
					this.OnUsePdgcMasteredValueChanging(value);
					this.SendPropertyChanging();
					this._UsePdgcMasteredValue = value;
					this.SendPropertyChanged("UsePdgcMasteredValue");
					this.OnUsePdgcMasteredValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsePmpoMasteredValue", DbType="Bit NOT NULL")]
		public bool UsePmpoMasteredValue
		{
			get
			{
				return this._UsePmpoMasteredValue;
			}
			set
			{
				if ((this._UsePmpoMasteredValue != value))
				{
					this.OnUsePmpoMasteredValueChanging(value);
					this.SendPropertyChanging();
					this._UsePmpoMasteredValue = value;
					this.SendPropertyChanged("UsePmpoMasteredValue");
					this.OnUsePmpoMasteredValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsePptpMasteredValue", DbType="Bit NOT NULL")]
		public bool UsePptpMasteredValue
		{
			get
			{
				return this._UsePptpMasteredValue;
			}
			set
			{
				if ((this._UsePptpMasteredValue != value))
				{
					this.OnUsePptpMasteredValueChanging(value);
					this.SendPropertyChanging();
					this._UsePptpMasteredValue = value;
					this.SendPropertyChanged("UsePptpMasteredValue");
					this.OnUsePptpMasteredValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsePrmrMasteredValue", DbType="Bit NOT NULL")]
		public bool UsePrmrMasteredValue
		{
			get
			{
				return this._UsePrmrMasteredValue;
			}
			set
			{
				if ((this._UsePrmrMasteredValue != value))
				{
					this.OnUsePrmrMasteredValueChanging(value);
					this.SendPropertyChanging();
					this._UsePrmrMasteredValue = value;
					this.SendPropertyChanged("UsePrmrMasteredValue");
					this.OnUsePrmrMasteredValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsePndcMasteredValue", DbType="Bit NOT NULL")]
		public bool UsePndcMasteredValue
		{
			get
			{
				return this._UsePndcMasteredValue;
			}
			set
			{
				if ((this._UsePndcMasteredValue != value))
				{
					this.OnUsePndcMasteredValueChanging(value);
					this.SendPropertyChanging();
					this._UsePndcMasteredValue = value;
					this.SendPropertyChanged("UsePndcMasteredValue");
					this.OnUsePndcMasteredValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsePnpMasteredValue", DbType="Bit NOT NULL")]
		public bool UsePnpMasteredValue
		{
			get
			{
				return this._UsePnpMasteredValue;
			}
			set
			{
				if ((this._UsePnpMasteredValue != value))
				{
					this.OnUsePnpMasteredValueChanging(value);
					this.SendPropertyChanging();
					this._UsePnpMasteredValue = value;
					this.SendPropertyChanged("UsePnpMasteredValue");
					this.OnUsePnpMasteredValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsePdmx0MasteredValue", DbType="Bit NOT NULL")]
		public bool UsePdmx0MasteredValue
		{
			get
			{
				return this._UsePdmx0MasteredValue;
			}
			set
			{
				if ((this._UsePdmx0MasteredValue != value))
				{
					this.OnUsePdmx0MasteredValueChanging(value);
					this.SendPropertyChanging();
					this._UsePdmx0MasteredValue = value;
					this.SendPropertyChanged("UsePdmx0MasteredValue");
					this.OnUsePdmx0MasteredValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsePdmx1MasteredValue", DbType="Bit NOT NULL")]
		public bool UsePdmx1MasteredValue
		{
			get
			{
				return this._UsePdmx1MasteredValue;
			}
			set
			{
				if ((this._UsePdmx1MasteredValue != value))
				{
					this.OnUsePdmx1MasteredValueChanging(value);
					this.SendPropertyChanging();
					this._UsePdmx1MasteredValue = value;
					this.SendPropertyChanged("UsePdmx1MasteredValue");
					this.OnUsePdmx1MasteredValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsePelccMasteredValue", DbType="Bit NOT NULL")]
		public bool UsePelccMasteredValue
		{
			get
			{
				return this._UsePelccMasteredValue;
			}
			set
			{
				if ((this._UsePelccMasteredValue != value))
				{
					this.OnUsePelccMasteredValueChanging(value);
					this.SendPropertyChanging();
					this._UsePelccMasteredValue = value;
					this.SendPropertyChanged("UsePelccMasteredValue");
					this.OnUsePelccMasteredValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxOutputForFirmTransmission", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> MaxOutputForFirmTransmission
		{
			get
			{
				return this._MaxOutputForFirmTransmission;
			}
			set
			{
				if ((this._MaxOutputForFirmTransmission != value))
				{
					this.OnMaxOutputForFirmTransmissionChanging(value);
					this.SendPropertyChanging();
					this._MaxOutputForFirmTransmission = value;
					this.SendPropertyChanged("MaxOutputForFirmTransmission");
					this.OnMaxOutputForFirmTransmissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxOutputForNonFirmTransmission", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> MaxOutputForNonFirmTransmission
		{
			get
			{
				return this._MaxOutputForNonFirmTransmission;
			}
			set
			{
				if ((this._MaxOutputForNonFirmTransmission != value))
				{
					this.OnMaxOutputForNonFirmTransmissionChanging(value);
					this.SendPropertyChanging();
					this._MaxOutputForNonFirmTransmission = value;
					this.SendPropertyChanged("MaxOutputForNonFirmTransmission");
					this.OnMaxOutputForNonFirmTransmissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterconnectionsRequestCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> InterconnectionsRequestCapacity
		{
			get
			{
				return this._InterconnectionsRequestCapacity;
			}
			set
			{
				if ((this._InterconnectionsRequestCapacity != value))
				{
					this.OnInterconnectionsRequestCapacityChanging(value);
					this.SendPropertyChanging();
					this._InterconnectionsRequestCapacity = value;
					this.SendPropertyChanged("InterconnectionsRequestCapacity");
					this.OnInterconnectionsRequestCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourcePlan_SubstationAttribute", Storage="_ResourcePlan", ThisKey="ResourcePlanId", OtherKey="Id", IsForeignKey=true)]
		public ResourcePlan ResourcePlan
		{
			get
			{
				return this._ResourcePlan.Entity;
			}
			set
			{
				ResourcePlan previousValue = this._ResourcePlan.Entity;
				if (((previousValue != value) 
							|| (this._ResourcePlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourcePlan.Entity = null;
						previousValue.SubstationAttributes.Remove(this);
					}
					this._ResourcePlan.Entity = value;
					if ((value != null))
					{
						value.SubstationAttributes.Add(this);
						this._ResourcePlanId = value.Id;
					}
					else
					{
						this._ResourcePlanId = default(int);
					}
					this.SendPropertyChanged("ResourcePlan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_SubstationAttribute", Storage="_Substation", ThisKey="SubstationId", OtherKey="Id", IsForeignKey=true)]
		public Substation Substation
		{
			get
			{
				return this._Substation.Entity;
			}
			set
			{
				Substation previousValue = this._Substation.Entity;
				if (((previousValue != value) 
							|| (this._Substation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Substation.Entity = null;
						previousValue.SubstationAttributes.Remove(this);
					}
					this._Substation.Entity = value;
					if ((value != null))
					{
						value.SubstationAttributes.Add(this);
						this._SubstationId = value.Id;
					}
					else
					{
						this._SubstationId = default(int);
					}
					this.SendPropertyChanged("Substation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.Maps")]
	public partial class Map : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpatedId;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private System.Nullable<bool> _IsActive;
		
		private int _MapDefinitionRootId;
		
		private int _TypeId;
		
		private EntityRef<ElectricalGroup> _ElectricalGroup;
		
		private EntityRef<MapType> _MapType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpatedIdChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnMapDefinitionRootIdChanging(int value);
    partial void OnMapDefinitionRootIdChanged();
    partial void OnTypeIdChanging(int value);
    partial void OnTypeIdChanged();
    #endregion
		
		public Map()
		{
			this._ElectricalGroup = default(EntityRef<ElectricalGroup>);
			this._MapType = default(EntityRef<MapType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpatedId", DbType="Int")]
		public System.Nullable<int> UserUpatedId
		{
			get
			{
				return this._UserUpatedId;
			}
			set
			{
				if ((this._UserUpatedId != value))
				{
					this.OnUserUpatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpatedId = value;
					this.SendPropertyChanged("UserUpatedId");
					this.OnUserUpatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapDefinitionRootId", DbType="Int NOT NULL")]
		public int MapDefinitionRootId
		{
			get
			{
				return this._MapDefinitionRootId;
			}
			set
			{
				if ((this._MapDefinitionRootId != value))
				{
					if (this._ElectricalGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapDefinitionRootIdChanging(value);
					this.SendPropertyChanging();
					this._MapDefinitionRootId = value;
					this.SendPropertyChanged("MapDefinitionRootId");
					this.OnMapDefinitionRootIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", DbType="Int NOT NULL")]
		public int TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					if (this._MapType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElectricalGroup_Map", Storage="_ElectricalGroup", ThisKey="MapDefinitionRootId", OtherKey="Id", IsForeignKey=true)]
		public ElectricalGroup ElectricalGroup
		{
			get
			{
				return this._ElectricalGroup.Entity;
			}
			set
			{
				ElectricalGroup previousValue = this._ElectricalGroup.Entity;
				if (((previousValue != value) 
							|| (this._ElectricalGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ElectricalGroup.Entity = null;
						previousValue.Maps.Remove(this);
					}
					this._ElectricalGroup.Entity = value;
					if ((value != null))
					{
						value.Maps.Add(this);
						this._MapDefinitionRootId = value.Id;
					}
					else
					{
						this._MapDefinitionRootId = default(int);
					}
					this.SendPropertyChanged("ElectricalGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapType_Map", Storage="_MapType", ThisKey="TypeId", OtherKey="Id", IsForeignKey=true)]
		public MapType MapType
		{
			get
			{
				return this._MapType.Entity;
			}
			set
			{
				MapType previousValue = this._MapType.Entity;
				if (((previousValue != value) 
							|| (this._MapType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapType.Entity = null;
						previousValue.Maps.Remove(this);
					}
					this._MapType.Entity = value;
					if ((value != null))
					{
						value.Maps.Add(this);
						this._TypeId = value.Id;
					}
					else
					{
						this._TypeId = default(int);
					}
					this.SendPropertyChanged("MapType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="link.LinkTsrSubstations")]
	public partial class LinkTsrSubstation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SubstationId;
		
		private int _TransmissionServiceRequestId;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private EntityRef<Substation> _Substation;
		
		private EntityRef<TransmissionServiceRequest> _TransmissionServiceRequest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSubstationIdChanging(int value);
    partial void OnSubstationIdChanged();
    partial void OnTransmissionServiceRequestIdChanging(int value);
    partial void OnTransmissionServiceRequestIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    #endregion
		
		public LinkTsrSubstation()
		{
			this._Substation = default(EntityRef<Substation>);
			this._TransmissionServiceRequest = default(EntityRef<TransmissionServiceRequest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubstationId", DbType="Int NOT NULL")]
		public int SubstationId
		{
			get
			{
				return this._SubstationId;
			}
			set
			{
				if ((this._SubstationId != value))
				{
					if (this._Substation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstationIdChanging(value);
					this.SendPropertyChanging();
					this._SubstationId = value;
					this.SendPropertyChanged("SubstationId");
					this.OnSubstationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionServiceRequestId", DbType="Int NOT NULL")]
		public int TransmissionServiceRequestId
		{
			get
			{
				return this._TransmissionServiceRequestId;
			}
			set
			{
				if ((this._TransmissionServiceRequestId != value))
				{
					if (this._TransmissionServiceRequest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransmissionServiceRequestIdChanging(value);
					this.SendPropertyChanging();
					this._TransmissionServiceRequestId = value;
					this.SendPropertyChanged("TransmissionServiceRequestId");
					this.OnTransmissionServiceRequestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_LinkTsrSubstation", Storage="_Substation", ThisKey="SubstationId", OtherKey="Id", IsForeignKey=true)]
		public Substation Substation
		{
			get
			{
				return this._Substation.Entity;
			}
			set
			{
				Substation previousValue = this._Substation.Entity;
				if (((previousValue != value) 
							|| (this._Substation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Substation.Entity = null;
						previousValue.LinkTsrSubstations.Remove(this);
					}
					this._Substation.Entity = value;
					if ((value != null))
					{
						value.LinkTsrSubstations.Add(this);
						this._SubstationId = value.Id;
					}
					else
					{
						this._SubstationId = default(int);
					}
					this.SendPropertyChanged("Substation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionServiceRequest_LinkTsrSubstation", Storage="_TransmissionServiceRequest", ThisKey="TransmissionServiceRequestId", OtherKey="Id", IsForeignKey=true)]
		public TransmissionServiceRequest TransmissionServiceRequest
		{
			get
			{
				return this._TransmissionServiceRequest.Entity;
			}
			set
			{
				TransmissionServiceRequest previousValue = this._TransmissionServiceRequest.Entity;
				if (((previousValue != value) 
							|| (this._TransmissionServiceRequest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransmissionServiceRequest.Entity = null;
						previousValue.LinkTsrSubstations.Remove(this);
					}
					this._TransmissionServiceRequest.Entity = value;
					if ((value != null))
					{
						value.LinkTsrSubstations.Add(this);
						this._TransmissionServiceRequestId = value.Id;
					}
					else
					{
						this._TransmissionServiceRequestId = default(int);
					}
					this.SendPropertyChanged("TransmissionServiceRequest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="link.LinkResourceBundleElectricalGroups")]
	public partial class LinkResourceBundleElectricalGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ResourceBundleId;
		
		private int _ElectricalGroupId;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private EntityRef<ElectricalGroup> _ElectricalGroup;
		
		private EntityRef<ResourceBundle> _ResourceBundle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnResourceBundleIdChanging(int value);
    partial void OnResourceBundleIdChanged();
    partial void OnElectricalGroupIdChanging(int value);
    partial void OnElectricalGroupIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    #endregion
		
		public LinkResourceBundleElectricalGroup()
		{
			this._ElectricalGroup = default(EntityRef<ElectricalGroup>);
			this._ResourceBundle = default(EntityRef<ResourceBundle>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceBundleId", DbType="Int NOT NULL")]
		public int ResourceBundleId
		{
			get
			{
				return this._ResourceBundleId;
			}
			set
			{
				if ((this._ResourceBundleId != value))
				{
					if (this._ResourceBundle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceBundleIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceBundleId = value;
					this.SendPropertyChanged("ResourceBundleId");
					this.OnResourceBundleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectricalGroupId", DbType="Int NOT NULL")]
		public int ElectricalGroupId
		{
			get
			{
				return this._ElectricalGroupId;
			}
			set
			{
				if ((this._ElectricalGroupId != value))
				{
					if (this._ElectricalGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnElectricalGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ElectricalGroupId = value;
					this.SendPropertyChanged("ElectricalGroupId");
					this.OnElectricalGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElectricalGroup_LinkResourceBundleElectricalGroup", Storage="_ElectricalGroup", ThisKey="ElectricalGroupId", OtherKey="Id", IsForeignKey=true)]
		public ElectricalGroup ElectricalGroup
		{
			get
			{
				return this._ElectricalGroup.Entity;
			}
			set
			{
				ElectricalGroup previousValue = this._ElectricalGroup.Entity;
				if (((previousValue != value) 
							|| (this._ElectricalGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ElectricalGroup.Entity = null;
						previousValue.LinkResourceBundleElectricalGroups.Remove(this);
					}
					this._ElectricalGroup.Entity = value;
					if ((value != null))
					{
						value.LinkResourceBundleElectricalGroups.Add(this);
						this._ElectricalGroupId = value.Id;
					}
					else
					{
						this._ElectricalGroupId = default(int);
					}
					this.SendPropertyChanged("ElectricalGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceBundle_LinkResourceBundleElectricalGroup", Storage="_ResourceBundle", ThisKey="ResourceBundleId", OtherKey="Id", IsForeignKey=true)]
		public ResourceBundle ResourceBundle
		{
			get
			{
				return this._ResourceBundle.Entity;
			}
			set
			{
				ResourceBundle previousValue = this._ResourceBundle.Entity;
				if (((previousValue != value) 
							|| (this._ResourceBundle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceBundle.Entity = null;
						previousValue.LinkResourceBundleElectricalGroups.Remove(this);
					}
					this._ResourceBundle.Entity = value;
					if ((value != null))
					{
						value.LinkResourceBundleElectricalGroups.Add(this);
						this._ResourceBundleId = value.Id;
					}
					else
					{
						this._ResourceBundleId = default(int);
					}
					this.SendPropertyChanged("ResourceBundle");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.MapTypes")]
	public partial class MapType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Code;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private EntitySet<Map> _Maps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    #endregion
		
		public MapType()
		{
			this._Maps = new EntitySet<Map>(new Action<Map>(this.attach_Maps), new Action<Map>(this.detach_Maps));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapType_Map", Storage="_Maps", ThisKey="Id", OtherKey="TypeId")]
		public EntitySet<Map> Maps
		{
			get
			{
				return this._Maps;
			}
			set
			{
				this._Maps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Maps(Map entity)
		{
			this.SendPropertyChanging();
			entity.MapType = this;
		}
		
		private void detach_Maps(Map entity)
		{
			this.SendPropertyChanging();
			entity.MapType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.TransmissionServiceRequests")]
	public partial class TransmissionServiceRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TsrTypeId;
		
		private string _TsrNumber;
		
		private System.DateTime _TsrPostingDate;
		
		private string _Description;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private System.Nullable<decimal> _CapacityMw;
		
		private System.Nullable<int> _FileReferenceId;
		
		private EntitySet<LinkTsrSubstation> _LinkTsrSubstations;
		
		private EntitySet<LinkTsrGeneratingUnit> _LinkTsrGeneratingUnits;
		
		private EntitySet<LinkTsrProject> _LinkTsrProjects;
		
		private EntitySet<LinkTsrTvc> _LinkTsrTvcs;
		
		private EntitySet<LinkNote> _LinkNotes;
		
		private EntityRef<FileReference> _FileReference;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTsrTypeIdChanging(int value);
    partial void OnTsrTypeIdChanged();
    partial void OnTsrNumberChanging(string value);
    partial void OnTsrNumberChanged();
    partial void OnTsrPostingDateChanging(System.DateTime value);
    partial void OnTsrPostingDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnCapacityMwChanging(System.Nullable<decimal> value);
    partial void OnCapacityMwChanged();
    partial void OnFileReferenceIdChanging(System.Nullable<int> value);
    partial void OnFileReferenceIdChanged();
    #endregion
		
		public TransmissionServiceRequest()
		{
			this._LinkTsrSubstations = new EntitySet<LinkTsrSubstation>(new Action<LinkTsrSubstation>(this.attach_LinkTsrSubstations), new Action<LinkTsrSubstation>(this.detach_LinkTsrSubstations));
			this._LinkTsrGeneratingUnits = new EntitySet<LinkTsrGeneratingUnit>(new Action<LinkTsrGeneratingUnit>(this.attach_LinkTsrGeneratingUnits), new Action<LinkTsrGeneratingUnit>(this.detach_LinkTsrGeneratingUnits));
			this._LinkTsrProjects = new EntitySet<LinkTsrProject>(new Action<LinkTsrProject>(this.attach_LinkTsrProjects), new Action<LinkTsrProject>(this.detach_LinkTsrProjects));
			this._LinkTsrTvcs = new EntitySet<LinkTsrTvc>(new Action<LinkTsrTvc>(this.attach_LinkTsrTvcs), new Action<LinkTsrTvc>(this.detach_LinkTsrTvcs));
			this._LinkNotes = new EntitySet<LinkNote>(new Action<LinkNote>(this.attach_LinkNotes), new Action<LinkNote>(this.detach_LinkNotes));
			this._FileReference = default(EntityRef<FileReference>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TsrTypeId", DbType="Int NOT NULL")]
		public int TsrTypeId
		{
			get
			{
				return this._TsrTypeId;
			}
			set
			{
				if ((this._TsrTypeId != value))
				{
					this.OnTsrTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TsrTypeId = value;
					this.SendPropertyChanged("TsrTypeId");
					this.OnTsrTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TsrNumber", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string TsrNumber
		{
			get
			{
				return this._TsrNumber;
			}
			set
			{
				if ((this._TsrNumber != value))
				{
					this.OnTsrNumberChanging(value);
					this.SendPropertyChanging();
					this._TsrNumber = value;
					this.SendPropertyChanged("TsrNumber");
					this.OnTsrNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TsrPostingDate", DbType="DateTime NOT NULL")]
		public System.DateTime TsrPostingDate
		{
			get
			{
				return this._TsrPostingDate;
			}
			set
			{
				if ((this._TsrPostingDate != value))
				{
					this.OnTsrPostingDateChanging(value);
					this.SendPropertyChanging();
					this._TsrPostingDate = value;
					this.SendPropertyChanged("TsrPostingDate");
					this.OnTsrPostingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CapacityMw", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> CapacityMw
		{
			get
			{
				return this._CapacityMw;
			}
			set
			{
				if ((this._CapacityMw != value))
				{
					this.OnCapacityMwChanging(value);
					this.SendPropertyChanging();
					this._CapacityMw = value;
					this.SendPropertyChanged("CapacityMw");
					this.OnCapacityMwChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileReferenceId", DbType="Int")]
		public System.Nullable<int> FileReferenceId
		{
			get
			{
				return this._FileReferenceId;
			}
			set
			{
				if ((this._FileReferenceId != value))
				{
					if (this._FileReference.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileReferenceIdChanging(value);
					this.SendPropertyChanging();
					this._FileReferenceId = value;
					this.SendPropertyChanged("FileReferenceId");
					this.OnFileReferenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionServiceRequest_LinkTsrSubstation", Storage="_LinkTsrSubstations", ThisKey="Id", OtherKey="TransmissionServiceRequestId")]
		public EntitySet<LinkTsrSubstation> LinkTsrSubstations
		{
			get
			{
				return this._LinkTsrSubstations;
			}
			set
			{
				this._LinkTsrSubstations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionServiceRequest_LinkTsrGeneratingUnit", Storage="_LinkTsrGeneratingUnits", ThisKey="Id", OtherKey="TransmissionServiceRequestId")]
		public EntitySet<LinkTsrGeneratingUnit> LinkTsrGeneratingUnits
		{
			get
			{
				return this._LinkTsrGeneratingUnits;
			}
			set
			{
				this._LinkTsrGeneratingUnits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionServiceRequest_LinkTsrProject", Storage="_LinkTsrProjects", ThisKey="Id", OtherKey="TransmissionServiceRequestId")]
		public EntitySet<LinkTsrProject> LinkTsrProjects
		{
			get
			{
				return this._LinkTsrProjects;
			}
			set
			{
				this._LinkTsrProjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionServiceRequest_LinkTsrTvc", Storage="_LinkTsrTvcs", ThisKey="Id", OtherKey="TsrId")]
		public EntitySet<LinkTsrTvc> LinkTsrTvcs
		{
			get
			{
				return this._LinkTsrTvcs;
			}
			set
			{
				this._LinkTsrTvcs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionServiceRequest_LinkNote", Storage="_LinkNotes", ThisKey="Id", OtherKey="TsrId")]
		public EntitySet<LinkNote> LinkNotes
		{
			get
			{
				return this._LinkNotes;
			}
			set
			{
				this._LinkNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileReference_TransmissionServiceRequest", Storage="_FileReference", ThisKey="FileReferenceId", OtherKey="Id", IsForeignKey=true)]
		public FileReference FileReference
		{
			get
			{
				return this._FileReference.Entity;
			}
			set
			{
				FileReference previousValue = this._FileReference.Entity;
				if (((previousValue != value) 
							|| (this._FileReference.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileReference.Entity = null;
						previousValue.TransmissionServiceRequests.Remove(this);
					}
					this._FileReference.Entity = value;
					if ((value != null))
					{
						value.TransmissionServiceRequests.Add(this);
						this._FileReferenceId = value.Id;
					}
					else
					{
						this._FileReferenceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("FileReference");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LinkTsrSubstations(LinkTsrSubstation entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionServiceRequest = this;
		}
		
		private void detach_LinkTsrSubstations(LinkTsrSubstation entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionServiceRequest = null;
		}
		
		private void attach_LinkTsrGeneratingUnits(LinkTsrGeneratingUnit entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionServiceRequest = this;
		}
		
		private void detach_LinkTsrGeneratingUnits(LinkTsrGeneratingUnit entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionServiceRequest = null;
		}
		
		private void attach_LinkTsrProjects(LinkTsrProject entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionServiceRequest = this;
		}
		
		private void detach_LinkTsrProjects(LinkTsrProject entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionServiceRequest = null;
		}
		
		private void attach_LinkTsrTvcs(LinkTsrTvc entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionServiceRequest = this;
		}
		
		private void detach_LinkTsrTvcs(LinkTsrTvc entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionServiceRequest = null;
		}
		
		private void attach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionServiceRequest = this;
		}
		
		private void detach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionServiceRequest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="app.FileReference")]
	public partial class FileReference : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Uri;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private int _Version;
		
		private System.Nullable<int> _ResourcePlanId;
		
		private System.Nullable<int> _FileTypeId;
		
		private System.Nullable<System.DateTime> _DateApproved;
		
		private System.Nullable<int> _UserApprovedId;
		
		private System.Nullable<System.DateTime> _DatePublished;
		
		private System.Nullable<int> _UserPublishedId;
		
		private EntitySet<Note> _Notes;
		
		private EntitySet<TransmissionServiceRequest> _TransmissionServiceRequests;
		
		private EntityRef<ResourcePlan> _ResourcePlan;
		
		private EntityRef<EpicUser> _EpicUser;
		
		private EntityRef<EpicUser> _EpicUser1;
		
		private EntityRef<EpicUser> _EpicUser2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUriChanging(string value);
    partial void OnUriChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnResourcePlanIdChanging(System.Nullable<int> value);
    partial void OnResourcePlanIdChanged();
    partial void OnFileTypeIdChanging(System.Nullable<int> value);
    partial void OnFileTypeIdChanged();
    partial void OnDateApprovedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateApprovedChanged();
    partial void OnUserApprovedIdChanging(System.Nullable<int> value);
    partial void OnUserApprovedIdChanged();
    partial void OnDatePublishedChanging(System.Nullable<System.DateTime> value);
    partial void OnDatePublishedChanged();
    partial void OnUserPublishedIdChanging(System.Nullable<int> value);
    partial void OnUserPublishedIdChanged();
    #endregion
		
		public FileReference()
		{
			this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
			this._TransmissionServiceRequests = new EntitySet<TransmissionServiceRequest>(new Action<TransmissionServiceRequest>(this.attach_TransmissionServiceRequests), new Action<TransmissionServiceRequest>(this.detach_TransmissionServiceRequests));
			this._ResourcePlan = default(EntityRef<ResourcePlan>);
			this._EpicUser = default(EntityRef<EpicUser>);
			this._EpicUser1 = default(EntityRef<EpicUser>);
			this._EpicUser2 = default(EntityRef<EpicUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uri", DbType="NVarChar(MAX)")]
		public string Uri
		{
			get
			{
				return this._Uri;
			}
			set
			{
				if ((this._Uri != value))
				{
					this.OnUriChanging(value);
					this.SendPropertyChanging();
					this._Uri = value;
					this.SendPropertyChanged("Uri");
					this.OnUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					if (this._EpicUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourcePlanId", DbType="Int")]
		public System.Nullable<int> ResourcePlanId
		{
			get
			{
				return this._ResourcePlanId;
			}
			set
			{
				if ((this._ResourcePlanId != value))
				{
					if (this._ResourcePlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourcePlanIdChanging(value);
					this.SendPropertyChanging();
					this._ResourcePlanId = value;
					this.SendPropertyChanged("ResourcePlanId");
					this.OnResourcePlanIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileTypeId", DbType="Int")]
		public System.Nullable<int> FileTypeId
		{
			get
			{
				return this._FileTypeId;
			}
			set
			{
				if ((this._FileTypeId != value))
				{
					this.OnFileTypeIdChanging(value);
					this.SendPropertyChanging();
					this._FileTypeId = value;
					this.SendPropertyChanged("FileTypeId");
					this.OnFileTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateApproved", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateApproved
		{
			get
			{
				return this._DateApproved;
			}
			set
			{
				if ((this._DateApproved != value))
				{
					this.OnDateApprovedChanging(value);
					this.SendPropertyChanging();
					this._DateApproved = value;
					this.SendPropertyChanged("DateApproved");
					this.OnDateApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserApprovedId", DbType="Int")]
		public System.Nullable<int> UserApprovedId
		{
			get
			{
				return this._UserApprovedId;
			}
			set
			{
				if ((this._UserApprovedId != value))
				{
					if (this._EpicUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserApprovedIdChanging(value);
					this.SendPropertyChanging();
					this._UserApprovedId = value;
					this.SendPropertyChanged("UserApprovedId");
					this.OnUserApprovedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePublished", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatePublished
		{
			get
			{
				return this._DatePublished;
			}
			set
			{
				if ((this._DatePublished != value))
				{
					this.OnDatePublishedChanging(value);
					this.SendPropertyChanging();
					this._DatePublished = value;
					this.SendPropertyChanged("DatePublished");
					this.OnDatePublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPublishedId", DbType="Int")]
		public System.Nullable<int> UserPublishedId
		{
			get
			{
				return this._UserPublishedId;
			}
			set
			{
				if ((this._UserPublishedId != value))
				{
					if (this._EpicUser2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserPublishedIdChanging(value);
					this.SendPropertyChanging();
					this._UserPublishedId = value;
					this.SendPropertyChanged("UserPublishedId");
					this.OnUserPublishedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileReference_Note", Storage="_Notes", ThisKey="Id", OtherKey="FileReferenceId")]
		public EntitySet<Note> Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				this._Notes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileReference_TransmissionServiceRequest", Storage="_TransmissionServiceRequests", ThisKey="Id", OtherKey="FileReferenceId")]
		public EntitySet<TransmissionServiceRequest> TransmissionServiceRequests
		{
			get
			{
				return this._TransmissionServiceRequests;
			}
			set
			{
				this._TransmissionServiceRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourcePlan_FileReference", Storage="_ResourcePlan", ThisKey="ResourcePlanId", OtherKey="Id", IsForeignKey=true)]
		public ResourcePlan ResourcePlan
		{
			get
			{
				return this._ResourcePlan.Entity;
			}
			set
			{
				ResourcePlan previousValue = this._ResourcePlan.Entity;
				if (((previousValue != value) 
							|| (this._ResourcePlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourcePlan.Entity = null;
						previousValue.FileReferences.Remove(this);
					}
					this._ResourcePlan.Entity = value;
					if ((value != null))
					{
						value.FileReferences.Add(this);
						this._ResourcePlanId = value.Id;
					}
					else
					{
						this._ResourcePlanId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ResourcePlan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EpicUser_FileReference", Storage="_EpicUser", ThisKey="UserApprovedId", OtherKey="Id", IsForeignKey=true)]
		public EpicUser EpicUser
		{
			get
			{
				return this._EpicUser.Entity;
			}
			set
			{
				EpicUser previousValue = this._EpicUser.Entity;
				if (((previousValue != value) 
							|| (this._EpicUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EpicUser.Entity = null;
						previousValue.FileReferences.Remove(this);
					}
					this._EpicUser.Entity = value;
					if ((value != null))
					{
						value.FileReferences.Add(this);
						this._UserApprovedId = value.Id;
					}
					else
					{
						this._UserApprovedId = default(Nullable<int>);
					}
					this.SendPropertyChanged("EpicUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EpicUser_FileReference1", Storage="_EpicUser1", ThisKey="UserCreatedId", OtherKey="Id", IsForeignKey=true)]
		public EpicUser EpicUser1
		{
			get
			{
				return this._EpicUser1.Entity;
			}
			set
			{
				EpicUser previousValue = this._EpicUser1.Entity;
				if (((previousValue != value) 
							|| (this._EpicUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EpicUser1.Entity = null;
						previousValue.FileReferences1.Remove(this);
					}
					this._EpicUser1.Entity = value;
					if ((value != null))
					{
						value.FileReferences1.Add(this);
						this._UserCreatedId = value.Id;
					}
					else
					{
						this._UserCreatedId = default(int);
					}
					this.SendPropertyChanged("EpicUser1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EpicUser_FileReference2", Storage="_EpicUser2", ThisKey="UserPublishedId", OtherKey="Id", IsForeignKey=true)]
		public EpicUser EpicUser2
		{
			get
			{
				return this._EpicUser2.Entity;
			}
			set
			{
				EpicUser previousValue = this._EpicUser2.Entity;
				if (((previousValue != value) 
							|| (this._EpicUser2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EpicUser2.Entity = null;
						previousValue.FileReferences2.Remove(this);
					}
					this._EpicUser2.Entity = value;
					if ((value != null))
					{
						value.FileReferences2.Add(this);
						this._UserPublishedId = value.Id;
					}
					else
					{
						this._UserPublishedId = default(Nullable<int>);
					}
					this.SendPropertyChanged("EpicUser2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.FileReference = this;
		}
		
		private void detach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.FileReference = null;
		}
		
		private void attach_TransmissionServiceRequests(TransmissionServiceRequest entity)
		{
			this.SendPropertyChanging();
			entity.FileReference = this;
		}
		
		private void detach_TransmissionServiceRequests(TransmissionServiceRequest entity)
		{
			this.SendPropertyChanging();
			entity.FileReference = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="link.LinkTsrGeneratingUnits")]
	public partial class LinkTsrGeneratingUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _GeneratingUnitId;
		
		private int _TransmissionServiceRequestId;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private EntityRef<GeneratingUnit> _GeneratingUnit;
		
		private EntityRef<TransmissionServiceRequest> _TransmissionServiceRequest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGeneratingUnitIdChanging(int value);
    partial void OnGeneratingUnitIdChanged();
    partial void OnTransmissionServiceRequestIdChanging(int value);
    partial void OnTransmissionServiceRequestIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    #endregion
		
		public LinkTsrGeneratingUnit()
		{
			this._GeneratingUnit = default(EntityRef<GeneratingUnit>);
			this._TransmissionServiceRequest = default(EntityRef<TransmissionServiceRequest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratingUnitId", DbType="Int NOT NULL")]
		public int GeneratingUnitId
		{
			get
			{
				return this._GeneratingUnitId;
			}
			set
			{
				if ((this._GeneratingUnitId != value))
				{
					if (this._GeneratingUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeneratingUnitIdChanging(value);
					this.SendPropertyChanging();
					this._GeneratingUnitId = value;
					this.SendPropertyChanged("GeneratingUnitId");
					this.OnGeneratingUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionServiceRequestId", DbType="Int NOT NULL")]
		public int TransmissionServiceRequestId
		{
			get
			{
				return this._TransmissionServiceRequestId;
			}
			set
			{
				if ((this._TransmissionServiceRequestId != value))
				{
					if (this._TransmissionServiceRequest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransmissionServiceRequestIdChanging(value);
					this.SendPropertyChanging();
					this._TransmissionServiceRequestId = value;
					this.SendPropertyChanged("TransmissionServiceRequestId");
					this.OnTransmissionServiceRequestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneratingUnit_LinkTsrGeneratingUnit", Storage="_GeneratingUnit", ThisKey="GeneratingUnitId", OtherKey="Id", IsForeignKey=true)]
		public GeneratingUnit GeneratingUnit
		{
			get
			{
				return this._GeneratingUnit.Entity;
			}
			set
			{
				GeneratingUnit previousValue = this._GeneratingUnit.Entity;
				if (((previousValue != value) 
							|| (this._GeneratingUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneratingUnit.Entity = null;
						previousValue.LinkTsrGeneratingUnits.Remove(this);
					}
					this._GeneratingUnit.Entity = value;
					if ((value != null))
					{
						value.LinkTsrGeneratingUnits.Add(this);
						this._GeneratingUnitId = value.Id;
					}
					else
					{
						this._GeneratingUnitId = default(int);
					}
					this.SendPropertyChanged("GeneratingUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionServiceRequest_LinkTsrGeneratingUnit", Storage="_TransmissionServiceRequest", ThisKey="TransmissionServiceRequestId", OtherKey="Id", IsForeignKey=true)]
		public TransmissionServiceRequest TransmissionServiceRequest
		{
			get
			{
				return this._TransmissionServiceRequest.Entity;
			}
			set
			{
				TransmissionServiceRequest previousValue = this._TransmissionServiceRequest.Entity;
				if (((previousValue != value) 
							|| (this._TransmissionServiceRequest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransmissionServiceRequest.Entity = null;
						previousValue.LinkTsrGeneratingUnits.Remove(this);
					}
					this._TransmissionServiceRequest.Entity = value;
					if ((value != null))
					{
						value.LinkTsrGeneratingUnits.Add(this);
						this._TransmissionServiceRequestId = value.Id;
					}
					else
					{
						this._TransmissionServiceRequestId = default(int);
					}
					this.SendPropertyChanged("TransmissionServiceRequest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="link.LinkTsrProjects")]
	public partial class LinkTsrProject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ProjectId;
		
		private int _TransmissionServiceRequestId;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private EntityRef<TransmissionServiceRequest> _TransmissionServiceRequest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnTransmissionServiceRequestIdChanging(int value);
    partial void OnTransmissionServiceRequestIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    #endregion
		
		public LinkTsrProject()
		{
			this._TransmissionServiceRequest = default(EntityRef<TransmissionServiceRequest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="Int NOT NULL")]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionServiceRequestId", DbType="Int NOT NULL")]
		public int TransmissionServiceRequestId
		{
			get
			{
				return this._TransmissionServiceRequestId;
			}
			set
			{
				if ((this._TransmissionServiceRequestId != value))
				{
					if (this._TransmissionServiceRequest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransmissionServiceRequestIdChanging(value);
					this.SendPropertyChanging();
					this._TransmissionServiceRequestId = value;
					this.SendPropertyChanged("TransmissionServiceRequestId");
					this.OnTransmissionServiceRequestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionServiceRequest_LinkTsrProject", Storage="_TransmissionServiceRequest", ThisKey="TransmissionServiceRequestId", OtherKey="Id", IsForeignKey=true)]
		public TransmissionServiceRequest TransmissionServiceRequest
		{
			get
			{
				return this._TransmissionServiceRequest.Entity;
			}
			set
			{
				TransmissionServiceRequest previousValue = this._TransmissionServiceRequest.Entity;
				if (((previousValue != value) 
							|| (this._TransmissionServiceRequest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransmissionServiceRequest.Entity = null;
						previousValue.LinkTsrProjects.Remove(this);
					}
					this._TransmissionServiceRequest.Entity = value;
					if ((value != null))
					{
						value.LinkTsrProjects.Add(this);
						this._TransmissionServiceRequestId = value.Id;
					}
					else
					{
						this._TransmissionServiceRequestId = default(int);
					}
					this.SendPropertyChanged("TransmissionServiceRequest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.ResourceBundleAttribute")]
	public partial class ResourceBundleAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _OriginalId;
		
		private int _UserCreatedId;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateEnd;
		
		private System.Nullable<System.DateTime> _DateReplaced;
		
		private System.Nullable<System.DateTime> _DateEffective;
		
		private System.Nullable<decimal> _EffectiveLoadCarryingCapacity;
		
		private System.Nullable<decimal> _DependableGenerationCapacity;
		
		private System.Nullable<decimal> _PotentialIncludeCapacity;
		
		private System.Nullable<decimal> _SystemCapacity;
		
		private System.Nullable<System.DateTime> _CommercialOperationStartDate;
		
		private System.Nullable<System.DateTime> _CommercialOperationEndDate;
		
		private int _ResourceBundleId;
		
		private System.Nullable<int> _ProjectPhaseId;
		
		private System.Nullable<int> _ResourcePlanId;
		
		private System.Nullable<decimal> _MaximumPowerOutputCapacity;
		
		private System.Nullable<decimal> _NitsDesignatedCapacity;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<bool> _IsDesignated;
		
		private System.Nullable<decimal> _NamePlateCapacityInMW;
		
		private System.Nullable<decimal> _FirmEnergy;
		
		private System.Nullable<decimal> _TotalEnergy;
		
		private System.Nullable<decimal> _UnitEnergyCostStart;
		
		private System.Nullable<decimal> _UnitEnergyCostEnd;
		
		private System.Nullable<decimal> _UnitCapacityCost;
		
		private System.Nullable<int> _EnergyAvailableYear;
		
		private System.Nullable<decimal> _AverageEnergy;
		
		private System.Nullable<decimal> _Probability;
		
		private System.Nullable<decimal> _EnergyEfficiency;
		
		private System.Nullable<int> _DiscountRateId;
		
		private EntitySet<ResourceOptionAttribute> _ResourceOptionAttributes;
		
		private EntityRef<ResourcePlan> _ResourcePlan;
		
		private EntityRef<ResourceBundle> _ResourceBundle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOriginalIdChanging(System.Nullable<int> value);
    partial void OnOriginalIdChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateEndChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEndChanged();
    partial void OnDateReplacedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateReplacedChanged();
    partial void OnDateEffectiveChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEffectiveChanged();
    partial void OnEffectiveLoadCarryingCapacityChanging(System.Nullable<decimal> value);
    partial void OnEffectiveLoadCarryingCapacityChanged();
    partial void OnDependableGenerationCapacityChanging(System.Nullable<decimal> value);
    partial void OnDependableGenerationCapacityChanged();
    partial void OnPotentialIncludeCapacityChanging(System.Nullable<decimal> value);
    partial void OnPotentialIncludeCapacityChanged();
    partial void OnSystemCapacityChanging(System.Nullable<decimal> value);
    partial void OnSystemCapacityChanged();
    partial void OnCommercialOperationStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCommercialOperationStartDateChanged();
    partial void OnCommercialOperationEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCommercialOperationEndDateChanged();
    partial void OnResourceBundleIdChanging(int value);
    partial void OnResourceBundleIdChanged();
    partial void OnProjectPhaseIdChanging(System.Nullable<int> value);
    partial void OnProjectPhaseIdChanged();
    partial void OnResourcePlanIdChanging(System.Nullable<int> value);
    partial void OnResourcePlanIdChanged();
    partial void OnMaximumPowerOutputCapacityChanging(System.Nullable<decimal> value);
    partial void OnMaximumPowerOutputCapacityChanged();
    partial void OnNitsDesignatedCapacityChanging(System.Nullable<decimal> value);
    partial void OnNitsDesignatedCapacityChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnIsDesignatedChanging(System.Nullable<bool> value);
    partial void OnIsDesignatedChanged();
    partial void OnNamePlateCapacityInMWChanging(System.Nullable<decimal> value);
    partial void OnNamePlateCapacityInMWChanged();
    partial void OnFirmEnergyChanging(System.Nullable<decimal> value);
    partial void OnFirmEnergyChanged();
    partial void OnTotalEnergyChanging(System.Nullable<decimal> value);
    partial void OnTotalEnergyChanged();
    partial void OnUnitEnergyCostStartChanging(System.Nullable<decimal> value);
    partial void OnUnitEnergyCostStartChanged();
    partial void OnUnitEnergyCostEndChanging(System.Nullable<decimal> value);
    partial void OnUnitEnergyCostEndChanged();
    partial void OnUnitCapacityCostChanging(System.Nullable<decimal> value);
    partial void OnUnitCapacityCostChanged();
    partial void OnEnergyAvailableYearChanging(System.Nullable<int> value);
    partial void OnEnergyAvailableYearChanged();
    partial void OnAverageEnergyChanging(System.Nullable<decimal> value);
    partial void OnAverageEnergyChanged();
    partial void OnProbabilityChanging(System.Nullable<decimal> value);
    partial void OnProbabilityChanged();
    partial void OnEnergyEfficiencyChanging(System.Nullable<decimal> value);
    partial void OnEnergyEfficiencyChanged();
    partial void OnDiscountRateIdChanging(System.Nullable<int> value);
    partial void OnDiscountRateIdChanged();
    #endregion
		
		public ResourceBundleAttribute()
		{
			this._ResourceOptionAttributes = new EntitySet<ResourceOptionAttribute>(new Action<ResourceOptionAttribute>(this.attach_ResourceOptionAttributes), new Action<ResourceOptionAttribute>(this.detach_ResourceOptionAttributes));
			this._ResourcePlan = default(EntityRef<ResourcePlan>);
			this._ResourceBundle = default(EntityRef<ResourceBundle>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalId", DbType="Int")]
		public System.Nullable<int> OriginalId
		{
			get
			{
				return this._OriginalId;
			}
			set
			{
				if ((this._OriginalId != value))
				{
					this.OnOriginalIdChanging(value);
					this.SendPropertyChanging();
					this._OriginalId = value;
					this.SendPropertyChanged("OriginalId");
					this.OnOriginalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this.OnDateEndChanging(value);
					this.SendPropertyChanging();
					this._DateEnd = value;
					this.SendPropertyChanged("DateEnd");
					this.OnDateEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateReplaced", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateReplaced
		{
			get
			{
				return this._DateReplaced;
			}
			set
			{
				if ((this._DateReplaced != value))
				{
					this.OnDateReplacedChanging(value);
					this.SendPropertyChanging();
					this._DateReplaced = value;
					this.SendPropertyChanged("DateReplaced");
					this.OnDateReplacedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEffective", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateEffective
		{
			get
			{
				return this._DateEffective;
			}
			set
			{
				if ((this._DateEffective != value))
				{
					this.OnDateEffectiveChanging(value);
					this.SendPropertyChanging();
					this._DateEffective = value;
					this.SendPropertyChanged("DateEffective");
					this.OnDateEffectiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveLoadCarryingCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> EffectiveLoadCarryingCapacity
		{
			get
			{
				return this._EffectiveLoadCarryingCapacity;
			}
			set
			{
				if ((this._EffectiveLoadCarryingCapacity != value))
				{
					this.OnEffectiveLoadCarryingCapacityChanging(value);
					this.SendPropertyChanging();
					this._EffectiveLoadCarryingCapacity = value;
					this.SendPropertyChanged("EffectiveLoadCarryingCapacity");
					this.OnEffectiveLoadCarryingCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DependableGenerationCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> DependableGenerationCapacity
		{
			get
			{
				return this._DependableGenerationCapacity;
			}
			set
			{
				if ((this._DependableGenerationCapacity != value))
				{
					this.OnDependableGenerationCapacityChanging(value);
					this.SendPropertyChanging();
					this._DependableGenerationCapacity = value;
					this.SendPropertyChanged("DependableGenerationCapacity");
					this.OnDependableGenerationCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PotentialIncludeCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> PotentialIncludeCapacity
		{
			get
			{
				return this._PotentialIncludeCapacity;
			}
			set
			{
				if ((this._PotentialIncludeCapacity != value))
				{
					this.OnPotentialIncludeCapacityChanging(value);
					this.SendPropertyChanging();
					this._PotentialIncludeCapacity = value;
					this.SendPropertyChanged("PotentialIncludeCapacity");
					this.OnPotentialIncludeCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> SystemCapacity
		{
			get
			{
				return this._SystemCapacity;
			}
			set
			{
				if ((this._SystemCapacity != value))
				{
					this.OnSystemCapacityChanging(value);
					this.SendPropertyChanging();
					this._SystemCapacity = value;
					this.SendPropertyChanged("SystemCapacity");
					this.OnSystemCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommercialOperationStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CommercialOperationStartDate
		{
			get
			{
				return this._CommercialOperationStartDate;
			}
			set
			{
				if ((this._CommercialOperationStartDate != value))
				{
					this.OnCommercialOperationStartDateChanging(value);
					this.SendPropertyChanging();
					this._CommercialOperationStartDate = value;
					this.SendPropertyChanged("CommercialOperationStartDate");
					this.OnCommercialOperationStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommercialOperationEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CommercialOperationEndDate
		{
			get
			{
				return this._CommercialOperationEndDate;
			}
			set
			{
				if ((this._CommercialOperationEndDate != value))
				{
					this.OnCommercialOperationEndDateChanging(value);
					this.SendPropertyChanging();
					this._CommercialOperationEndDate = value;
					this.SendPropertyChanged("CommercialOperationEndDate");
					this.OnCommercialOperationEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceBundleId", DbType="Int NOT NULL")]
		public int ResourceBundleId
		{
			get
			{
				return this._ResourceBundleId;
			}
			set
			{
				if ((this._ResourceBundleId != value))
				{
					if (this._ResourceBundle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceBundleIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceBundleId = value;
					this.SendPropertyChanged("ResourceBundleId");
					this.OnResourceBundleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectPhaseId", DbType="Int")]
		public System.Nullable<int> ProjectPhaseId
		{
			get
			{
				return this._ProjectPhaseId;
			}
			set
			{
				if ((this._ProjectPhaseId != value))
				{
					this.OnProjectPhaseIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectPhaseId = value;
					this.SendPropertyChanged("ProjectPhaseId");
					this.OnProjectPhaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourcePlanId", DbType="Int")]
		public System.Nullable<int> ResourcePlanId
		{
			get
			{
				return this._ResourcePlanId;
			}
			set
			{
				if ((this._ResourcePlanId != value))
				{
					if (this._ResourcePlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourcePlanIdChanging(value);
					this.SendPropertyChanging();
					this._ResourcePlanId = value;
					this.SendPropertyChanged("ResourcePlanId");
					this.OnResourcePlanIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaximumPowerOutputCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> MaximumPowerOutputCapacity
		{
			get
			{
				return this._MaximumPowerOutputCapacity;
			}
			set
			{
				if ((this._MaximumPowerOutputCapacity != value))
				{
					this.OnMaximumPowerOutputCapacityChanging(value);
					this.SendPropertyChanging();
					this._MaximumPowerOutputCapacity = value;
					this.SendPropertyChanged("MaximumPowerOutputCapacity");
					this.OnMaximumPowerOutputCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NitsDesignatedCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> NitsDesignatedCapacity
		{
			get
			{
				return this._NitsDesignatedCapacity;
			}
			set
			{
				if ((this._NitsDesignatedCapacity != value))
				{
					this.OnNitsDesignatedCapacityChanging(value);
					this.SendPropertyChanging();
					this._NitsDesignatedCapacity = value;
					this.SendPropertyChanged("NitsDesignatedCapacity");
					this.OnNitsDesignatedCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDesignated", DbType="Bit")]
		public System.Nullable<bool> IsDesignated
		{
			get
			{
				return this._IsDesignated;
			}
			set
			{
				if ((this._IsDesignated != value))
				{
					this.OnIsDesignatedChanging(value);
					this.SendPropertyChanging();
					this._IsDesignated = value;
					this.SendPropertyChanged("IsDesignated");
					this.OnIsDesignatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NamePlateCapacityInMW", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> NamePlateCapacityInMW
		{
			get
			{
				return this._NamePlateCapacityInMW;
			}
			set
			{
				if ((this._NamePlateCapacityInMW != value))
				{
					this.OnNamePlateCapacityInMWChanging(value);
					this.SendPropertyChanging();
					this._NamePlateCapacityInMW = value;
					this.SendPropertyChanged("NamePlateCapacityInMW");
					this.OnNamePlateCapacityInMWChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirmEnergy", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> FirmEnergy
		{
			get
			{
				return this._FirmEnergy;
			}
			set
			{
				if ((this._FirmEnergy != value))
				{
					this.OnFirmEnergyChanging(value);
					this.SendPropertyChanging();
					this._FirmEnergy = value;
					this.SendPropertyChanged("FirmEnergy");
					this.OnFirmEnergyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalEnergy", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> TotalEnergy
		{
			get
			{
				return this._TotalEnergy;
			}
			set
			{
				if ((this._TotalEnergy != value))
				{
					this.OnTotalEnergyChanging(value);
					this.SendPropertyChanging();
					this._TotalEnergy = value;
					this.SendPropertyChanged("TotalEnergy");
					this.OnTotalEnergyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitEnergyCostStart", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> UnitEnergyCostStart
		{
			get
			{
				return this._UnitEnergyCostStart;
			}
			set
			{
				if ((this._UnitEnergyCostStart != value))
				{
					this.OnUnitEnergyCostStartChanging(value);
					this.SendPropertyChanging();
					this._UnitEnergyCostStart = value;
					this.SendPropertyChanged("UnitEnergyCostStart");
					this.OnUnitEnergyCostStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitEnergyCostEnd", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> UnitEnergyCostEnd
		{
			get
			{
				return this._UnitEnergyCostEnd;
			}
			set
			{
				if ((this._UnitEnergyCostEnd != value))
				{
					this.OnUnitEnergyCostEndChanging(value);
					this.SendPropertyChanging();
					this._UnitEnergyCostEnd = value;
					this.SendPropertyChanged("UnitEnergyCostEnd");
					this.OnUnitEnergyCostEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitCapacityCost", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> UnitCapacityCost
		{
			get
			{
				return this._UnitCapacityCost;
			}
			set
			{
				if ((this._UnitCapacityCost != value))
				{
					this.OnUnitCapacityCostChanging(value);
					this.SendPropertyChanging();
					this._UnitCapacityCost = value;
					this.SendPropertyChanged("UnitCapacityCost");
					this.OnUnitCapacityCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnergyAvailableYear", DbType="Int")]
		public System.Nullable<int> EnergyAvailableYear
		{
			get
			{
				return this._EnergyAvailableYear;
			}
			set
			{
				if ((this._EnergyAvailableYear != value))
				{
					this.OnEnergyAvailableYearChanging(value);
					this.SendPropertyChanging();
					this._EnergyAvailableYear = value;
					this.SendPropertyChanged("EnergyAvailableYear");
					this.OnEnergyAvailableYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AverageEnergy", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> AverageEnergy
		{
			get
			{
				return this._AverageEnergy;
			}
			set
			{
				if ((this._AverageEnergy != value))
				{
					this.OnAverageEnergyChanging(value);
					this.SendPropertyChanging();
					this._AverageEnergy = value;
					this.SendPropertyChanged("AverageEnergy");
					this.OnAverageEnergyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Probability", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> Probability
		{
			get
			{
				return this._Probability;
			}
			set
			{
				if ((this._Probability != value))
				{
					this.OnProbabilityChanging(value);
					this.SendPropertyChanging();
					this._Probability = value;
					this.SendPropertyChanged("Probability");
					this.OnProbabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnergyEfficiency", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> EnergyEfficiency
		{
			get
			{
				return this._EnergyEfficiency;
			}
			set
			{
				if ((this._EnergyEfficiency != value))
				{
					this.OnEnergyEfficiencyChanging(value);
					this.SendPropertyChanging();
					this._EnergyEfficiency = value;
					this.SendPropertyChanged("EnergyEfficiency");
					this.OnEnergyEfficiencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountRateId", DbType="Int")]
		public System.Nullable<int> DiscountRateId
		{
			get
			{
				return this._DiscountRateId;
			}
			set
			{
				if ((this._DiscountRateId != value))
				{
					this.OnDiscountRateIdChanging(value);
					this.SendPropertyChanging();
					this._DiscountRateId = value;
					this.SendPropertyChanged("DiscountRateId");
					this.OnDiscountRateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceBundleAttribute_ResourceOptionAttribute", Storage="_ResourceOptionAttributes", ThisKey="Id", OtherKey="ResourceBundleAttributeId")]
		public EntitySet<ResourceOptionAttribute> ResourceOptionAttributes
		{
			get
			{
				return this._ResourceOptionAttributes;
			}
			set
			{
				this._ResourceOptionAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourcePlan_ResourceBundleAttribute", Storage="_ResourcePlan", ThisKey="ResourcePlanId", OtherKey="Id", IsForeignKey=true)]
		public ResourcePlan ResourcePlan
		{
			get
			{
				return this._ResourcePlan.Entity;
			}
			set
			{
				ResourcePlan previousValue = this._ResourcePlan.Entity;
				if (((previousValue != value) 
							|| (this._ResourcePlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourcePlan.Entity = null;
						previousValue.ResourceBundleAttributes.Remove(this);
					}
					this._ResourcePlan.Entity = value;
					if ((value != null))
					{
						value.ResourceBundleAttributes.Add(this);
						this._ResourcePlanId = value.Id;
					}
					else
					{
						this._ResourcePlanId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ResourcePlan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceBundle_ResourceBundleAttribute", Storage="_ResourceBundle", ThisKey="ResourceBundleId", OtherKey="Id", IsForeignKey=true)]
		public ResourceBundle ResourceBundle
		{
			get
			{
				return this._ResourceBundle.Entity;
			}
			set
			{
				ResourceBundle previousValue = this._ResourceBundle.Entity;
				if (((previousValue != value) 
							|| (this._ResourceBundle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceBundle.Entity = null;
						previousValue.ResourceBundleAttributes.Remove(this);
					}
					this._ResourceBundle.Entity = value;
					if ((value != null))
					{
						value.ResourceBundleAttributes.Add(this);
						this._ResourceBundleId = value.Id;
					}
					else
					{
						this._ResourceBundleId = default(int);
					}
					this.SendPropertyChanged("ResourceBundle");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResourceOptionAttributes(ResourceOptionAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ResourceBundleAttribute = this;
		}
		
		private void detach_ResourceOptionAttributes(ResourceOptionAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ResourceBundleAttribute = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.ResourceBundle")]
	public partial class ResourceBundle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private int _ResourceBundleStatusId;
		
		private System.Nullable<int> _FuelTypeId;
		
		private string _Comments;
		
		private System.Nullable<decimal> _Latitude;
		
		private System.Nullable<decimal> _Longitude;
		
		private System.Nullable<int> _ElectricalGroupId;
		
		private System.Nullable<int> _PowerCallId;
		
		private System.Nullable<int> _LTAPSubRegionId;
		
		private string _PrimaryPoi;
		
		private string _SecondaryPoi;
		
		private string _PoiCircuitDesignation;
		
		private System.Nullable<decimal> _PoiVoltage;
		
		private System.Nullable<int> _ResourceGroupingTypeId;
		
		private EntitySet<Name> _Names;
		
		private EntitySet<LinkResourceBundleElectricalGroup> _LinkResourceBundleElectricalGroups;
		
		private EntitySet<ResourceBundleAttribute> _ResourceBundleAttributes;
		
		private EntitySet<LinkNote> _LinkNotes;
		
		private EntityRef<ElectricalGroup> _ElectricalGroup;
		
		private EntityRef<FuelType> _FuelType;
		
		private EntityRef<LTAPSubRegion> _LTAPSubRegion;
		
		private EntityRef<PowerCall> _PowerCall;
		
		private EntityRef<ResourceStatuse> _ResourceStatuse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnResourceBundleStatusIdChanging(int value);
    partial void OnResourceBundleStatusIdChanged();
    partial void OnFuelTypeIdChanging(System.Nullable<int> value);
    partial void OnFuelTypeIdChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnLatitudeChanging(System.Nullable<decimal> value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(System.Nullable<decimal> value);
    partial void OnLongitudeChanged();
    partial void OnElectricalGroupIdChanging(System.Nullable<int> value);
    partial void OnElectricalGroupIdChanged();
    partial void OnPowerCallIdChanging(System.Nullable<int> value);
    partial void OnPowerCallIdChanged();
    partial void OnLTAPSubRegionIdChanging(System.Nullable<int> value);
    partial void OnLTAPSubRegionIdChanged();
    partial void OnPrimaryPoiChanging(string value);
    partial void OnPrimaryPoiChanged();
    partial void OnSecondaryPoiChanging(string value);
    partial void OnSecondaryPoiChanged();
    partial void OnPoiCircuitDesignationChanging(string value);
    partial void OnPoiCircuitDesignationChanged();
    partial void OnPoiVoltageChanging(System.Nullable<decimal> value);
    partial void OnPoiVoltageChanged();
    partial void OnResourceGroupingTypeIdChanging(System.Nullable<int> value);
    partial void OnResourceGroupingTypeIdChanged();
    #endregion
		
		public ResourceBundle()
		{
			this._Names = new EntitySet<Name>(new Action<Name>(this.attach_Names), new Action<Name>(this.detach_Names));
			this._LinkResourceBundleElectricalGroups = new EntitySet<LinkResourceBundleElectricalGroup>(new Action<LinkResourceBundleElectricalGroup>(this.attach_LinkResourceBundleElectricalGroups), new Action<LinkResourceBundleElectricalGroup>(this.detach_LinkResourceBundleElectricalGroups));
			this._ResourceBundleAttributes = new EntitySet<ResourceBundleAttribute>(new Action<ResourceBundleAttribute>(this.attach_ResourceBundleAttributes), new Action<ResourceBundleAttribute>(this.detach_ResourceBundleAttributes));
			this._LinkNotes = new EntitySet<LinkNote>(new Action<LinkNote>(this.attach_LinkNotes), new Action<LinkNote>(this.detach_LinkNotes));
			this._ElectricalGroup = default(EntityRef<ElectricalGroup>);
			this._FuelType = default(EntityRef<FuelType>);
			this._LTAPSubRegion = default(EntityRef<LTAPSubRegion>);
			this._PowerCall = default(EntityRef<PowerCall>);
			this._ResourceStatuse = default(EntityRef<ResourceStatuse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="Date")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceBundleStatusId", DbType="Int NOT NULL")]
		public int ResourceBundleStatusId
		{
			get
			{
				return this._ResourceBundleStatusId;
			}
			set
			{
				if ((this._ResourceBundleStatusId != value))
				{
					if (this._ResourceStatuse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceBundleStatusIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceBundleStatusId = value;
					this.SendPropertyChanged("ResourceBundleStatusId");
					this.OnResourceBundleStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelTypeId", DbType="Int")]
		public System.Nullable<int> FuelTypeId
		{
			get
			{
				return this._FuelTypeId;
			}
			set
			{
				if ((this._FuelTypeId != value))
				{
					if (this._FuelType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFuelTypeIdChanging(value);
					this.SendPropertyChanging();
					this._FuelTypeId = value;
					this.SendPropertyChanged("FuelTypeId");
					this.OnFuelTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(MAX)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectricalGroupId", DbType="Int")]
		public System.Nullable<int> ElectricalGroupId
		{
			get
			{
				return this._ElectricalGroupId;
			}
			set
			{
				if ((this._ElectricalGroupId != value))
				{
					if (this._ElectricalGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnElectricalGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ElectricalGroupId = value;
					this.SendPropertyChanged("ElectricalGroupId");
					this.OnElectricalGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PowerCallId", DbType="Int")]
		public System.Nullable<int> PowerCallId
		{
			get
			{
				return this._PowerCallId;
			}
			set
			{
				if ((this._PowerCallId != value))
				{
					if (this._PowerCall.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPowerCallIdChanging(value);
					this.SendPropertyChanging();
					this._PowerCallId = value;
					this.SendPropertyChanged("PowerCallId");
					this.OnPowerCallIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LTAPSubRegionId", DbType="Int")]
		public System.Nullable<int> LTAPSubRegionId
		{
			get
			{
				return this._LTAPSubRegionId;
			}
			set
			{
				if ((this._LTAPSubRegionId != value))
				{
					if (this._LTAPSubRegion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLTAPSubRegionIdChanging(value);
					this.SendPropertyChanging();
					this._LTAPSubRegionId = value;
					this.SendPropertyChanged("LTAPSubRegionId");
					this.OnLTAPSubRegionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryPoi", DbType="NVarChar(100)")]
		public string PrimaryPoi
		{
			get
			{
				return this._PrimaryPoi;
			}
			set
			{
				if ((this._PrimaryPoi != value))
				{
					this.OnPrimaryPoiChanging(value);
					this.SendPropertyChanging();
					this._PrimaryPoi = value;
					this.SendPropertyChanged("PrimaryPoi");
					this.OnPrimaryPoiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondaryPoi", DbType="NVarChar(100)")]
		public string SecondaryPoi
		{
			get
			{
				return this._SecondaryPoi;
			}
			set
			{
				if ((this._SecondaryPoi != value))
				{
					this.OnSecondaryPoiChanging(value);
					this.SendPropertyChanging();
					this._SecondaryPoi = value;
					this.SendPropertyChanged("SecondaryPoi");
					this.OnSecondaryPoiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoiCircuitDesignation", DbType="NVarChar(100)")]
		public string PoiCircuitDesignation
		{
			get
			{
				return this._PoiCircuitDesignation;
			}
			set
			{
				if ((this._PoiCircuitDesignation != value))
				{
					this.OnPoiCircuitDesignationChanging(value);
					this.SendPropertyChanging();
					this._PoiCircuitDesignation = value;
					this.SendPropertyChanged("PoiCircuitDesignation");
					this.OnPoiCircuitDesignationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoiVoltage", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> PoiVoltage
		{
			get
			{
				return this._PoiVoltage;
			}
			set
			{
				if ((this._PoiVoltage != value))
				{
					this.OnPoiVoltageChanging(value);
					this.SendPropertyChanging();
					this._PoiVoltage = value;
					this.SendPropertyChanged("PoiVoltage");
					this.OnPoiVoltageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceGroupingTypeId", DbType="Int")]
		public System.Nullable<int> ResourceGroupingTypeId
		{
			get
			{
				return this._ResourceGroupingTypeId;
			}
			set
			{
				if ((this._ResourceGroupingTypeId != value))
				{
					this.OnResourceGroupingTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceGroupingTypeId = value;
					this.SendPropertyChanged("ResourceGroupingTypeId");
					this.OnResourceGroupingTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceBundle_Name", Storage="_Names", ThisKey="Id", OtherKey="ResourceBundleId")]
		public EntitySet<Name> Names
		{
			get
			{
				return this._Names;
			}
			set
			{
				this._Names.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceBundle_LinkResourceBundleElectricalGroup", Storage="_LinkResourceBundleElectricalGroups", ThisKey="Id", OtherKey="ResourceBundleId")]
		public EntitySet<LinkResourceBundleElectricalGroup> LinkResourceBundleElectricalGroups
		{
			get
			{
				return this._LinkResourceBundleElectricalGroups;
			}
			set
			{
				this._LinkResourceBundleElectricalGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceBundle_ResourceBundleAttribute", Storage="_ResourceBundleAttributes", ThisKey="Id", OtherKey="ResourceBundleId")]
		public EntitySet<ResourceBundleAttribute> ResourceBundleAttributes
		{
			get
			{
				return this._ResourceBundleAttributes;
			}
			set
			{
				this._ResourceBundleAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceBundle_LinkNote", Storage="_LinkNotes", ThisKey="Id", OtherKey="ResourceBundleId")]
		public EntitySet<LinkNote> LinkNotes
		{
			get
			{
				return this._LinkNotes;
			}
			set
			{
				this._LinkNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElectricalGroup_ResourceBundle", Storage="_ElectricalGroup", ThisKey="ElectricalGroupId", OtherKey="Id", IsForeignKey=true)]
		public ElectricalGroup ElectricalGroup
		{
			get
			{
				return this._ElectricalGroup.Entity;
			}
			set
			{
				ElectricalGroup previousValue = this._ElectricalGroup.Entity;
				if (((previousValue != value) 
							|| (this._ElectricalGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ElectricalGroup.Entity = null;
						previousValue.ResourceBundles.Remove(this);
					}
					this._ElectricalGroup.Entity = value;
					if ((value != null))
					{
						value.ResourceBundles.Add(this);
						this._ElectricalGroupId = value.Id;
					}
					else
					{
						this._ElectricalGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ElectricalGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FuelType_ResourceBundle", Storage="_FuelType", ThisKey="FuelTypeId", OtherKey="Id", IsForeignKey=true)]
		public FuelType FuelType
		{
			get
			{
				return this._FuelType.Entity;
			}
			set
			{
				FuelType previousValue = this._FuelType.Entity;
				if (((previousValue != value) 
							|| (this._FuelType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FuelType.Entity = null;
						previousValue.ResourceBundles.Remove(this);
					}
					this._FuelType.Entity = value;
					if ((value != null))
					{
						value.ResourceBundles.Add(this);
						this._FuelTypeId = value.Id;
					}
					else
					{
						this._FuelTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("FuelType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LTAPSubRegion_ResourceBundle", Storage="_LTAPSubRegion", ThisKey="LTAPSubRegionId", OtherKey="Id", IsForeignKey=true)]
		public LTAPSubRegion LTAPSubRegion
		{
			get
			{
				return this._LTAPSubRegion.Entity;
			}
			set
			{
				LTAPSubRegion previousValue = this._LTAPSubRegion.Entity;
				if (((previousValue != value) 
							|| (this._LTAPSubRegion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LTAPSubRegion.Entity = null;
						previousValue.ResourceBundles.Remove(this);
					}
					this._LTAPSubRegion.Entity = value;
					if ((value != null))
					{
						value.ResourceBundles.Add(this);
						this._LTAPSubRegionId = value.Id;
					}
					else
					{
						this._LTAPSubRegionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("LTAPSubRegion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerCall_ResourceBundle", Storage="_PowerCall", ThisKey="PowerCallId", OtherKey="Id", IsForeignKey=true)]
		public PowerCall PowerCall
		{
			get
			{
				return this._PowerCall.Entity;
			}
			set
			{
				PowerCall previousValue = this._PowerCall.Entity;
				if (((previousValue != value) 
							|| (this._PowerCall.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PowerCall.Entity = null;
						previousValue.ResourceBundles.Remove(this);
					}
					this._PowerCall.Entity = value;
					if ((value != null))
					{
						value.ResourceBundles.Add(this);
						this._PowerCallId = value.Id;
					}
					else
					{
						this._PowerCallId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PowerCall");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceStatuse_ResourceBundle", Storage="_ResourceStatuse", ThisKey="ResourceBundleStatusId", OtherKey="Id", IsForeignKey=true)]
		public ResourceStatuse ResourceStatuse
		{
			get
			{
				return this._ResourceStatuse.Entity;
			}
			set
			{
				ResourceStatuse previousValue = this._ResourceStatuse.Entity;
				if (((previousValue != value) 
							|| (this._ResourceStatuse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceStatuse.Entity = null;
						previousValue.ResourceBundles.Remove(this);
					}
					this._ResourceStatuse.Entity = value;
					if ((value != null))
					{
						value.ResourceBundles.Add(this);
						this._ResourceBundleStatusId = value.Id;
					}
					else
					{
						this._ResourceBundleStatusId = default(int);
					}
					this.SendPropertyChanged("ResourceStatuse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.ResourceBundle = this;
		}
		
		private void detach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.ResourceBundle = null;
		}
		
		private void attach_LinkResourceBundleElectricalGroups(LinkResourceBundleElectricalGroup entity)
		{
			this.SendPropertyChanging();
			entity.ResourceBundle = this;
		}
		
		private void detach_LinkResourceBundleElectricalGroups(LinkResourceBundleElectricalGroup entity)
		{
			this.SendPropertyChanging();
			entity.ResourceBundle = null;
		}
		
		private void attach_ResourceBundleAttributes(ResourceBundleAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ResourceBundle = this;
		}
		
		private void detach_ResourceBundleAttributes(ResourceBundleAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ResourceBundle = null;
		}
		
		private void attach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.ResourceBundle = this;
		}
		
		private void detach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.ResourceBundle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="link.LinkSubstationElectricalGroups")]
	public partial class LinkSubstationElectricalGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SubstationId;
		
		private int _ElectricalGroupId;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private EntityRef<ElectricalGroup> _ElectricalGroup;
		
		private EntityRef<Substation> _Substation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSubstationIdChanging(int value);
    partial void OnSubstationIdChanged();
    partial void OnElectricalGroupIdChanging(int value);
    partial void OnElectricalGroupIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    #endregion
		
		public LinkSubstationElectricalGroup()
		{
			this._ElectricalGroup = default(EntityRef<ElectricalGroup>);
			this._Substation = default(EntityRef<Substation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubstationId", DbType="Int NOT NULL")]
		public int SubstationId
		{
			get
			{
				return this._SubstationId;
			}
			set
			{
				if ((this._SubstationId != value))
				{
					if (this._Substation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstationIdChanging(value);
					this.SendPropertyChanging();
					this._SubstationId = value;
					this.SendPropertyChanged("SubstationId");
					this.OnSubstationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectricalGroupId", DbType="Int NOT NULL")]
		public int ElectricalGroupId
		{
			get
			{
				return this._ElectricalGroupId;
			}
			set
			{
				if ((this._ElectricalGroupId != value))
				{
					if (this._ElectricalGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnElectricalGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ElectricalGroupId = value;
					this.SendPropertyChanged("ElectricalGroupId");
					this.OnElectricalGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElectricalGroup_LinkSubstationElectricalGroup", Storage="_ElectricalGroup", ThisKey="ElectricalGroupId", OtherKey="Id", IsForeignKey=true)]
		public ElectricalGroup ElectricalGroup
		{
			get
			{
				return this._ElectricalGroup.Entity;
			}
			set
			{
				ElectricalGroup previousValue = this._ElectricalGroup.Entity;
				if (((previousValue != value) 
							|| (this._ElectricalGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ElectricalGroup.Entity = null;
						previousValue.LinkSubstationElectricalGroups.Remove(this);
					}
					this._ElectricalGroup.Entity = value;
					if ((value != null))
					{
						value.LinkSubstationElectricalGroups.Add(this);
						this._ElectricalGroupId = value.Id;
					}
					else
					{
						this._ElectricalGroupId = default(int);
					}
					this.SendPropertyChanged("ElectricalGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_LinkSubstationElectricalGroup", Storage="_Substation", ThisKey="SubstationId", OtherKey="Id", IsForeignKey=true)]
		public Substation Substation
		{
			get
			{
				return this._Substation.Entity;
			}
			set
			{
				Substation previousValue = this._Substation.Entity;
				if (((previousValue != value) 
							|| (this._Substation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Substation.Entity = null;
						previousValue.LinkSubstationElectricalGroups.Remove(this);
					}
					this._Substation.Entity = value;
					if ((value != null))
					{
						value.LinkSubstationElectricalGroups.Add(this);
						this._SubstationId = value.Id;
					}
					else
					{
						this._SubstationId = default(int);
					}
					this.SendPropertyChanged("Substation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.NotesType")]
	public partial class NotesType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _DatedCreated;
		
		private int _UserCreatedId;
		
		private System.Nullable<System.DateTime> _DatedUpdated;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private EntitySet<Note> _Notes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDatedCreatedChanging(System.DateTime value);
    partial void OnDatedCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnDatedUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDatedUpdatedChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    #endregion
		
		public NotesType()
		{
			this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatedCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DatedCreated
		{
			get
			{
				return this._DatedCreated;
			}
			set
			{
				if ((this._DatedCreated != value))
				{
					this.OnDatedCreatedChanging(value);
					this.SendPropertyChanging();
					this._DatedCreated = value;
					this.SendPropertyChanged("DatedCreated");
					this.OnDatedCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatedUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatedUpdated
		{
			get
			{
				return this._DatedUpdated;
			}
			set
			{
				if ((this._DatedUpdated != value))
				{
					this.OnDatedUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DatedUpdated = value;
					this.SendPropertyChanged("DatedUpdated");
					this.OnDatedUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NotesType_Note", Storage="_Notes", ThisKey="Id", OtherKey="NotesTypeId")]
		public EntitySet<Note> Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				this._Notes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.NotesType = this;
		}
		
		private void detach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.NotesType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.TvcFacilityStages")]
	public partial class TvcFacilityStage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Code;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private EntitySet<TransmissionVoltageCustomer> _TransmissionVoltageCustomers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    #endregion
		
		public TvcFacilityStage()
		{
			this._TransmissionVoltageCustomers = new EntitySet<TransmissionVoltageCustomer>(new Action<TransmissionVoltageCustomer>(this.attach_TransmissionVoltageCustomers), new Action<TransmissionVoltageCustomer>(this.detach_TransmissionVoltageCustomers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TvcFacilityStage_TransmissionVoltageCustomer", Storage="_TransmissionVoltageCustomers", ThisKey="Id", OtherKey="StageId")]
		public EntitySet<TransmissionVoltageCustomer> TransmissionVoltageCustomers
		{
			get
			{
				return this._TransmissionVoltageCustomers;
			}
			set
			{
				this._TransmissionVoltageCustomers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransmissionVoltageCustomers(TransmissionVoltageCustomer entity)
		{
			this.SendPropertyChanging();
			entity.TvcFacilityStage = this;
		}
		
		private void detach_TransmissionVoltageCustomers(TransmissionVoltageCustomer entity)
		{
			this.SendPropertyChanging();
			entity.TvcFacilityStage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.TvcFacilityStatuses")]
	public partial class TvcFacilityStatuse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Code;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private EntitySet<TransmissionVoltageCustomer> _TransmissionVoltageCustomers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    #endregion
		
		public TvcFacilityStatuse()
		{
			this._TransmissionVoltageCustomers = new EntitySet<TransmissionVoltageCustomer>(new Action<TransmissionVoltageCustomer>(this.attach_TransmissionVoltageCustomers), new Action<TransmissionVoltageCustomer>(this.detach_TransmissionVoltageCustomers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TvcFacilityStatuse_TransmissionVoltageCustomer", Storage="_TransmissionVoltageCustomers", ThisKey="Id", OtherKey="StatusId")]
		public EntitySet<TransmissionVoltageCustomer> TransmissionVoltageCustomers
		{
			get
			{
				return this._TransmissionVoltageCustomers;
			}
			set
			{
				this._TransmissionVoltageCustomers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransmissionVoltageCustomers(TransmissionVoltageCustomer entity)
		{
			this.SendPropertyChanging();
			entity.TvcFacilityStatuse = this;
		}
		
		private void detach_TransmissionVoltageCustomers(TransmissionVoltageCustomer entity)
		{
			this.SendPropertyChanging();
			entity.TvcFacilityStatuse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.TvcFacilityTypes")]
	public partial class TvcFacilityType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Code;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private EntitySet<TransmissionVoltageCustomer> _TransmissionVoltageCustomers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    #endregion
		
		public TvcFacilityType()
		{
			this._TransmissionVoltageCustomers = new EntitySet<TransmissionVoltageCustomer>(new Action<TransmissionVoltageCustomer>(this.attach_TransmissionVoltageCustomers), new Action<TransmissionVoltageCustomer>(this.detach_TransmissionVoltageCustomers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TvcFacilityType_TransmissionVoltageCustomer", Storage="_TransmissionVoltageCustomers", ThisKey="Id", OtherKey="TypeId")]
		public EntitySet<TransmissionVoltageCustomer> TransmissionVoltageCustomers
		{
			get
			{
				return this._TransmissionVoltageCustomers;
			}
			set
			{
				this._TransmissionVoltageCustomers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransmissionVoltageCustomers(TransmissionVoltageCustomer entity)
		{
			this.SendPropertyChanging();
			entity.TvcFacilityType = this;
		}
		
		private void detach_TransmissionVoltageCustomers(TransmissionVoltageCustomer entity)
		{
			this.SendPropertyChanging();
			entity.TvcFacilityType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="link.LinkTsrTvcs")]
	public partial class LinkTsrTvc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TvcId;
		
		private int _TsrId;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private EntityRef<TransmissionServiceRequest> _TransmissionServiceRequest;
		
		private EntityRef<TransmissionVoltageCustomer> _TransmissionVoltageCustomer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTvcIdChanging(int value);
    partial void OnTvcIdChanged();
    partial void OnTsrIdChanging(int value);
    partial void OnTsrIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    #endregion
		
		public LinkTsrTvc()
		{
			this._TransmissionServiceRequest = default(EntityRef<TransmissionServiceRequest>);
			this._TransmissionVoltageCustomer = default(EntityRef<TransmissionVoltageCustomer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TvcId", DbType="Int NOT NULL")]
		public int TvcId
		{
			get
			{
				return this._TvcId;
			}
			set
			{
				if ((this._TvcId != value))
				{
					if (this._TransmissionVoltageCustomer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTvcIdChanging(value);
					this.SendPropertyChanging();
					this._TvcId = value;
					this.SendPropertyChanged("TvcId");
					this.OnTvcIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TsrId", DbType="Int NOT NULL")]
		public int TsrId
		{
			get
			{
				return this._TsrId;
			}
			set
			{
				if ((this._TsrId != value))
				{
					if (this._TransmissionServiceRequest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTsrIdChanging(value);
					this.SendPropertyChanging();
					this._TsrId = value;
					this.SendPropertyChanged("TsrId");
					this.OnTsrIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionServiceRequest_LinkTsrTvc", Storage="_TransmissionServiceRequest", ThisKey="TsrId", OtherKey="Id", IsForeignKey=true)]
		public TransmissionServiceRequest TransmissionServiceRequest
		{
			get
			{
				return this._TransmissionServiceRequest.Entity;
			}
			set
			{
				TransmissionServiceRequest previousValue = this._TransmissionServiceRequest.Entity;
				if (((previousValue != value) 
							|| (this._TransmissionServiceRequest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransmissionServiceRequest.Entity = null;
						previousValue.LinkTsrTvcs.Remove(this);
					}
					this._TransmissionServiceRequest.Entity = value;
					if ((value != null))
					{
						value.LinkTsrTvcs.Add(this);
						this._TsrId = value.Id;
					}
					else
					{
						this._TsrId = default(int);
					}
					this.SendPropertyChanged("TransmissionServiceRequest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionVoltageCustomer_LinkTsrTvc", Storage="_TransmissionVoltageCustomer", ThisKey="TvcId", OtherKey="Id", IsForeignKey=true)]
		public TransmissionVoltageCustomer TransmissionVoltageCustomer
		{
			get
			{
				return this._TransmissionVoltageCustomer.Entity;
			}
			set
			{
				TransmissionVoltageCustomer previousValue = this._TransmissionVoltageCustomer.Entity;
				if (((previousValue != value) 
							|| (this._TransmissionVoltageCustomer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransmissionVoltageCustomer.Entity = null;
						previousValue.LinkTsrTvcs.Remove(this);
					}
					this._TransmissionVoltageCustomer.Entity = value;
					if ((value != null))
					{
						value.LinkTsrTvcs.Add(this);
						this._TvcId = value.Id;
					}
					else
					{
						this._TvcId = default(int);
					}
					this.SendPropertyChanged("TransmissionVoltageCustomer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.TvcStagedLoadMeasures")]
	public partial class TvcStagedLoadMeasure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TvcId;
		
		private System.DateTime _ActivationDate;
		
		private decimal _StagedLoadValue;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private string _Comments;
		
		private EntityRef<TransmissionVoltageCustomer> _TransmissionVoltageCustomer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTvcIdChanging(int value);
    partial void OnTvcIdChanged();
    partial void OnActivationDateChanging(System.DateTime value);
    partial void OnActivationDateChanged();
    partial void OnStagedLoadValueChanging(decimal value);
    partial void OnStagedLoadValueChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public TvcStagedLoadMeasure()
		{
			this._TransmissionVoltageCustomer = default(EntityRef<TransmissionVoltageCustomer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TvcId", DbType="Int NOT NULL")]
		public int TvcId
		{
			get
			{
				return this._TvcId;
			}
			set
			{
				if ((this._TvcId != value))
				{
					if (this._TransmissionVoltageCustomer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTvcIdChanging(value);
					this.SendPropertyChanging();
					this._TvcId = value;
					this.SendPropertyChanged("TvcId");
					this.OnTvcIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivationDate", DbType="DateTime NOT NULL")]
		public System.DateTime ActivationDate
		{
			get
			{
				return this._ActivationDate;
			}
			set
			{
				if ((this._ActivationDate != value))
				{
					this.OnActivationDateChanging(value);
					this.SendPropertyChanging();
					this._ActivationDate = value;
					this.SendPropertyChanged("ActivationDate");
					this.OnActivationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StagedLoadValue", DbType="Decimal(20,10) NOT NULL")]
		public decimal StagedLoadValue
		{
			get
			{
				return this._StagedLoadValue;
			}
			set
			{
				if ((this._StagedLoadValue != value))
				{
					this.OnStagedLoadValueChanging(value);
					this.SendPropertyChanging();
					this._StagedLoadValue = value;
					this.SendPropertyChanged("StagedLoadValue");
					this.OnStagedLoadValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(MAX)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionVoltageCustomer_TvcStagedLoadMeasure", Storage="_TransmissionVoltageCustomer", ThisKey="TvcId", OtherKey="Id", IsForeignKey=true)]
		public TransmissionVoltageCustomer TransmissionVoltageCustomer
		{
			get
			{
				return this._TransmissionVoltageCustomer.Entity;
			}
			set
			{
				TransmissionVoltageCustomer previousValue = this._TransmissionVoltageCustomer.Entity;
				if (((previousValue != value) 
							|| (this._TransmissionVoltageCustomer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransmissionVoltageCustomer.Entity = null;
						previousValue.TvcStagedLoadMeasures.Remove(this);
					}
					this._TransmissionVoltageCustomer.Entity = value;
					if ((value != null))
					{
						value.TvcStagedLoadMeasures.Add(this);
						this._TvcId = value.Id;
					}
					else
					{
						this._TvcId = default(int);
					}
					this.SendPropertyChanged("TransmissionVoltageCustomer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.TransmissionVoltageCustomers")]
	public partial class TransmissionVoltageCustomer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private string _AccountNumber;
		
		private System.Nullable<int> _CustomerId;
		
		private System.Nullable<int> _FacilityId;
		
		private int _StatusId;
		
		private int _StageId;
		
		private int _TypeId;
		
		private System.Nullable<decimal> _KiloVolt;
		
		private string _LineNumber;
		
		private System.Nullable<decimal> _PowerFactor;
		
		private System.Nullable<decimal> _LoadFactor;
		
		private System.Nullable<decimal> _ProbOfConnection;
		
		private string _Rate;
		
		private System.Nullable<decimal> _Latitude;
		
		private System.Nullable<decimal> _Longitude;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<System.DateTime> _DateNominated;
		
		private System.Nullable<bool> _IsOnSiteGeneration;
		
		private System.Nullable<bool> _IsIpp;
		
		private string _EpaCode;
		
		private string _FacilityCode;
		
		private string _ProjectName;
		
		private EntitySet<LinkTsrTvc> _LinkTsrTvcs;
		
		private EntitySet<TvcStagedLoadMeasure> _TvcStagedLoadMeasures;
		
		private EntitySet<LinkNote> _LinkNotes;
		
		private EntityRef<Substation> _Substation;
		
		private EntityRef<TvcFacilityStage> _TvcFacilityStage;
		
		private EntityRef<TvcFacilityStatuse> _TvcFacilityStatuse;
		
		private EntityRef<TvcFacilityType> _TvcFacilityType;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnFacilityIdChanging(System.Nullable<int> value);
    partial void OnFacilityIdChanged();
    partial void OnStatusIdChanging(int value);
    partial void OnStatusIdChanged();
    partial void OnStageIdChanging(int value);
    partial void OnStageIdChanged();
    partial void OnTypeIdChanging(int value);
    partial void OnTypeIdChanged();
    partial void OnKiloVoltChanging(System.Nullable<decimal> value);
    partial void OnKiloVoltChanged();
    partial void OnLineNumberChanging(string value);
    partial void OnLineNumberChanged();
    partial void OnPowerFactorChanging(System.Nullable<decimal> value);
    partial void OnPowerFactorChanged();
    partial void OnLoadFactorChanging(System.Nullable<decimal> value);
    partial void OnLoadFactorChanged();
    partial void OnProbOfConnectionChanging(System.Nullable<decimal> value);
    partial void OnProbOfConnectionChanged();
    partial void OnRateChanging(string value);
    partial void OnRateChanged();
    partial void OnLatitudeChanging(System.Nullable<decimal> value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(System.Nullable<decimal> value);
    partial void OnLongitudeChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnDateNominatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateNominatedChanged();
    partial void OnIsOnSiteGenerationChanging(System.Nullable<bool> value);
    partial void OnIsOnSiteGenerationChanged();
    partial void OnIsIppChanging(System.Nullable<bool> value);
    partial void OnIsIppChanged();
    partial void OnEpaCodeChanging(string value);
    partial void OnEpaCodeChanged();
    partial void OnFacilityCodeChanging(string value);
    partial void OnFacilityCodeChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    #endregion
		
		public TransmissionVoltageCustomer()
		{
			this._LinkTsrTvcs = new EntitySet<LinkTsrTvc>(new Action<LinkTsrTvc>(this.attach_LinkTsrTvcs), new Action<LinkTsrTvc>(this.detach_LinkTsrTvcs));
			this._TvcStagedLoadMeasures = new EntitySet<TvcStagedLoadMeasure>(new Action<TvcStagedLoadMeasure>(this.attach_TvcStagedLoadMeasures), new Action<TvcStagedLoadMeasure>(this.detach_TvcStagedLoadMeasures));
			this._LinkNotes = new EntitySet<LinkNote>(new Action<LinkNote>(this.attach_LinkNotes), new Action<LinkNote>(this.detach_LinkNotes));
			this._Substation = default(EntityRef<Substation>);
			this._TvcFacilityStage = default(EntityRef<TvcFacilityStage>);
			this._TvcFacilityStatuse = default(EntityRef<TvcFacilityStatuse>);
			this._TvcFacilityType = default(EntityRef<TvcFacilityType>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNumber", DbType="NVarChar(255)")]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int")]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacilityId", DbType="Int")]
		public System.Nullable<int> FacilityId
		{
			get
			{
				return this._FacilityId;
			}
			set
			{
				if ((this._FacilityId != value))
				{
					if (this._Substation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFacilityIdChanging(value);
					this.SendPropertyChanging();
					this._FacilityId = value;
					this.SendPropertyChanged("FacilityId");
					this.OnFacilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusId", DbType="Int NOT NULL")]
		public int StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					if (this._TvcFacilityStatuse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StageId", DbType="Int NOT NULL")]
		public int StageId
		{
			get
			{
				return this._StageId;
			}
			set
			{
				if ((this._StageId != value))
				{
					if (this._TvcFacilityStage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStageIdChanging(value);
					this.SendPropertyChanging();
					this._StageId = value;
					this.SendPropertyChanged("StageId");
					this.OnStageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", DbType="Int NOT NULL")]
		public int TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					if (this._TvcFacilityType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KiloVolt", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> KiloVolt
		{
			get
			{
				return this._KiloVolt;
			}
			set
			{
				if ((this._KiloVolt != value))
				{
					this.OnKiloVoltChanging(value);
					this.SendPropertyChanging();
					this._KiloVolt = value;
					this.SendPropertyChanged("KiloVolt");
					this.OnKiloVoltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineNumber", DbType="NVarChar(50)")]
		public string LineNumber
		{
			get
			{
				return this._LineNumber;
			}
			set
			{
				if ((this._LineNumber != value))
				{
					this.OnLineNumberChanging(value);
					this.SendPropertyChanging();
					this._LineNumber = value;
					this.SendPropertyChanged("LineNumber");
					this.OnLineNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PowerFactor", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> PowerFactor
		{
			get
			{
				return this._PowerFactor;
			}
			set
			{
				if ((this._PowerFactor != value))
				{
					this.OnPowerFactorChanging(value);
					this.SendPropertyChanging();
					this._PowerFactor = value;
					this.SendPropertyChanged("PowerFactor");
					this.OnPowerFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadFactor", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> LoadFactor
		{
			get
			{
				return this._LoadFactor;
			}
			set
			{
				if ((this._LoadFactor != value))
				{
					this.OnLoadFactorChanging(value);
					this.SendPropertyChanging();
					this._LoadFactor = value;
					this.SendPropertyChanged("LoadFactor");
					this.OnLoadFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProbOfConnection", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> ProbOfConnection
		{
			get
			{
				return this._ProbOfConnection;
			}
			set
			{
				if ((this._ProbOfConnection != value))
				{
					this.OnProbOfConnectionChanging(value);
					this.SendPropertyChanging();
					this._ProbOfConnection = value;
					this.SendPropertyChanged("ProbOfConnection");
					this.OnProbOfConnectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="NVarChar(50)")]
		public string Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateNominated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateNominated
		{
			get
			{
				return this._DateNominated;
			}
			set
			{
				if ((this._DateNominated != value))
				{
					this.OnDateNominatedChanging(value);
					this.SendPropertyChanging();
					this._DateNominated = value;
					this.SendPropertyChanged("DateNominated");
					this.OnDateNominatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOnSiteGeneration", DbType="Bit")]
		public System.Nullable<bool> IsOnSiteGeneration
		{
			get
			{
				return this._IsOnSiteGeneration;
			}
			set
			{
				if ((this._IsOnSiteGeneration != value))
				{
					this.OnIsOnSiteGenerationChanging(value);
					this.SendPropertyChanging();
					this._IsOnSiteGeneration = value;
					this.SendPropertyChanged("IsOnSiteGeneration");
					this.OnIsOnSiteGenerationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsIpp", DbType="Bit")]
		public System.Nullable<bool> IsIpp
		{
			get
			{
				return this._IsIpp;
			}
			set
			{
				if ((this._IsIpp != value))
				{
					this.OnIsIppChanging(value);
					this.SendPropertyChanging();
					this._IsIpp = value;
					this.SendPropertyChanged("IsIpp");
					this.OnIsIppChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EpaCode", DbType="NVarChar(255)")]
		public string EpaCode
		{
			get
			{
				return this._EpaCode;
			}
			set
			{
				if ((this._EpaCode != value))
				{
					this.OnEpaCodeChanging(value);
					this.SendPropertyChanging();
					this._EpaCode = value;
					this.SendPropertyChanged("EpaCode");
					this.OnEpaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacilityCode", DbType="NVarChar(10)")]
		public string FacilityCode
		{
			get
			{
				return this._FacilityCode;
			}
			set
			{
				if ((this._FacilityCode != value))
				{
					this.OnFacilityCodeChanging(value);
					this.SendPropertyChanging();
					this._FacilityCode = value;
					this.SendPropertyChanged("FacilityCode");
					this.OnFacilityCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="NVarChar(MAX)")]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionVoltageCustomer_LinkTsrTvc", Storage="_LinkTsrTvcs", ThisKey="Id", OtherKey="TvcId")]
		public EntitySet<LinkTsrTvc> LinkTsrTvcs
		{
			get
			{
				return this._LinkTsrTvcs;
			}
			set
			{
				this._LinkTsrTvcs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionVoltageCustomer_TvcStagedLoadMeasure", Storage="_TvcStagedLoadMeasures", ThisKey="Id", OtherKey="TvcId")]
		public EntitySet<TvcStagedLoadMeasure> TvcStagedLoadMeasures
		{
			get
			{
				return this._TvcStagedLoadMeasures;
			}
			set
			{
				this._TvcStagedLoadMeasures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionVoltageCustomer_LinkNote", Storage="_LinkNotes", ThisKey="Id", OtherKey="TransmissionVoltageCustomerId")]
		public EntitySet<LinkNote> LinkNotes
		{
			get
			{
				return this._LinkNotes;
			}
			set
			{
				this._LinkNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_TransmissionVoltageCustomer", Storage="_Substation", ThisKey="FacilityId", OtherKey="Id", IsForeignKey=true)]
		public Substation Substation
		{
			get
			{
				return this._Substation.Entity;
			}
			set
			{
				Substation previousValue = this._Substation.Entity;
				if (((previousValue != value) 
							|| (this._Substation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Substation.Entity = null;
						previousValue.TransmissionVoltageCustomers.Remove(this);
					}
					this._Substation.Entity = value;
					if ((value != null))
					{
						value.TransmissionVoltageCustomers.Add(this);
						this._FacilityId = value.Id;
					}
					else
					{
						this._FacilityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Substation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TvcFacilityStage_TransmissionVoltageCustomer", Storage="_TvcFacilityStage", ThisKey="StageId", OtherKey="Id", IsForeignKey=true)]
		public TvcFacilityStage TvcFacilityStage
		{
			get
			{
				return this._TvcFacilityStage.Entity;
			}
			set
			{
				TvcFacilityStage previousValue = this._TvcFacilityStage.Entity;
				if (((previousValue != value) 
							|| (this._TvcFacilityStage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TvcFacilityStage.Entity = null;
						previousValue.TransmissionVoltageCustomers.Remove(this);
					}
					this._TvcFacilityStage.Entity = value;
					if ((value != null))
					{
						value.TransmissionVoltageCustomers.Add(this);
						this._StageId = value.Id;
					}
					else
					{
						this._StageId = default(int);
					}
					this.SendPropertyChanged("TvcFacilityStage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TvcFacilityStatuse_TransmissionVoltageCustomer", Storage="_TvcFacilityStatuse", ThisKey="StatusId", OtherKey="Id", IsForeignKey=true)]
		public TvcFacilityStatuse TvcFacilityStatuse
		{
			get
			{
				return this._TvcFacilityStatuse.Entity;
			}
			set
			{
				TvcFacilityStatuse previousValue = this._TvcFacilityStatuse.Entity;
				if (((previousValue != value) 
							|| (this._TvcFacilityStatuse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TvcFacilityStatuse.Entity = null;
						previousValue.TransmissionVoltageCustomers.Remove(this);
					}
					this._TvcFacilityStatuse.Entity = value;
					if ((value != null))
					{
						value.TransmissionVoltageCustomers.Add(this);
						this._StatusId = value.Id;
					}
					else
					{
						this._StatusId = default(int);
					}
					this.SendPropertyChanged("TvcFacilityStatuse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TvcFacilityType_TransmissionVoltageCustomer", Storage="_TvcFacilityType", ThisKey="TypeId", OtherKey="Id", IsForeignKey=true)]
		public TvcFacilityType TvcFacilityType
		{
			get
			{
				return this._TvcFacilityType.Entity;
			}
			set
			{
				TvcFacilityType previousValue = this._TvcFacilityType.Entity;
				if (((previousValue != value) 
							|| (this._TvcFacilityType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TvcFacilityType.Entity = null;
						previousValue.TransmissionVoltageCustomers.Remove(this);
					}
					this._TvcFacilityType.Entity = value;
					if ((value != null))
					{
						value.TransmissionVoltageCustomers.Add(this);
						this._TypeId = value.Id;
					}
					else
					{
						this._TypeId = default(int);
					}
					this.SendPropertyChanged("TvcFacilityType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_TransmissionVoltageCustomer", Storage="_Customer", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.TransmissionVoltageCustomers.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.TransmissionVoltageCustomers.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LinkTsrTvcs(LinkTsrTvc entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionVoltageCustomer = this;
		}
		
		private void detach_LinkTsrTvcs(LinkTsrTvc entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionVoltageCustomer = null;
		}
		
		private void attach_TvcStagedLoadMeasures(TvcStagedLoadMeasure entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionVoltageCustomer = this;
		}
		
		private void detach_TvcStagedLoadMeasures(TvcStagedLoadMeasure entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionVoltageCustomer = null;
		}
		
		private void attach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionVoltageCustomer = this;
		}
		
		private void detach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.TransmissionVoltageCustomer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.FacilityTempCodes")]
	public partial class FacilityTempCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Code;
		
		private int _FacilityCodeTypeId;
		
		private bool _IsActive;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private EntityRef<FacilityCodeType> _FacilityCodeType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnFacilityCodeTypeIdChanging(int value);
    partial void OnFacilityCodeTypeIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    #endregion
		
		public FacilityTempCode()
		{
			this._FacilityCodeType = default(EntityRef<FacilityCodeType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacilityCodeTypeId", DbType="Int NOT NULL")]
		public int FacilityCodeTypeId
		{
			get
			{
				return this._FacilityCodeTypeId;
			}
			set
			{
				if ((this._FacilityCodeTypeId != value))
				{
					if (this._FacilityCodeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFacilityCodeTypeIdChanging(value);
					this.SendPropertyChanging();
					this._FacilityCodeTypeId = value;
					this.SendPropertyChanged("FacilityCodeTypeId");
					this.OnFacilityCodeTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FacilityCodeType_FacilityTempCode", Storage="_FacilityCodeType", ThisKey="FacilityCodeTypeId", OtherKey="Id", IsForeignKey=true)]
		public FacilityCodeType FacilityCodeType
		{
			get
			{
				return this._FacilityCodeType.Entity;
			}
			set
			{
				FacilityCodeType previousValue = this._FacilityCodeType.Entity;
				if (((previousValue != value) 
							|| (this._FacilityCodeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FacilityCodeType.Entity = null;
						previousValue.FacilityTempCodes.Remove(this);
					}
					this._FacilityCodeType.Entity = value;
					if ((value != null))
					{
						value.FacilityTempCodes.Add(this);
						this._FacilityCodeTypeId = value.Id;
					}
					else
					{
						this._FacilityCodeTypeId = default(int);
					}
					this.SendPropertyChanged("FacilityCodeType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.FacilityCodeTypes")]
	public partial class FacilityCodeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private int _DepartmentId;
		
		private string _Prefix;
		
		private System.Nullable<int> _MaxDigits;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private EntitySet<FacilityTempCode> _FacilityTempCodes;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnPrefixChanging(string value);
    partial void OnPrefixChanged();
    partial void OnMaxDigitsChanging(System.Nullable<int> value);
    partial void OnMaxDigitsChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    #endregion
		
		public FacilityCodeType()
		{
			this._FacilityTempCodes = new EntitySet<FacilityTempCode>(new Action<FacilityTempCode>(this.attach_FacilityTempCodes), new Action<FacilityTempCode>(this.detach_FacilityTempCodes));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="Int NOT NULL")]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prefix", DbType="NVarChar(50)")]
		public string Prefix
		{
			get
			{
				return this._Prefix;
			}
			set
			{
				if ((this._Prefix != value))
				{
					this.OnPrefixChanging(value);
					this.SendPropertyChanging();
					this._Prefix = value;
					this.SendPropertyChanged("Prefix");
					this.OnPrefixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxDigits", DbType="Int")]
		public System.Nullable<int> MaxDigits
		{
			get
			{
				return this._MaxDigits;
			}
			set
			{
				if ((this._MaxDigits != value))
				{
					this.OnMaxDigitsChanging(value);
					this.SendPropertyChanging();
					this._MaxDigits = value;
					this.SendPropertyChanged("MaxDigits");
					this.OnMaxDigitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FacilityCodeType_FacilityTempCode", Storage="_FacilityTempCodes", ThisKey="Id", OtherKey="FacilityCodeTypeId")]
		public EntitySet<FacilityTempCode> FacilityTempCodes
		{
			get
			{
				return this._FacilityTempCodes;
			}
			set
			{
				this._FacilityTempCodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_FacilityCodeType", Storage="_Department", ThisKey="DepartmentId", OtherKey="Id", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.FacilityCodeTypes.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.FacilityCodeTypes.Add(this);
						this._DepartmentId = value.Id;
					}
					else
					{
						this._DepartmentId = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FacilityTempCodes(FacilityTempCode entity)
		{
			this.SendPropertyChanging();
			entity.FacilityCodeType = this;
		}
		
		private void detach_FacilityTempCodes(FacilityTempCode entity)
		{
			this.SendPropertyChanging();
			entity.FacilityCodeType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.Departments")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private string _ContactName;
		
		private System.Nullable<int> _ContactNumber;
		
		private EntitySet<FacilityCodeType> _FacilityCodeTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnContactNumberChanging(System.Nullable<int> value);
    partial void OnContactNumberChanged();
    #endregion
		
		public Department()
		{
			this._FacilityCodeTypes = new EntitySet<FacilityCodeType>(new Action<FacilityCodeType>(this.attach_FacilityCodeTypes), new Action<FacilityCodeType>(this.detach_FacilityCodeTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactName", DbType="NVarChar(255)")]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="Int")]
		public System.Nullable<int> ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this.OnContactNumberChanging(value);
					this.SendPropertyChanging();
					this._ContactNumber = value;
					this.SendPropertyChanged("ContactNumber");
					this.OnContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_FacilityCodeType", Storage="_FacilityCodeTypes", ThisKey="Id", OtherKey="DepartmentId")]
		public EntitySet<FacilityCodeType> FacilityCodeTypes
		{
			get
			{
				return this._FacilityCodeTypes;
			}
			set
			{
				this._FacilityCodeTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FacilityCodeTypes(FacilityCodeType entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_FacilityCodeTypes(FacilityCodeType entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.Customers")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private EntitySet<TransmissionVoltageCustomer> _TransmissionVoltageCustomers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    #endregion
		
		public Customer()
		{
			this._TransmissionVoltageCustomers = new EntitySet<TransmissionVoltageCustomer>(new Action<TransmissionVoltageCustomer>(this.attach_TransmissionVoltageCustomers), new Action<TransmissionVoltageCustomer>(this.detach_TransmissionVoltageCustomers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_TransmissionVoltageCustomer", Storage="_TransmissionVoltageCustomers", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<TransmissionVoltageCustomer> TransmissionVoltageCustomers
		{
			get
			{
				return this._TransmissionVoltageCustomers;
			}
			set
			{
				this._TransmissionVoltageCustomers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransmissionVoltageCustomers(TransmissionVoltageCustomer entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_TransmissionVoltageCustomers(TransmissionVoltageCustomer entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="link.LinkNotes")]
	public partial class LinkNote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _NoteId;
		
		private System.Nullable<int> _SubstationId;
		
		private System.Nullable<int> _SynchronousMachineId;
		
		private System.Nullable<int> _GeneratingUnitId;
		
		private System.Nullable<int> _GeneratorFactorId;
		
		private System.Nullable<int> _NitsReportId;
		
		private System.Nullable<int> _LineId;
		
		private System.Nullable<int> _ElectricityPurchaseAgreementId;
		
		private System.Nullable<int> _GeneratorAttributesId;
		
		private System.Nullable<int> _LoadId;
		
		private System.Nullable<int> _ProjectId;
		
		private System.Nullable<int> _MeterId;
		
		private System.Nullable<int> _ResourceBundleId;
		
		private System.Nullable<int> _TsrId;
		
		private System.Nullable<int> _TransmissionVoltageCustomerId;
		
		private EntityRef<ElectricityPurchaseAgreement> _ElectricityPurchaseAgreement;
		
		private EntityRef<GeneratingUnit> _GeneratingUnit;
		
		private EntityRef<GeneratorAttribute> _GeneratorAttribute;
		
		private EntityRef<Line> _Line;
		
		private EntityRef<Load> _Load;
		
		private EntityRef<Meter> _Meter;
		
		private EntityRef<Note> _Note;
		
		private EntityRef<ResourceBundle> _ResourceBundle;
		
		private EntityRef<Substation> _Substation;
		
		private EntityRef<TransmissionServiceRequest> _TransmissionServiceRequest;
		
		private EntityRef<TransmissionVoltageCustomer> _TransmissionVoltageCustomer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNoteIdChanging(int value);
    partial void OnNoteIdChanged();
    partial void OnSubstationIdChanging(System.Nullable<int> value);
    partial void OnSubstationIdChanged();
    partial void OnSynchronousMachineIdChanging(System.Nullable<int> value);
    partial void OnSynchronousMachineIdChanged();
    partial void OnGeneratingUnitIdChanging(System.Nullable<int> value);
    partial void OnGeneratingUnitIdChanged();
    partial void OnGeneratorFactorIdChanging(System.Nullable<int> value);
    partial void OnGeneratorFactorIdChanged();
    partial void OnNitsReportIdChanging(System.Nullable<int> value);
    partial void OnNitsReportIdChanged();
    partial void OnLineIdChanging(System.Nullable<int> value);
    partial void OnLineIdChanged();
    partial void OnElectricityPurchaseAgreementIdChanging(System.Nullable<int> value);
    partial void OnElectricityPurchaseAgreementIdChanged();
    partial void OnGeneratorAttributesIdChanging(System.Nullable<int> value);
    partial void OnGeneratorAttributesIdChanged();
    partial void OnLoadIdChanging(System.Nullable<int> value);
    partial void OnLoadIdChanged();
    partial void OnProjectIdChanging(System.Nullable<int> value);
    partial void OnProjectIdChanged();
    partial void OnMeterIdChanging(System.Nullable<int> value);
    partial void OnMeterIdChanged();
    partial void OnResourceBundleIdChanging(System.Nullable<int> value);
    partial void OnResourceBundleIdChanged();
    partial void OnTsrIdChanging(System.Nullable<int> value);
    partial void OnTsrIdChanged();
    partial void OnTransmissionVoltageCustomerIdChanging(System.Nullable<int> value);
    partial void OnTransmissionVoltageCustomerIdChanged();
    #endregion
		
		public LinkNote()
		{
			this._ElectricityPurchaseAgreement = default(EntityRef<ElectricityPurchaseAgreement>);
			this._GeneratingUnit = default(EntityRef<GeneratingUnit>);
			this._GeneratorAttribute = default(EntityRef<GeneratorAttribute>);
			this._Line = default(EntityRef<Line>);
			this._Load = default(EntityRef<Load>);
			this._Meter = default(EntityRef<Meter>);
			this._Note = default(EntityRef<Note>);
			this._ResourceBundle = default(EntityRef<ResourceBundle>);
			this._Substation = default(EntityRef<Substation>);
			this._TransmissionServiceRequest = default(EntityRef<TransmissionServiceRequest>);
			this._TransmissionVoltageCustomer = default(EntityRef<TransmissionVoltageCustomer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoteId", DbType="Int NOT NULL")]
		public int NoteId
		{
			get
			{
				return this._NoteId;
			}
			set
			{
				if ((this._NoteId != value))
				{
					if (this._Note.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNoteIdChanging(value);
					this.SendPropertyChanging();
					this._NoteId = value;
					this.SendPropertyChanged("NoteId");
					this.OnNoteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubstationId", DbType="Int")]
		public System.Nullable<int> SubstationId
		{
			get
			{
				return this._SubstationId;
			}
			set
			{
				if ((this._SubstationId != value))
				{
					if (this._Substation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstationIdChanging(value);
					this.SendPropertyChanging();
					this._SubstationId = value;
					this.SendPropertyChanged("SubstationId");
					this.OnSubstationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SynchronousMachineId", DbType="Int")]
		public System.Nullable<int> SynchronousMachineId
		{
			get
			{
				return this._SynchronousMachineId;
			}
			set
			{
				if ((this._SynchronousMachineId != value))
				{
					this.OnSynchronousMachineIdChanging(value);
					this.SendPropertyChanging();
					this._SynchronousMachineId = value;
					this.SendPropertyChanged("SynchronousMachineId");
					this.OnSynchronousMachineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratingUnitId", DbType="Int")]
		public System.Nullable<int> GeneratingUnitId
		{
			get
			{
				return this._GeneratingUnitId;
			}
			set
			{
				if ((this._GeneratingUnitId != value))
				{
					if (this._GeneratingUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeneratingUnitIdChanging(value);
					this.SendPropertyChanging();
					this._GeneratingUnitId = value;
					this.SendPropertyChanged("GeneratingUnitId");
					this.OnGeneratingUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratorFactorId", DbType="Int")]
		public System.Nullable<int> GeneratorFactorId
		{
			get
			{
				return this._GeneratorFactorId;
			}
			set
			{
				if ((this._GeneratorFactorId != value))
				{
					this.OnGeneratorFactorIdChanging(value);
					this.SendPropertyChanging();
					this._GeneratorFactorId = value;
					this.SendPropertyChanged("GeneratorFactorId");
					this.OnGeneratorFactorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NitsReportId", DbType="Int")]
		public System.Nullable<int> NitsReportId
		{
			get
			{
				return this._NitsReportId;
			}
			set
			{
				if ((this._NitsReportId != value))
				{
					this.OnNitsReportIdChanging(value);
					this.SendPropertyChanging();
					this._NitsReportId = value;
					this.SendPropertyChanged("NitsReportId");
					this.OnNitsReportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineId", DbType="Int")]
		public System.Nullable<int> LineId
		{
			get
			{
				return this._LineId;
			}
			set
			{
				if ((this._LineId != value))
				{
					if (this._Line.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLineIdChanging(value);
					this.SendPropertyChanging();
					this._LineId = value;
					this.SendPropertyChanged("LineId");
					this.OnLineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectricityPurchaseAgreementId", DbType="Int")]
		public System.Nullable<int> ElectricityPurchaseAgreementId
		{
			get
			{
				return this._ElectricityPurchaseAgreementId;
			}
			set
			{
				if ((this._ElectricityPurchaseAgreementId != value))
				{
					if (this._ElectricityPurchaseAgreement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnElectricityPurchaseAgreementIdChanging(value);
					this.SendPropertyChanging();
					this._ElectricityPurchaseAgreementId = value;
					this.SendPropertyChanged("ElectricityPurchaseAgreementId");
					this.OnElectricityPurchaseAgreementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratorAttributesId", DbType="Int")]
		public System.Nullable<int> GeneratorAttributesId
		{
			get
			{
				return this._GeneratorAttributesId;
			}
			set
			{
				if ((this._GeneratorAttributesId != value))
				{
					if (this._GeneratorAttribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeneratorAttributesIdChanging(value);
					this.SendPropertyChanging();
					this._GeneratorAttributesId = value;
					this.SendPropertyChanged("GeneratorAttributesId");
					this.OnGeneratorAttributesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadId", DbType="Int")]
		public System.Nullable<int> LoadId
		{
			get
			{
				return this._LoadId;
			}
			set
			{
				if ((this._LoadId != value))
				{
					if (this._Load.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoadIdChanging(value);
					this.SendPropertyChanging();
					this._LoadId = value;
					this.SendPropertyChanged("LoadId");
					this.OnLoadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="Int")]
		public System.Nullable<int> ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterId", DbType="Int")]
		public System.Nullable<int> MeterId
		{
			get
			{
				return this._MeterId;
			}
			set
			{
				if ((this._MeterId != value))
				{
					if (this._Meter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeterIdChanging(value);
					this.SendPropertyChanging();
					this._MeterId = value;
					this.SendPropertyChanged("MeterId");
					this.OnMeterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceBundleId", DbType="Int")]
		public System.Nullable<int> ResourceBundleId
		{
			get
			{
				return this._ResourceBundleId;
			}
			set
			{
				if ((this._ResourceBundleId != value))
				{
					if (this._ResourceBundle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceBundleIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceBundleId = value;
					this.SendPropertyChanged("ResourceBundleId");
					this.OnResourceBundleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TsrId", DbType="Int")]
		public System.Nullable<int> TsrId
		{
			get
			{
				return this._TsrId;
			}
			set
			{
				if ((this._TsrId != value))
				{
					if (this._TransmissionServiceRequest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTsrIdChanging(value);
					this.SendPropertyChanging();
					this._TsrId = value;
					this.SendPropertyChanged("TsrId");
					this.OnTsrIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionVoltageCustomerId", DbType="Int")]
		public System.Nullable<int> TransmissionVoltageCustomerId
		{
			get
			{
				return this._TransmissionVoltageCustomerId;
			}
			set
			{
				if ((this._TransmissionVoltageCustomerId != value))
				{
					if (this._TransmissionVoltageCustomer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransmissionVoltageCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._TransmissionVoltageCustomerId = value;
					this.SendPropertyChanged("TransmissionVoltageCustomerId");
					this.OnTransmissionVoltageCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElectricityPurchaseAgreement_LinkNote", Storage="_ElectricityPurchaseAgreement", ThisKey="ElectricityPurchaseAgreementId", OtherKey="Id", IsForeignKey=true)]
		public ElectricityPurchaseAgreement ElectricityPurchaseAgreement
		{
			get
			{
				return this._ElectricityPurchaseAgreement.Entity;
			}
			set
			{
				ElectricityPurchaseAgreement previousValue = this._ElectricityPurchaseAgreement.Entity;
				if (((previousValue != value) 
							|| (this._ElectricityPurchaseAgreement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ElectricityPurchaseAgreement.Entity = null;
						previousValue.LinkNotes.Remove(this);
					}
					this._ElectricityPurchaseAgreement.Entity = value;
					if ((value != null))
					{
						value.LinkNotes.Add(this);
						this._ElectricityPurchaseAgreementId = value.Id;
					}
					else
					{
						this._ElectricityPurchaseAgreementId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ElectricityPurchaseAgreement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneratingUnit_LinkNote", Storage="_GeneratingUnit", ThisKey="GeneratingUnitId", OtherKey="Id", IsForeignKey=true)]
		public GeneratingUnit GeneratingUnit
		{
			get
			{
				return this._GeneratingUnit.Entity;
			}
			set
			{
				GeneratingUnit previousValue = this._GeneratingUnit.Entity;
				if (((previousValue != value) 
							|| (this._GeneratingUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneratingUnit.Entity = null;
						previousValue.LinkNotes.Remove(this);
					}
					this._GeneratingUnit.Entity = value;
					if ((value != null))
					{
						value.LinkNotes.Add(this);
						this._GeneratingUnitId = value.Id;
					}
					else
					{
						this._GeneratingUnitId = default(Nullable<int>);
					}
					this.SendPropertyChanged("GeneratingUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneratorAttribute_LinkNote", Storage="_GeneratorAttribute", ThisKey="GeneratorAttributesId", OtherKey="Id", IsForeignKey=true)]
		public GeneratorAttribute GeneratorAttribute
		{
			get
			{
				return this._GeneratorAttribute.Entity;
			}
			set
			{
				GeneratorAttribute previousValue = this._GeneratorAttribute.Entity;
				if (((previousValue != value) 
							|| (this._GeneratorAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneratorAttribute.Entity = null;
						previousValue.LinkNotes.Remove(this);
					}
					this._GeneratorAttribute.Entity = value;
					if ((value != null))
					{
						value.LinkNotes.Add(this);
						this._GeneratorAttributesId = value.Id;
					}
					else
					{
						this._GeneratorAttributesId = default(Nullable<int>);
					}
					this.SendPropertyChanged("GeneratorAttribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Line_LinkNote", Storage="_Line", ThisKey="LineId", OtherKey="Id", IsForeignKey=true)]
		public Line Line
		{
			get
			{
				return this._Line.Entity;
			}
			set
			{
				Line previousValue = this._Line.Entity;
				if (((previousValue != value) 
							|| (this._Line.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Line.Entity = null;
						previousValue.LinkNotes.Remove(this);
					}
					this._Line.Entity = value;
					if ((value != null))
					{
						value.LinkNotes.Add(this);
						this._LineId = value.Id;
					}
					else
					{
						this._LineId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Line");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Load_LinkNote", Storage="_Load", ThisKey="LoadId", OtherKey="Id", IsForeignKey=true)]
		public Load Load
		{
			get
			{
				return this._Load.Entity;
			}
			set
			{
				Load previousValue = this._Load.Entity;
				if (((previousValue != value) 
							|| (this._Load.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Load.Entity = null;
						previousValue.LinkNotes.Remove(this);
					}
					this._Load.Entity = value;
					if ((value != null))
					{
						value.LinkNotes.Add(this);
						this._LoadId = value.Id;
					}
					else
					{
						this._LoadId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Load");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_LinkNote", Storage="_Meter", ThisKey="MeterId", OtherKey="Id", IsForeignKey=true)]
		public Meter Meter
		{
			get
			{
				return this._Meter.Entity;
			}
			set
			{
				Meter previousValue = this._Meter.Entity;
				if (((previousValue != value) 
							|| (this._Meter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meter.Entity = null;
						previousValue.LinkNotes.Remove(this);
					}
					this._Meter.Entity = value;
					if ((value != null))
					{
						value.LinkNotes.Add(this);
						this._MeterId = value.Id;
					}
					else
					{
						this._MeterId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Meter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Note_LinkNote", Storage="_Note", ThisKey="NoteId", OtherKey="Id", IsForeignKey=true)]
		public Note Note
		{
			get
			{
				return this._Note.Entity;
			}
			set
			{
				Note previousValue = this._Note.Entity;
				if (((previousValue != value) 
							|| (this._Note.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Note.Entity = null;
						previousValue.LinkNotes.Remove(this);
					}
					this._Note.Entity = value;
					if ((value != null))
					{
						value.LinkNotes.Add(this);
						this._NoteId = value.Id;
					}
					else
					{
						this._NoteId = default(int);
					}
					this.SendPropertyChanged("Note");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceBundle_LinkNote", Storage="_ResourceBundle", ThisKey="ResourceBundleId", OtherKey="Id", IsForeignKey=true)]
		public ResourceBundle ResourceBundle
		{
			get
			{
				return this._ResourceBundle.Entity;
			}
			set
			{
				ResourceBundle previousValue = this._ResourceBundle.Entity;
				if (((previousValue != value) 
							|| (this._ResourceBundle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceBundle.Entity = null;
						previousValue.LinkNotes.Remove(this);
					}
					this._ResourceBundle.Entity = value;
					if ((value != null))
					{
						value.LinkNotes.Add(this);
						this._ResourceBundleId = value.Id;
					}
					else
					{
						this._ResourceBundleId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ResourceBundle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_LinkNote", Storage="_Substation", ThisKey="SubstationId", OtherKey="Id", IsForeignKey=true)]
		public Substation Substation
		{
			get
			{
				return this._Substation.Entity;
			}
			set
			{
				Substation previousValue = this._Substation.Entity;
				if (((previousValue != value) 
							|| (this._Substation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Substation.Entity = null;
						previousValue.LinkNotes.Remove(this);
					}
					this._Substation.Entity = value;
					if ((value != null))
					{
						value.LinkNotes.Add(this);
						this._SubstationId = value.Id;
					}
					else
					{
						this._SubstationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Substation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionServiceRequest_LinkNote", Storage="_TransmissionServiceRequest", ThisKey="TsrId", OtherKey="Id", IsForeignKey=true)]
		public TransmissionServiceRequest TransmissionServiceRequest
		{
			get
			{
				return this._TransmissionServiceRequest.Entity;
			}
			set
			{
				TransmissionServiceRequest previousValue = this._TransmissionServiceRequest.Entity;
				if (((previousValue != value) 
							|| (this._TransmissionServiceRequest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransmissionServiceRequest.Entity = null;
						previousValue.LinkNotes.Remove(this);
					}
					this._TransmissionServiceRequest.Entity = value;
					if ((value != null))
					{
						value.LinkNotes.Add(this);
						this._TsrId = value.Id;
					}
					else
					{
						this._TsrId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TransmissionServiceRequest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransmissionVoltageCustomer_LinkNote", Storage="_TransmissionVoltageCustomer", ThisKey="TransmissionVoltageCustomerId", OtherKey="Id", IsForeignKey=true)]
		public TransmissionVoltageCustomer TransmissionVoltageCustomer
		{
			get
			{
				return this._TransmissionVoltageCustomer.Entity;
			}
			set
			{
				TransmissionVoltageCustomer previousValue = this._TransmissionVoltageCustomer.Entity;
				if (((previousValue != value) 
							|| (this._TransmissionVoltageCustomer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransmissionVoltageCustomer.Entity = null;
						previousValue.LinkNotes.Remove(this);
					}
					this._TransmissionVoltageCustomer.Entity = value;
					if ((value != null))
					{
						value.LinkNotes.Add(this);
						this._TransmissionVoltageCustomerId = value.Id;
					}
					else
					{
						this._TransmissionVoltageCustomerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TransmissionVoltageCustomer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.LoadAttributes")]
	public partial class LoadAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _OriginalId;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateEnd;
		
		private System.Nullable<System.DateTime> _DateReplaced;
		
		private System.Nullable<System.DateTime> _DateEffective;
		
		private System.Nullable<System.DateTime> _InServiceStartDate;
		
		private System.Nullable<System.DateTime> _InServiceEndDate;
		
		private System.Nullable<decimal> _PowerFactor;
		
		private System.Nullable<decimal> _LoadMw;
		
		private int _LoadId;
		
		private System.Nullable<int> _ResourcePlanId;
		
		private System.Nullable<decimal> _LoadGrossSummerPeak;
		
		private System.Nullable<decimal> _LoadGrossSummerMin;
		
		private System.Nullable<decimal> _LoadGrossWinterPeak;
		
		private System.Nullable<decimal> _LoadGrossWinterMin;
		
		private System.Nullable<int> _Probability;
		
		private System.Nullable<decimal> _ESALoadDemand;
		
		private System.Nullable<int> _ProjectPhaseId;
		
		private System.Nullable<decimal> _LoadGbl;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private EntityRef<Load> _Load;
		
		private EntityRef<ResourcePlan> _ResourcePlan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOriginalIdChanging(System.Nullable<int> value);
    partial void OnOriginalIdChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateEndChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEndChanged();
    partial void OnDateReplacedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateReplacedChanged();
    partial void OnDateEffectiveChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEffectiveChanged();
    partial void OnInServiceStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInServiceStartDateChanged();
    partial void OnInServiceEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInServiceEndDateChanged();
    partial void OnPowerFactorChanging(System.Nullable<decimal> value);
    partial void OnPowerFactorChanged();
    partial void OnLoadMwChanging(System.Nullable<decimal> value);
    partial void OnLoadMwChanged();
    partial void OnLoadIdChanging(int value);
    partial void OnLoadIdChanged();
    partial void OnResourcePlanIdChanging(System.Nullable<int> value);
    partial void OnResourcePlanIdChanged();
    partial void OnLoadGrossSummerPeakChanging(System.Nullable<decimal> value);
    partial void OnLoadGrossSummerPeakChanged();
    partial void OnLoadGrossSummerMinChanging(System.Nullable<decimal> value);
    partial void OnLoadGrossSummerMinChanged();
    partial void OnLoadGrossWinterPeakChanging(System.Nullable<decimal> value);
    partial void OnLoadGrossWinterPeakChanged();
    partial void OnLoadGrossWinterMinChanging(System.Nullable<decimal> value);
    partial void OnLoadGrossWinterMinChanged();
    partial void OnProbabilityChanging(System.Nullable<int> value);
    partial void OnProbabilityChanged();
    partial void OnESALoadDemandChanging(System.Nullable<decimal> value);
    partial void OnESALoadDemandChanged();
    partial void OnProjectPhaseIdChanging(System.Nullable<int> value);
    partial void OnProjectPhaseIdChanged();
    partial void OnLoadGblChanging(System.Nullable<decimal> value);
    partial void OnLoadGblChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    #endregion
		
		public LoadAttribute()
		{
			this._Load = default(EntityRef<Load>);
			this._ResourcePlan = default(EntityRef<ResourcePlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalId", DbType="Int")]
		public System.Nullable<int> OriginalId
		{
			get
			{
				return this._OriginalId;
			}
			set
			{
				if ((this._OriginalId != value))
				{
					this.OnOriginalIdChanging(value);
					this.SendPropertyChanging();
					this._OriginalId = value;
					this.SendPropertyChanged("OriginalId");
					this.OnOriginalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this.OnDateEndChanging(value);
					this.SendPropertyChanging();
					this._DateEnd = value;
					this.SendPropertyChanged("DateEnd");
					this.OnDateEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateReplaced", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateReplaced
		{
			get
			{
				return this._DateReplaced;
			}
			set
			{
				if ((this._DateReplaced != value))
				{
					this.OnDateReplacedChanging(value);
					this.SendPropertyChanging();
					this._DateReplaced = value;
					this.SendPropertyChanged("DateReplaced");
					this.OnDateReplacedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEffective", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateEffective
		{
			get
			{
				return this._DateEffective;
			}
			set
			{
				if ((this._DateEffective != value))
				{
					this.OnDateEffectiveChanging(value);
					this.SendPropertyChanging();
					this._DateEffective = value;
					this.SendPropertyChanged("DateEffective");
					this.OnDateEffectiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InServiceStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InServiceStartDate
		{
			get
			{
				return this._InServiceStartDate;
			}
			set
			{
				if ((this._InServiceStartDate != value))
				{
					this.OnInServiceStartDateChanging(value);
					this.SendPropertyChanging();
					this._InServiceStartDate = value;
					this.SendPropertyChanged("InServiceStartDate");
					this.OnInServiceStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InServiceEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InServiceEndDate
		{
			get
			{
				return this._InServiceEndDate;
			}
			set
			{
				if ((this._InServiceEndDate != value))
				{
					this.OnInServiceEndDateChanging(value);
					this.SendPropertyChanging();
					this._InServiceEndDate = value;
					this.SendPropertyChanged("InServiceEndDate");
					this.OnInServiceEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PowerFactor", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> PowerFactor
		{
			get
			{
				return this._PowerFactor;
			}
			set
			{
				if ((this._PowerFactor != value))
				{
					this.OnPowerFactorChanging(value);
					this.SendPropertyChanging();
					this._PowerFactor = value;
					this.SendPropertyChanged("PowerFactor");
					this.OnPowerFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadMw", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> LoadMw
		{
			get
			{
				return this._LoadMw;
			}
			set
			{
				if ((this._LoadMw != value))
				{
					this.OnLoadMwChanging(value);
					this.SendPropertyChanging();
					this._LoadMw = value;
					this.SendPropertyChanged("LoadMw");
					this.OnLoadMwChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadId", DbType="Int NOT NULL")]
		public int LoadId
		{
			get
			{
				return this._LoadId;
			}
			set
			{
				if ((this._LoadId != value))
				{
					if (this._Load.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoadIdChanging(value);
					this.SendPropertyChanging();
					this._LoadId = value;
					this.SendPropertyChanged("LoadId");
					this.OnLoadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourcePlanId", DbType="Int")]
		public System.Nullable<int> ResourcePlanId
		{
			get
			{
				return this._ResourcePlanId;
			}
			set
			{
				if ((this._ResourcePlanId != value))
				{
					if (this._ResourcePlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourcePlanIdChanging(value);
					this.SendPropertyChanging();
					this._ResourcePlanId = value;
					this.SendPropertyChanged("ResourcePlanId");
					this.OnResourcePlanIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadGrossSummerPeak", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> LoadGrossSummerPeak
		{
			get
			{
				return this._LoadGrossSummerPeak;
			}
			set
			{
				if ((this._LoadGrossSummerPeak != value))
				{
					this.OnLoadGrossSummerPeakChanging(value);
					this.SendPropertyChanging();
					this._LoadGrossSummerPeak = value;
					this.SendPropertyChanged("LoadGrossSummerPeak");
					this.OnLoadGrossSummerPeakChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadGrossSummerMin", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> LoadGrossSummerMin
		{
			get
			{
				return this._LoadGrossSummerMin;
			}
			set
			{
				if ((this._LoadGrossSummerMin != value))
				{
					this.OnLoadGrossSummerMinChanging(value);
					this.SendPropertyChanging();
					this._LoadGrossSummerMin = value;
					this.SendPropertyChanged("LoadGrossSummerMin");
					this.OnLoadGrossSummerMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadGrossWinterPeak", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> LoadGrossWinterPeak
		{
			get
			{
				return this._LoadGrossWinterPeak;
			}
			set
			{
				if ((this._LoadGrossWinterPeak != value))
				{
					this.OnLoadGrossWinterPeakChanging(value);
					this.SendPropertyChanging();
					this._LoadGrossWinterPeak = value;
					this.SendPropertyChanged("LoadGrossWinterPeak");
					this.OnLoadGrossWinterPeakChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadGrossWinterMin", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> LoadGrossWinterMin
		{
			get
			{
				return this._LoadGrossWinterMin;
			}
			set
			{
				if ((this._LoadGrossWinterMin != value))
				{
					this.OnLoadGrossWinterMinChanging(value);
					this.SendPropertyChanging();
					this._LoadGrossWinterMin = value;
					this.SendPropertyChanged("LoadGrossWinterMin");
					this.OnLoadGrossWinterMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Probability", DbType="Int")]
		public System.Nullable<int> Probability
		{
			get
			{
				return this._Probability;
			}
			set
			{
				if ((this._Probability != value))
				{
					this.OnProbabilityChanging(value);
					this.SendPropertyChanging();
					this._Probability = value;
					this.SendPropertyChanged("Probability");
					this.OnProbabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ESALoadDemand", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> ESALoadDemand
		{
			get
			{
				return this._ESALoadDemand;
			}
			set
			{
				if ((this._ESALoadDemand != value))
				{
					this.OnESALoadDemandChanging(value);
					this.SendPropertyChanging();
					this._ESALoadDemand = value;
					this.SendPropertyChanged("ESALoadDemand");
					this.OnESALoadDemandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectPhaseId", DbType="Int")]
		public System.Nullable<int> ProjectPhaseId
		{
			get
			{
				return this._ProjectPhaseId;
			}
			set
			{
				if ((this._ProjectPhaseId != value))
				{
					this.OnProjectPhaseIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectPhaseId = value;
					this.SendPropertyChanged("ProjectPhaseId");
					this.OnProjectPhaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadGbl", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> LoadGbl
		{
			get
			{
				return this._LoadGbl;
			}
			set
			{
				if ((this._LoadGbl != value))
				{
					this.OnLoadGblChanging(value);
					this.SendPropertyChanging();
					this._LoadGbl = value;
					this.SendPropertyChanged("LoadGbl");
					this.OnLoadGblChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Load_LoadAttribute", Storage="_Load", ThisKey="LoadId", OtherKey="Id", IsForeignKey=true)]
		public Load Load
		{
			get
			{
				return this._Load.Entity;
			}
			set
			{
				Load previousValue = this._Load.Entity;
				if (((previousValue != value) 
							|| (this._Load.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Load.Entity = null;
						previousValue.LoadAttributes.Remove(this);
					}
					this._Load.Entity = value;
					if ((value != null))
					{
						value.LoadAttributes.Add(this);
						this._LoadId = value.Id;
					}
					else
					{
						this._LoadId = default(int);
					}
					this.SendPropertyChanged("Load");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourcePlan_LoadAttribute", Storage="_ResourcePlan", ThisKey="ResourcePlanId", OtherKey="Id", IsForeignKey=true)]
		public ResourcePlan ResourcePlan
		{
			get
			{
				return this._ResourcePlan.Entity;
			}
			set
			{
				ResourcePlan previousValue = this._ResourcePlan.Entity;
				if (((previousValue != value) 
							|| (this._ResourcePlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourcePlan.Entity = null;
						previousValue.LoadAttributes.Remove(this);
					}
					this._ResourcePlan.Entity = value;
					if ((value != null))
					{
						value.LoadAttributes.Add(this);
						this._ResourcePlanId = value.Id;
					}
					else
					{
						this._ResourcePlanId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ResourcePlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="forecast.TransVoltageCustLoadForecasts")]
	public partial class TransVoltageCustLoadForecast : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private int _ForecastYear;
		
		private int _ForecastStartYear;
		
		private int _ForecastEndYear;
		
		private System.DateTime _DateCreated;
		
		private string _UserCreated;
		
		private EntitySet<TransVoltageCustForecastLoadFact> _TransVoltageCustForecastLoadFacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnForecastYearChanging(int value);
    partial void OnForecastYearChanged();
    partial void OnForecastStartYearChanging(int value);
    partial void OnForecastStartYearChanged();
    partial void OnForecastEndYearChanging(int value);
    partial void OnForecastEndYearChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedChanging(string value);
    partial void OnUserCreatedChanged();
    #endregion
		
		public TransVoltageCustLoadForecast()
		{
			this._TransVoltageCustForecastLoadFacts = new EntitySet<TransVoltageCustForecastLoadFact>(new Action<TransVoltageCustForecastLoadFact>(this.attach_TransVoltageCustForecastLoadFacts), new Action<TransVoltageCustForecastLoadFact>(this.detach_TransVoltageCustForecastLoadFacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForecastYear", DbType="Int NOT NULL")]
		public int ForecastYear
		{
			get
			{
				return this._ForecastYear;
			}
			set
			{
				if ((this._ForecastYear != value))
				{
					this.OnForecastYearChanging(value);
					this.SendPropertyChanging();
					this._ForecastYear = value;
					this.SendPropertyChanged("ForecastYear");
					this.OnForecastYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForecastStartYear", DbType="Int NOT NULL")]
		public int ForecastStartYear
		{
			get
			{
				return this._ForecastStartYear;
			}
			set
			{
				if ((this._ForecastStartYear != value))
				{
					this.OnForecastStartYearChanging(value);
					this.SendPropertyChanging();
					this._ForecastStartYear = value;
					this.SendPropertyChanged("ForecastStartYear");
					this.OnForecastStartYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForecastEndYear", DbType="Int NOT NULL")]
		public int ForecastEndYear
		{
			get
			{
				return this._ForecastEndYear;
			}
			set
			{
				if ((this._ForecastEndYear != value))
				{
					this.OnForecastEndYearChanging(value);
					this.SendPropertyChanging();
					this._ForecastEndYear = value;
					this.SendPropertyChanged("ForecastEndYear");
					this.OnForecastEndYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreated", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserCreated
		{
			get
			{
				return this._UserCreated;
			}
			set
			{
				if ((this._UserCreated != value))
				{
					this.OnUserCreatedChanging(value);
					this.SendPropertyChanging();
					this._UserCreated = value;
					this.SendPropertyChanged("UserCreated");
					this.OnUserCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransVoltageCustLoadForecast_TransVoltageCustForecastLoadFact", Storage="_TransVoltageCustForecastLoadFacts", ThisKey="Id", OtherKey="TransVoltageCustLdForecastId")]
		public EntitySet<TransVoltageCustForecastLoadFact> TransVoltageCustForecastLoadFacts
		{
			get
			{
				return this._TransVoltageCustForecastLoadFacts;
			}
			set
			{
				this._TransVoltageCustForecastLoadFacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransVoltageCustForecastLoadFacts(TransVoltageCustForecastLoadFact entity)
		{
			this.SendPropertyChanging();
			entity.TransVoltageCustLoadForecast = this;
		}
		
		private void detach_TransVoltageCustForecastLoadFacts(TransVoltageCustForecastLoadFact entity)
		{
			this.SendPropertyChanging();
			entity.TransVoltageCustLoadForecast = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="forecast.DimTvcLdScenarios")]
	public partial class DimTvcLdScenario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.DateTime _DateCreated;
		
		private string _UserCreated;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntitySet<TransVoltageCustForecastLoadFact> _TransVoltageCustForecastLoadFacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedChanging(string value);
    partial void OnUserCreatedChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public DimTvcLdScenario()
		{
			this._TransVoltageCustForecastLoadFacts = new EntitySet<TransVoltageCustForecastLoadFact>(new Action<TransVoltageCustForecastLoadFact>(this.attach_TransVoltageCustForecastLoadFacts), new Action<TransVoltageCustForecastLoadFact>(this.detach_TransVoltageCustForecastLoadFacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreated", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserCreated
		{
			get
			{
				return this._UserCreated;
			}
			set
			{
				if ((this._UserCreated != value))
				{
					this.OnUserCreatedChanging(value);
					this.SendPropertyChanging();
					this._UserCreated = value;
					this.SendPropertyChanged("UserCreated");
					this.OnUserCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcLdScenario_TransVoltageCustForecastLoadFact", Storage="_TransVoltageCustForecastLoadFacts", ThisKey="Id", OtherKey="ScenarioId")]
		public EntitySet<TransVoltageCustForecastLoadFact> TransVoltageCustForecastLoadFacts
		{
			get
			{
				return this._TransVoltageCustForecastLoadFacts;
			}
			set
			{
				this._TransVoltageCustForecastLoadFacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransVoltageCustForecastLoadFacts(TransVoltageCustForecastLoadFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcLdScenario = this;
		}
		
		private void detach_TransVoltageCustForecastLoadFacts(TransVoltageCustForecastLoadFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcLdScenario = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="forecast.DimTvcLdTimePeriods")]
	public partial class DimTvcLdTimePeriod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Year;
		
		private System.DateTime _DateCreated;
		
		private string _UserCreated;
		
		private EntitySet<TransVoltageCustForecastLoadFact> _TransVoltageCustForecastLoadFacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedChanging(string value);
    partial void OnUserCreatedChanged();
    #endregion
		
		public DimTvcLdTimePeriod()
		{
			this._TransVoltageCustForecastLoadFacts = new EntitySet<TransVoltageCustForecastLoadFact>(new Action<TransVoltageCustForecastLoadFact>(this.attach_TransVoltageCustForecastLoadFacts), new Action<TransVoltageCustForecastLoadFact>(this.detach_TransVoltageCustForecastLoadFacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreated", DbType="NVarChar(255)")]
		public string UserCreated
		{
			get
			{
				return this._UserCreated;
			}
			set
			{
				if ((this._UserCreated != value))
				{
					this.OnUserCreatedChanging(value);
					this.SendPropertyChanging();
					this._UserCreated = value;
					this.SendPropertyChanged("UserCreated");
					this.OnUserCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcLdTimePeriod_TransVoltageCustForecastLoadFact", Storage="_TransVoltageCustForecastLoadFacts", ThisKey="Id", OtherKey="TimePeriodId")]
		public EntitySet<TransVoltageCustForecastLoadFact> TransVoltageCustForecastLoadFacts
		{
			get
			{
				return this._TransVoltageCustForecastLoadFacts;
			}
			set
			{
				this._TransVoltageCustForecastLoadFacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransVoltageCustForecastLoadFacts(TransVoltageCustForecastLoadFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcLdTimePeriod = this;
		}
		
		private void detach_TransVoltageCustForecastLoadFacts(TransVoltageCustForecastLoadFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcLdTimePeriod = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="forecast.DimTvcLdTransVoltCustomers")]
	public partial class DimTvcLdTransVoltCustomer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Code;
		
		private System.DateTime _DateCreated;
		
		private string _UserCreated;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntitySet<TransVoltageCustForecastLoadFact> _TransVoltageCustForecastLoadFacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedChanging(string value);
    partial void OnUserCreatedChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public DimTvcLdTransVoltCustomer()
		{
			this._TransVoltageCustForecastLoadFacts = new EntitySet<TransVoltageCustForecastLoadFact>(new Action<TransVoltageCustForecastLoadFact>(this.attach_TransVoltageCustForecastLoadFacts), new Action<TransVoltageCustForecastLoadFact>(this.detach_TransVoltageCustForecastLoadFacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreated", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserCreated
		{
			get
			{
				return this._UserCreated;
			}
			set
			{
				if ((this._UserCreated != value))
				{
					this.OnUserCreatedChanging(value);
					this.SendPropertyChanging();
					this._UserCreated = value;
					this.SendPropertyChanged("UserCreated");
					this.OnUserCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcLdTransVoltCustomer_TransVoltageCustForecastLoadFact", Storage="_TransVoltageCustForecastLoadFacts", ThisKey="Id", OtherKey="TransmissionVoltageCustomerId")]
		public EntitySet<TransVoltageCustForecastLoadFact> TransVoltageCustForecastLoadFacts
		{
			get
			{
				return this._TransVoltageCustForecastLoadFacts;
			}
			set
			{
				this._TransVoltageCustForecastLoadFacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransVoltageCustForecastLoadFacts(TransVoltageCustForecastLoadFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcLdTransVoltCustomer = this;
		}
		
		private void detach_TransVoltageCustForecastLoadFacts(TransVoltageCustForecastLoadFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcLdTransVoltCustomer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="forecast.DimTvcLdFacilities")]
	public partial class DimTvcLdFacility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Code;
		
		private System.DateTime _DateCreated;
		
		private string _UserCreated;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntitySet<TransVoltageCustForecastLoadFact> _TransVoltageCustForecastLoadFacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedChanging(string value);
    partial void OnUserCreatedChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public DimTvcLdFacility()
		{
			this._TransVoltageCustForecastLoadFacts = new EntitySet<TransVoltageCustForecastLoadFact>(new Action<TransVoltageCustForecastLoadFact>(this.attach_TransVoltageCustForecastLoadFacts), new Action<TransVoltageCustForecastLoadFact>(this.detach_TransVoltageCustForecastLoadFacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreated", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserCreated
		{
			get
			{
				return this._UserCreated;
			}
			set
			{
				if ((this._UserCreated != value))
				{
					this.OnUserCreatedChanging(value);
					this.SendPropertyChanging();
					this._UserCreated = value;
					this.SendPropertyChanged("UserCreated");
					this.OnUserCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcLdFacility_TransVoltageCustForecastLoadFact", Storage="_TransVoltageCustForecastLoadFacts", ThisKey="Id", OtherKey="FacilityId")]
		public EntitySet<TransVoltageCustForecastLoadFact> TransVoltageCustForecastLoadFacts
		{
			get
			{
				return this._TransVoltageCustForecastLoadFacts;
			}
			set
			{
				this._TransVoltageCustForecastLoadFacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransVoltageCustForecastLoadFacts(TransVoltageCustForecastLoadFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcLdFacility = this;
		}
		
		private void detach_TransVoltageCustForecastLoadFacts(TransVoltageCustForecastLoadFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcLdFacility = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="forecast.TransVoltageCustForecastLoadFacts")]
	public partial class TransVoltageCustForecastLoadFact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TransVoltageCustLdForecastId;
		
		private int _TransmissionVoltageCustomerId;
		
		private int _TimePeriodId;
		
		private System.Nullable<decimal> _LoadMeasure;
		
		private int _ScenarioId;
		
		private System.Nullable<int> _FacilityId;
		
		private EntityRef<DimTvcLdFacility> _DimTvcLdFacility;
		
		private EntityRef<TransVoltageCustLoadForecast> _TransVoltageCustLoadForecast;
		
		private EntityRef<DimTvcLdScenario> _DimTvcLdScenario;
		
		private EntityRef<DimTvcLdTimePeriod> _DimTvcLdTimePeriod;
		
		private EntityRef<DimTvcLdTransVoltCustomer> _DimTvcLdTransVoltCustomer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTransVoltageCustLdForecastIdChanging(int value);
    partial void OnTransVoltageCustLdForecastIdChanged();
    partial void OnTransmissionVoltageCustomerIdChanging(int value);
    partial void OnTransmissionVoltageCustomerIdChanged();
    partial void OnTimePeriodIdChanging(int value);
    partial void OnTimePeriodIdChanged();
    partial void OnLoadMeasureChanging(System.Nullable<decimal> value);
    partial void OnLoadMeasureChanged();
    partial void OnScenarioIdChanging(int value);
    partial void OnScenarioIdChanged();
    partial void OnFacilityIdChanging(System.Nullable<int> value);
    partial void OnFacilityIdChanged();
    #endregion
		
		public TransVoltageCustForecastLoadFact()
		{
			this._DimTvcLdFacility = default(EntityRef<DimTvcLdFacility>);
			this._TransVoltageCustLoadForecast = default(EntityRef<TransVoltageCustLoadForecast>);
			this._DimTvcLdScenario = default(EntityRef<DimTvcLdScenario>);
			this._DimTvcLdTimePeriod = default(EntityRef<DimTvcLdTimePeriod>);
			this._DimTvcLdTransVoltCustomer = default(EntityRef<DimTvcLdTransVoltCustomer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransVoltageCustLdForecastId", DbType="Int NOT NULL")]
		public int TransVoltageCustLdForecastId
		{
			get
			{
				return this._TransVoltageCustLdForecastId;
			}
			set
			{
				if ((this._TransVoltageCustLdForecastId != value))
				{
					if (this._TransVoltageCustLoadForecast.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransVoltageCustLdForecastIdChanging(value);
					this.SendPropertyChanging();
					this._TransVoltageCustLdForecastId = value;
					this.SendPropertyChanged("TransVoltageCustLdForecastId");
					this.OnTransVoltageCustLdForecastIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionVoltageCustomerId", DbType="Int NOT NULL")]
		public int TransmissionVoltageCustomerId
		{
			get
			{
				return this._TransmissionVoltageCustomerId;
			}
			set
			{
				if ((this._TransmissionVoltageCustomerId != value))
				{
					if (this._DimTvcLdTransVoltCustomer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransmissionVoltageCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._TransmissionVoltageCustomerId = value;
					this.SendPropertyChanged("TransmissionVoltageCustomerId");
					this.OnTransmissionVoltageCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimePeriodId", DbType="Int NOT NULL")]
		public int TimePeriodId
		{
			get
			{
				return this._TimePeriodId;
			}
			set
			{
				if ((this._TimePeriodId != value))
				{
					if (this._DimTvcLdTimePeriod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimePeriodIdChanging(value);
					this.SendPropertyChanging();
					this._TimePeriodId = value;
					this.SendPropertyChanged("TimePeriodId");
					this.OnTimePeriodIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadMeasure", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> LoadMeasure
		{
			get
			{
				return this._LoadMeasure;
			}
			set
			{
				if ((this._LoadMeasure != value))
				{
					this.OnLoadMeasureChanging(value);
					this.SendPropertyChanging();
					this._LoadMeasure = value;
					this.SendPropertyChanged("LoadMeasure");
					this.OnLoadMeasureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScenarioId", DbType="Int NOT NULL")]
		public int ScenarioId
		{
			get
			{
				return this._ScenarioId;
			}
			set
			{
				if ((this._ScenarioId != value))
				{
					if (this._DimTvcLdScenario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScenarioIdChanging(value);
					this.SendPropertyChanging();
					this._ScenarioId = value;
					this.SendPropertyChanged("ScenarioId");
					this.OnScenarioIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacilityId", DbType="Int")]
		public System.Nullable<int> FacilityId
		{
			get
			{
				return this._FacilityId;
			}
			set
			{
				if ((this._FacilityId != value))
				{
					if (this._DimTvcLdFacility.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFacilityIdChanging(value);
					this.SendPropertyChanging();
					this._FacilityId = value;
					this.SendPropertyChanged("FacilityId");
					this.OnFacilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcLdFacility_TransVoltageCustForecastLoadFact", Storage="_DimTvcLdFacility", ThisKey="FacilityId", OtherKey="Id", IsForeignKey=true)]
		public DimTvcLdFacility DimTvcLdFacility
		{
			get
			{
				return this._DimTvcLdFacility.Entity;
			}
			set
			{
				DimTvcLdFacility previousValue = this._DimTvcLdFacility.Entity;
				if (((previousValue != value) 
							|| (this._DimTvcLdFacility.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimTvcLdFacility.Entity = null;
						previousValue.TransVoltageCustForecastLoadFacts.Remove(this);
					}
					this._DimTvcLdFacility.Entity = value;
					if ((value != null))
					{
						value.TransVoltageCustForecastLoadFacts.Add(this);
						this._FacilityId = value.Id;
					}
					else
					{
						this._FacilityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimTvcLdFacility");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransVoltageCustLoadForecast_TransVoltageCustForecastLoadFact", Storage="_TransVoltageCustLoadForecast", ThisKey="TransVoltageCustLdForecastId", OtherKey="Id", IsForeignKey=true)]
		public TransVoltageCustLoadForecast TransVoltageCustLoadForecast
		{
			get
			{
				return this._TransVoltageCustLoadForecast.Entity;
			}
			set
			{
				TransVoltageCustLoadForecast previousValue = this._TransVoltageCustLoadForecast.Entity;
				if (((previousValue != value) 
							|| (this._TransVoltageCustLoadForecast.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransVoltageCustLoadForecast.Entity = null;
						previousValue.TransVoltageCustForecastLoadFacts.Remove(this);
					}
					this._TransVoltageCustLoadForecast.Entity = value;
					if ((value != null))
					{
						value.TransVoltageCustForecastLoadFacts.Add(this);
						this._TransVoltageCustLdForecastId = value.Id;
					}
					else
					{
						this._TransVoltageCustLdForecastId = default(int);
					}
					this.SendPropertyChanged("TransVoltageCustLoadForecast");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcLdScenario_TransVoltageCustForecastLoadFact", Storage="_DimTvcLdScenario", ThisKey="ScenarioId", OtherKey="Id", IsForeignKey=true)]
		public DimTvcLdScenario DimTvcLdScenario
		{
			get
			{
				return this._DimTvcLdScenario.Entity;
			}
			set
			{
				DimTvcLdScenario previousValue = this._DimTvcLdScenario.Entity;
				if (((previousValue != value) 
							|| (this._DimTvcLdScenario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimTvcLdScenario.Entity = null;
						previousValue.TransVoltageCustForecastLoadFacts.Remove(this);
					}
					this._DimTvcLdScenario.Entity = value;
					if ((value != null))
					{
						value.TransVoltageCustForecastLoadFacts.Add(this);
						this._ScenarioId = value.Id;
					}
					else
					{
						this._ScenarioId = default(int);
					}
					this.SendPropertyChanged("DimTvcLdScenario");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcLdTimePeriod_TransVoltageCustForecastLoadFact", Storage="_DimTvcLdTimePeriod", ThisKey="TimePeriodId", OtherKey="Id", IsForeignKey=true)]
		public DimTvcLdTimePeriod DimTvcLdTimePeriod
		{
			get
			{
				return this._DimTvcLdTimePeriod.Entity;
			}
			set
			{
				DimTvcLdTimePeriod previousValue = this._DimTvcLdTimePeriod.Entity;
				if (((previousValue != value) 
							|| (this._DimTvcLdTimePeriod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimTvcLdTimePeriod.Entity = null;
						previousValue.TransVoltageCustForecastLoadFacts.Remove(this);
					}
					this._DimTvcLdTimePeriod.Entity = value;
					if ((value != null))
					{
						value.TransVoltageCustForecastLoadFacts.Add(this);
						this._TimePeriodId = value.Id;
					}
					else
					{
						this._TimePeriodId = default(int);
					}
					this.SendPropertyChanged("DimTvcLdTimePeriod");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcLdTransVoltCustomer_TransVoltageCustForecastLoadFact", Storage="_DimTvcLdTransVoltCustomer", ThisKey="TransmissionVoltageCustomerId", OtherKey="Id", IsForeignKey=true)]
		public DimTvcLdTransVoltCustomer DimTvcLdTransVoltCustomer
		{
			get
			{
				return this._DimTvcLdTransVoltCustomer.Entity;
			}
			set
			{
				DimTvcLdTransVoltCustomer previousValue = this._DimTvcLdTransVoltCustomer.Entity;
				if (((previousValue != value) 
							|| (this._DimTvcLdTransVoltCustomer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimTvcLdTransVoltCustomer.Entity = null;
						previousValue.TransVoltageCustForecastLoadFacts.Remove(this);
					}
					this._DimTvcLdTransVoltCustomer.Entity = value;
					if ((value != null))
					{
						value.TransVoltageCustForecastLoadFacts.Add(this);
						this._TransmissionVoltageCustomerId = value.Id;
					}
					else
					{
						this._TransmissionVoltageCustomerId = default(int);
					}
					this.SendPropertyChanged("DimTvcLdTransVoltCustomer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="forecast.TvcForecasts")]
	public partial class TvcForecast : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _DateCreated;
		
		private string _UserCreated;
		
		private EntitySet<TvcForecastFact> _TvcForecastFacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedChanging(string value);
    partial void OnUserCreatedChanged();
    #endregion
		
		public TvcForecast()
		{
			this._TvcForecastFacts = new EntitySet<TvcForecastFact>(new Action<TvcForecastFact>(this.attach_TvcForecastFacts), new Action<TvcForecastFact>(this.detach_TvcForecastFacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreated", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserCreated
		{
			get
			{
				return this._UserCreated;
			}
			set
			{
				if ((this._UserCreated != value))
				{
					this.OnUserCreatedChanging(value);
					this.SendPropertyChanging();
					this._UserCreated = value;
					this.SendPropertyChanged("UserCreated");
					this.OnUserCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TvcForecast_TvcForecastFact", Storage="_TvcForecastFacts", ThisKey="Id", OtherKey="TvcForecastId")]
		public EntitySet<TvcForecastFact> TvcForecastFacts
		{
			get
			{
				return this._TvcForecastFacts;
			}
			set
			{
				this._TvcForecastFacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.TvcForecast = this;
		}
		
		private void detach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.TvcForecast = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="forecast.DimTvcScenarios")]
	public partial class DimTvcScenario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.DateTime _DateCreated;
		
		private string _UserCreated;
		
		private EntitySet<TvcForecastFact> _TvcForecastFacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedChanging(string value);
    partial void OnUserCreatedChanged();
    #endregion
		
		public DimTvcScenario()
		{
			this._TvcForecastFacts = new EntitySet<TvcForecastFact>(new Action<TvcForecastFact>(this.attach_TvcForecastFacts), new Action<TvcForecastFact>(this.detach_TvcForecastFacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreated", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserCreated
		{
			get
			{
				return this._UserCreated;
			}
			set
			{
				if ((this._UserCreated != value))
				{
					this.OnUserCreatedChanging(value);
					this.SendPropertyChanging();
					this._UserCreated = value;
					this.SendPropertyChanged("UserCreated");
					this.OnUserCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcScenario_TvcForecastFact", Storage="_TvcForecastFacts", ThisKey="Id", OtherKey="CapacityLoadScenarioId")]
		public EntitySet<TvcForecastFact> TvcForecastFacts
		{
			get
			{
				return this._TvcForecastFacts;
			}
			set
			{
				this._TvcForecastFacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcScenario = this;
		}
		
		private void detach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcScenario = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="forecast.DimTvcTransServiceRequests")]
	public partial class DimTvcTransServiceRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _TsrNumber;
		
		private string _TsrType;
		
		private System.Nullable<System.DateTime> _PostingDate;
		
		private string _Assumption;
		
		private string _Description;
		
		private System.DateTime _DateCreated;
		
		private string _UserCreated;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntitySet<TvcForecastFact> _TvcForecastFacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTsrNumberChanging(string value);
    partial void OnTsrNumberChanged();
    partial void OnTsrTypeChanging(string value);
    partial void OnTsrTypeChanged();
    partial void OnPostingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPostingDateChanged();
    partial void OnAssumptionChanging(string value);
    partial void OnAssumptionChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedChanging(string value);
    partial void OnUserCreatedChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public DimTvcTransServiceRequest()
		{
			this._TvcForecastFacts = new EntitySet<TvcForecastFact>(new Action<TvcForecastFact>(this.attach_TvcForecastFacts), new Action<TvcForecastFact>(this.detach_TvcForecastFacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TsrNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TsrNumber
		{
			get
			{
				return this._TsrNumber;
			}
			set
			{
				if ((this._TsrNumber != value))
				{
					this.OnTsrNumberChanging(value);
					this.SendPropertyChanging();
					this._TsrNumber = value;
					this.SendPropertyChanged("TsrNumber");
					this.OnTsrNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TsrType", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string TsrType
		{
			get
			{
				return this._TsrType;
			}
			set
			{
				if ((this._TsrType != value))
				{
					this.OnTsrTypeChanging(value);
					this.SendPropertyChanging();
					this._TsrType = value;
					this.SendPropertyChanged("TsrType");
					this.OnTsrTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostingDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PostingDate
		{
			get
			{
				return this._PostingDate;
			}
			set
			{
				if ((this._PostingDate != value))
				{
					this.OnPostingDateChanging(value);
					this.SendPropertyChanging();
					this._PostingDate = value;
					this.SendPropertyChanged("PostingDate");
					this.OnPostingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assumption", DbType="NVarChar(MAX)")]
		public string Assumption
		{
			get
			{
				return this._Assumption;
			}
			set
			{
				if ((this._Assumption != value))
				{
					this.OnAssumptionChanging(value);
					this.SendPropertyChanging();
					this._Assumption = value;
					this.SendPropertyChanged("Assumption");
					this.OnAssumptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreated", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserCreated
		{
			get
			{
				return this._UserCreated;
			}
			set
			{
				if ((this._UserCreated != value))
				{
					this.OnUserCreatedChanging(value);
					this.SendPropertyChanging();
					this._UserCreated = value;
					this.SendPropertyChanged("UserCreated");
					this.OnUserCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcTransServiceRequest_TvcForecastFact", Storage="_TvcForecastFacts", ThisKey="Id", OtherKey="TsrId")]
		public EntitySet<TvcForecastFact> TvcForecastFacts
		{
			get
			{
				return this._TvcForecastFacts;
			}
			set
			{
				this._TvcForecastFacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcTransServiceRequest = this;
		}
		
		private void detach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcTransServiceRequest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="forecast.DimTvcStatuses")]
	public partial class DimTvcStatuse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.DateTime _DateCreated;
		
		private string _UserCreated;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntitySet<TvcForecastFact> _TvcForecastFacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedChanging(string value);
    partial void OnUserCreatedChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public DimTvcStatuse()
		{
			this._TvcForecastFacts = new EntitySet<TvcForecastFact>(new Action<TvcForecastFact>(this.attach_TvcForecastFacts), new Action<TvcForecastFact>(this.detach_TvcForecastFacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreated", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserCreated
		{
			get
			{
				return this._UserCreated;
			}
			set
			{
				if ((this._UserCreated != value))
				{
					this.OnUserCreatedChanging(value);
					this.SendPropertyChanging();
					this._UserCreated = value;
					this.SendPropertyChanged("UserCreated");
					this.OnUserCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcStatuse_TvcForecastFact", Storage="_TvcForecastFacts", ThisKey="Id", OtherKey="TvcStatusId")]
		public EntitySet<TvcForecastFact> TvcForecastFacts
		{
			get
			{
				return this._TvcForecastFacts;
			}
			set
			{
				this._TvcForecastFacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcStatuse = this;
		}
		
		private void detach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcStatuse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="forecast.DimTvcTimePeriods")]
	public partial class DimTvcTimePeriod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Year;
		
		private System.DateTime _DateCreated;
		
		private string _UserCreated;
		
		private EntitySet<TvcForecastFact> _TvcForecastFacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedChanging(string value);
    partial void OnUserCreatedChanged();
    #endregion
		
		public DimTvcTimePeriod()
		{
			this._TvcForecastFacts = new EntitySet<TvcForecastFact>(new Action<TvcForecastFact>(this.attach_TvcForecastFacts), new Action<TvcForecastFact>(this.detach_TvcForecastFacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreated", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserCreated
		{
			get
			{
				return this._UserCreated;
			}
			set
			{
				if ((this._UserCreated != value))
				{
					this.OnUserCreatedChanging(value);
					this.SendPropertyChanging();
					this._UserCreated = value;
					this.SendPropertyChanged("UserCreated");
					this.OnUserCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcTimePeriod_TvcForecastFact", Storage="_TvcForecastFacts", ThisKey="Id", OtherKey="TimePeriodId")]
		public EntitySet<TvcForecastFact> TvcForecastFacts
		{
			get
			{
				return this._TvcForecastFacts;
			}
			set
			{
				this._TvcForecastFacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcTimePeriod = this;
		}
		
		private void detach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcTimePeriod = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="forecast.DimTvcKiloVolts")]
	public partial class DimTvcKiloVolt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private decimal _KiloVolt;
		
		private System.DateTime _DateCreated;
		
		private string _UserCreated;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntitySet<TvcForecastFact> _TvcForecastFacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnKiloVoltChanging(decimal value);
    partial void OnKiloVoltChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedChanging(string value);
    partial void OnUserCreatedChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public DimTvcKiloVolt()
		{
			this._TvcForecastFacts = new EntitySet<TvcForecastFact>(new Action<TvcForecastFact>(this.attach_TvcForecastFacts), new Action<TvcForecastFact>(this.detach_TvcForecastFacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KiloVolt", DbType="Decimal(10,2) NOT NULL")]
		public decimal KiloVolt
		{
			get
			{
				return this._KiloVolt;
			}
			set
			{
				if ((this._KiloVolt != value))
				{
					this.OnKiloVoltChanging(value);
					this.SendPropertyChanging();
					this._KiloVolt = value;
					this.SendPropertyChanged("KiloVolt");
					this.OnKiloVoltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreated", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserCreated
		{
			get
			{
				return this._UserCreated;
			}
			set
			{
				if ((this._UserCreated != value))
				{
					this.OnUserCreatedChanging(value);
					this.SendPropertyChanging();
					this._UserCreated = value;
					this.SendPropertyChanged("UserCreated");
					this.OnUserCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcKiloVolt_TvcForecastFact", Storage="_TvcForecastFacts", ThisKey="Id", OtherKey="KiloVoltId")]
		public EntitySet<TvcForecastFact> TvcForecastFacts
		{
			get
			{
				return this._TvcForecastFacts;
			}
			set
			{
				this._TvcForecastFacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcKiloVolt = this;
		}
		
		private void detach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcKiloVolt = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="forecast.DimTvcStages")]
	public partial class DimTvcStage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.DateTime _DateCreated;
		
		private string _UserCreated;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntitySet<TvcForecastFact> _TvcForecastFacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedChanging(string value);
    partial void OnUserCreatedChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public DimTvcStage()
		{
			this._TvcForecastFacts = new EntitySet<TvcForecastFact>(new Action<TvcForecastFact>(this.attach_TvcForecastFacts), new Action<TvcForecastFact>(this.detach_TvcForecastFacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreated", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserCreated
		{
			get
			{
				return this._UserCreated;
			}
			set
			{
				if ((this._UserCreated != value))
				{
					this.OnUserCreatedChanging(value);
					this.SendPropertyChanging();
					this._UserCreated = value;
					this.SendPropertyChanged("UserCreated");
					this.OnUserCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcStage_TvcForecastFact", Storage="_TvcForecastFacts", ThisKey="Id", OtherKey="TvcStageId")]
		public EntitySet<TvcForecastFact> TvcForecastFacts
		{
			get
			{
				return this._TvcForecastFacts;
			}
			set
			{
				this._TvcForecastFacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcStage = this;
		}
		
		private void detach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcStage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="forecast.DimTvcLines")]
	public partial class DimTvcLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _LineNumber;
		
		private System.DateTime _DateCreated;
		
		private string _UserCreated;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntitySet<TvcForecastFact> _TvcForecastFacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLineNumberChanging(string value);
    partial void OnLineNumberChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedChanging(string value);
    partial void OnUserCreatedChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public DimTvcLine()
		{
			this._TvcForecastFacts = new EntitySet<TvcForecastFact>(new Action<TvcForecastFact>(this.attach_TvcForecastFacts), new Action<TvcForecastFact>(this.detach_TvcForecastFacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineNumber", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string LineNumber
		{
			get
			{
				return this._LineNumber;
			}
			set
			{
				if ((this._LineNumber != value))
				{
					this.OnLineNumberChanging(value);
					this.SendPropertyChanging();
					this._LineNumber = value;
					this.SendPropertyChanged("LineNumber");
					this.OnLineNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreated", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserCreated
		{
			get
			{
				return this._UserCreated;
			}
			set
			{
				if ((this._UserCreated != value))
				{
					this.OnUserCreatedChanging(value);
					this.SendPropertyChanging();
					this._UserCreated = value;
					this.SendPropertyChanged("UserCreated");
					this.OnUserCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcLine_TvcForecastFact", Storage="_TvcForecastFacts", ThisKey="Id", OtherKey="LineNumberId")]
		public EntitySet<TvcForecastFact> TvcForecastFacts
		{
			get
			{
				return this._TvcForecastFacts;
			}
			set
			{
				this._TvcForecastFacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcLine = this;
		}
		
		private void detach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcLine = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="forecast.DimTvcRates")]
	public partial class DimTvcRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private decimal _Rate;
		
		private System.DateTime _DateCreated;
		
		private string _UserCreated;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntitySet<TvcForecastFact> _TvcForecastFacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRateChanging(decimal value);
    partial void OnRateChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedChanging(string value);
    partial void OnUserCreatedChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public DimTvcRate()
		{
			this._TvcForecastFacts = new EntitySet<TvcForecastFact>(new Action<TvcForecastFact>(this.attach_TvcForecastFacts), new Action<TvcForecastFact>(this.detach_TvcForecastFacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Decimal(10,2) NOT NULL")]
		public decimal Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreated", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserCreated
		{
			get
			{
				return this._UserCreated;
			}
			set
			{
				if ((this._UserCreated != value))
				{
					this.OnUserCreatedChanging(value);
					this.SendPropertyChanging();
					this._UserCreated = value;
					this.SendPropertyChanged("UserCreated");
					this.OnUserCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcRate_TvcForecastFact", Storage="_TvcForecastFacts", ThisKey="Id", OtherKey="RateId")]
		public EntitySet<TvcForecastFact> TvcForecastFacts
		{
			get
			{
				return this._TvcForecastFacts;
			}
			set
			{
				this._TvcForecastFacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcRate = this;
		}
		
		private void detach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcRate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.ResourceOptionAttributes")]
	public partial class ResourceOptionAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _DataSourceId;
		
		private string _MataId;
		
		private System.Nullable<int> _OwnershipId;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private int _ResourceOptionId;
		
		private System.Nullable<int> _EnergyAvailableYear;
		
		private System.Nullable<int> _LevelOfStudyId;
		
		private System.Nullable<int> _DevelopmentRiskId;
		
		private string _DevelopmentRiskComment;
		
		private System.Nullable<int> _PriceRiskId;
		
		private string _PriceRiskComments;
		
		private System.Nullable<int> _ScreenCriteriaTypeId;
		
		private System.Nullable<bool> _RequiredToMapa;
		
		private System.Nullable<int> _ResourceBundleAttributeId;
		
		private System.Nullable<int> _TaxId;
		
		private System.Nullable<int> _ResourceTypeUncertaintyId;
		
		private System.Nullable<int> _CostUncertainityId;
		
		private System.Nullable<bool> _SentToSysOptiimizer;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private EntityRef<OwnershipType> _OwnershipType;
		
		private EntityRef<ResourceBundleAttribute> _ResourceBundleAttribute;
		
		private EntityRef<EpicUser> _EpicUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDataSourceIdChanging(System.Nullable<int> value);
    partial void OnDataSourceIdChanged();
    partial void OnMataIdChanging(string value);
    partial void OnMataIdChanged();
    partial void OnOwnershipIdChanging(System.Nullable<int> value);
    partial void OnOwnershipIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnResourceOptionIdChanging(int value);
    partial void OnResourceOptionIdChanged();
    partial void OnEnergyAvailableYearChanging(System.Nullable<int> value);
    partial void OnEnergyAvailableYearChanged();
    partial void OnLevelOfStudyIdChanging(System.Nullable<int> value);
    partial void OnLevelOfStudyIdChanged();
    partial void OnDevelopmentRiskIdChanging(System.Nullable<int> value);
    partial void OnDevelopmentRiskIdChanged();
    partial void OnDevelopmentRiskCommentChanging(string value);
    partial void OnDevelopmentRiskCommentChanged();
    partial void OnPriceRiskIdChanging(System.Nullable<int> value);
    partial void OnPriceRiskIdChanged();
    partial void OnPriceRiskCommentsChanging(string value);
    partial void OnPriceRiskCommentsChanged();
    partial void OnScreenCriteriaTypeIdChanging(System.Nullable<int> value);
    partial void OnScreenCriteriaTypeIdChanged();
    partial void OnRequiredToMapaChanging(System.Nullable<bool> value);
    partial void OnRequiredToMapaChanged();
    partial void OnResourceBundleAttributeIdChanging(System.Nullable<int> value);
    partial void OnResourceBundleAttributeIdChanged();
    partial void OnTaxIdChanging(System.Nullable<int> value);
    partial void OnTaxIdChanged();
    partial void OnResourceTypeUncertaintyIdChanging(System.Nullable<int> value);
    partial void OnResourceTypeUncertaintyIdChanged();
    partial void OnCostUncertainityIdChanging(System.Nullable<int> value);
    partial void OnCostUncertainityIdChanged();
    partial void OnSentToSysOptiimizerChanging(System.Nullable<bool> value);
    partial void OnSentToSysOptiimizerChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    #endregion
		
		public ResourceOptionAttribute()
		{
			this._OwnershipType = default(EntityRef<OwnershipType>);
			this._ResourceBundleAttribute = default(EntityRef<ResourceBundleAttribute>);
			this._EpicUser = default(EntityRef<EpicUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataSourceId", DbType="Int")]
		public System.Nullable<int> DataSourceId
		{
			get
			{
				return this._DataSourceId;
			}
			set
			{
				if ((this._DataSourceId != value))
				{
					this.OnDataSourceIdChanging(value);
					this.SendPropertyChanging();
					this._DataSourceId = value;
					this.SendPropertyChanged("DataSourceId");
					this.OnDataSourceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MataId", DbType="NVarChar(256)")]
		public string MataId
		{
			get
			{
				return this._MataId;
			}
			set
			{
				if ((this._MataId != value))
				{
					this.OnMataIdChanging(value);
					this.SendPropertyChanging();
					this._MataId = value;
					this.SendPropertyChanged("MataId");
					this.OnMataIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnershipId", DbType="Int")]
		public System.Nullable<int> OwnershipId
		{
			get
			{
				return this._OwnershipId;
			}
			set
			{
				if ((this._OwnershipId != value))
				{
					if (this._OwnershipType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnershipIdChanging(value);
					this.SendPropertyChanging();
					this._OwnershipId = value;
					this.SendPropertyChanged("OwnershipId");
					this.OnOwnershipIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					if (this._EpicUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceOptionId", DbType="Int NOT NULL")]
		public int ResourceOptionId
		{
			get
			{
				return this._ResourceOptionId;
			}
			set
			{
				if ((this._ResourceOptionId != value))
				{
					this.OnResourceOptionIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceOptionId = value;
					this.SendPropertyChanged("ResourceOptionId");
					this.OnResourceOptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnergyAvailableYear", DbType="Int")]
		public System.Nullable<int> EnergyAvailableYear
		{
			get
			{
				return this._EnergyAvailableYear;
			}
			set
			{
				if ((this._EnergyAvailableYear != value))
				{
					this.OnEnergyAvailableYearChanging(value);
					this.SendPropertyChanging();
					this._EnergyAvailableYear = value;
					this.SendPropertyChanged("EnergyAvailableYear");
					this.OnEnergyAvailableYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelOfStudyId", DbType="Int")]
		public System.Nullable<int> LevelOfStudyId
		{
			get
			{
				return this._LevelOfStudyId;
			}
			set
			{
				if ((this._LevelOfStudyId != value))
				{
					this.OnLevelOfStudyIdChanging(value);
					this.SendPropertyChanging();
					this._LevelOfStudyId = value;
					this.SendPropertyChanged("LevelOfStudyId");
					this.OnLevelOfStudyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DevelopmentRiskId", DbType="Int")]
		public System.Nullable<int> DevelopmentRiskId
		{
			get
			{
				return this._DevelopmentRiskId;
			}
			set
			{
				if ((this._DevelopmentRiskId != value))
				{
					this.OnDevelopmentRiskIdChanging(value);
					this.SendPropertyChanging();
					this._DevelopmentRiskId = value;
					this.SendPropertyChanged("DevelopmentRiskId");
					this.OnDevelopmentRiskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DevelopmentRiskComment", DbType="NVarChar(MAX)")]
		public string DevelopmentRiskComment
		{
			get
			{
				return this._DevelopmentRiskComment;
			}
			set
			{
				if ((this._DevelopmentRiskComment != value))
				{
					this.OnDevelopmentRiskCommentChanging(value);
					this.SendPropertyChanging();
					this._DevelopmentRiskComment = value;
					this.SendPropertyChanged("DevelopmentRiskComment");
					this.OnDevelopmentRiskCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceRiskId", DbType="Int")]
		public System.Nullable<int> PriceRiskId
		{
			get
			{
				return this._PriceRiskId;
			}
			set
			{
				if ((this._PriceRiskId != value))
				{
					this.OnPriceRiskIdChanging(value);
					this.SendPropertyChanging();
					this._PriceRiskId = value;
					this.SendPropertyChanged("PriceRiskId");
					this.OnPriceRiskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceRiskComments", DbType="NVarChar(MAX)")]
		public string PriceRiskComments
		{
			get
			{
				return this._PriceRiskComments;
			}
			set
			{
				if ((this._PriceRiskComments != value))
				{
					this.OnPriceRiskCommentsChanging(value);
					this.SendPropertyChanging();
					this._PriceRiskComments = value;
					this.SendPropertyChanged("PriceRiskComments");
					this.OnPriceRiskCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreenCriteriaTypeId", DbType="Int")]
		public System.Nullable<int> ScreenCriteriaTypeId
		{
			get
			{
				return this._ScreenCriteriaTypeId;
			}
			set
			{
				if ((this._ScreenCriteriaTypeId != value))
				{
					this.OnScreenCriteriaTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ScreenCriteriaTypeId = value;
					this.SendPropertyChanged("ScreenCriteriaTypeId");
					this.OnScreenCriteriaTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiredToMapa", DbType="Bit")]
		public System.Nullable<bool> RequiredToMapa
		{
			get
			{
				return this._RequiredToMapa;
			}
			set
			{
				if ((this._RequiredToMapa != value))
				{
					this.OnRequiredToMapaChanging(value);
					this.SendPropertyChanging();
					this._RequiredToMapa = value;
					this.SendPropertyChanged("RequiredToMapa");
					this.OnRequiredToMapaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceBundleAttributeId", DbType="Int")]
		public System.Nullable<int> ResourceBundleAttributeId
		{
			get
			{
				return this._ResourceBundleAttributeId;
			}
			set
			{
				if ((this._ResourceBundleAttributeId != value))
				{
					if (this._ResourceBundleAttribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceBundleAttributeIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceBundleAttributeId = value;
					this.SendPropertyChanged("ResourceBundleAttributeId");
					this.OnResourceBundleAttributeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxId", DbType="Int")]
		public System.Nullable<int> TaxId
		{
			get
			{
				return this._TaxId;
			}
			set
			{
				if ((this._TaxId != value))
				{
					this.OnTaxIdChanging(value);
					this.SendPropertyChanging();
					this._TaxId = value;
					this.SendPropertyChanged("TaxId");
					this.OnTaxIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceTypeUncertaintyId", DbType="Int")]
		public System.Nullable<int> ResourceTypeUncertaintyId
		{
			get
			{
				return this._ResourceTypeUncertaintyId;
			}
			set
			{
				if ((this._ResourceTypeUncertaintyId != value))
				{
					this.OnResourceTypeUncertaintyIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceTypeUncertaintyId = value;
					this.SendPropertyChanged("ResourceTypeUncertaintyId");
					this.OnResourceTypeUncertaintyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostUncertainityId", DbType="Int")]
		public System.Nullable<int> CostUncertainityId
		{
			get
			{
				return this._CostUncertainityId;
			}
			set
			{
				if ((this._CostUncertainityId != value))
				{
					this.OnCostUncertainityIdChanging(value);
					this.SendPropertyChanging();
					this._CostUncertainityId = value;
					this.SendPropertyChanged("CostUncertainityId");
					this.OnCostUncertainityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SentToSysOptiimizer", DbType="Bit")]
		public System.Nullable<bool> SentToSysOptiimizer
		{
			get
			{
				return this._SentToSysOptiimizer;
			}
			set
			{
				if ((this._SentToSysOptiimizer != value))
				{
					this.OnSentToSysOptiimizerChanging(value);
					this.SendPropertyChanging();
					this._SentToSysOptiimizer = value;
					this.SendPropertyChanged("SentToSysOptiimizer");
					this.OnSentToSysOptiimizerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OwnershipType_ResourceOptionAttribute", Storage="_OwnershipType", ThisKey="OwnershipId", OtherKey="Id", IsForeignKey=true)]
		public OwnershipType OwnershipType
		{
			get
			{
				return this._OwnershipType.Entity;
			}
			set
			{
				OwnershipType previousValue = this._OwnershipType.Entity;
				if (((previousValue != value) 
							|| (this._OwnershipType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnershipType.Entity = null;
						previousValue.ResourceOptionAttributes.Remove(this);
					}
					this._OwnershipType.Entity = value;
					if ((value != null))
					{
						value.ResourceOptionAttributes.Add(this);
						this._OwnershipId = value.Id;
					}
					else
					{
						this._OwnershipId = default(Nullable<int>);
					}
					this.SendPropertyChanged("OwnershipType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceBundleAttribute_ResourceOptionAttribute", Storage="_ResourceBundleAttribute", ThisKey="ResourceBundleAttributeId", OtherKey="Id", IsForeignKey=true)]
		public ResourceBundleAttribute ResourceBundleAttribute
		{
			get
			{
				return this._ResourceBundleAttribute.Entity;
			}
			set
			{
				ResourceBundleAttribute previousValue = this._ResourceBundleAttribute.Entity;
				if (((previousValue != value) 
							|| (this._ResourceBundleAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceBundleAttribute.Entity = null;
						previousValue.ResourceOptionAttributes.Remove(this);
					}
					this._ResourceBundleAttribute.Entity = value;
					if ((value != null))
					{
						value.ResourceOptionAttributes.Add(this);
						this._ResourceBundleAttributeId = value.Id;
					}
					else
					{
						this._ResourceBundleAttributeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ResourceBundleAttribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EpicUser_ResourceOptionAttribute", Storage="_EpicUser", ThisKey="UserCreatedId", OtherKey="Id", IsForeignKey=true)]
		public EpicUser EpicUser
		{
			get
			{
				return this._EpicUser.Entity;
			}
			set
			{
				EpicUser previousValue = this._EpicUser.Entity;
				if (((previousValue != value) 
							|| (this._EpicUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EpicUser.Entity = null;
						previousValue.ResourceOptionAttributes.Remove(this);
					}
					this._EpicUser.Entity = value;
					if ((value != null))
					{
						value.ResourceOptionAttributes.Add(this);
						this._UserCreatedId = value.Id;
					}
					else
					{
						this._UserCreatedId = default(int);
					}
					this.SendPropertyChanged("EpicUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="forecast.DimTvcCustomers")]
	public partial class DimTvcCustomer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Code;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.DateTime _DateCreated;
		
		private string _UserCreated;
		
		private EntitySet<TvcForecastFact> _TvcForecastFacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedChanging(string value);
    partial void OnUserCreatedChanged();
    #endregion
		
		public DimTvcCustomer()
		{
			this._TvcForecastFacts = new EntitySet<TvcForecastFact>(new Action<TvcForecastFact>(this.attach_TvcForecastFacts), new Action<TvcForecastFact>(this.detach_TvcForecastFacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreated", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserCreated
		{
			get
			{
				return this._UserCreated;
			}
			set
			{
				if ((this._UserCreated != value))
				{
					this.OnUserCreatedChanging(value);
					this.SendPropertyChanging();
					this._UserCreated = value;
					this.SendPropertyChanged("UserCreated");
					this.OnUserCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcCustomer_TvcForecastFact", Storage="_TvcForecastFacts", ThisKey="Id", OtherKey="TvcCustomerId")]
		public EntitySet<TvcForecastFact> TvcForecastFacts
		{
			get
			{
				return this._TvcForecastFacts;
			}
			set
			{
				this._TvcForecastFacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcCustomer = this;
		}
		
		private void detach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcCustomer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="forecast.DimTvcSubstations")]
	public partial class DimTvcSubstation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Code;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.DateTime _DateCreated;
		
		private string _UserCreated;
		
		private string _AccountNumber;
		
		private System.Nullable<decimal> _Latitude;
		
		private System.Nullable<decimal> _Longitude;
		
		private EntitySet<TvcForecastFact> _TvcForecastFacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedChanging(string value);
    partial void OnUserCreatedChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnLatitudeChanging(System.Nullable<decimal> value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(System.Nullable<decimal> value);
    partial void OnLongitudeChanged();
    #endregion
		
		public DimTvcSubstation()
		{
			this._TvcForecastFacts = new EntitySet<TvcForecastFact>(new Action<TvcForecastFact>(this.attach_TvcForecastFacts), new Action<TvcForecastFact>(this.detach_TvcForecastFacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreated", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserCreated
		{
			get
			{
				return this._UserCreated;
			}
			set
			{
				if ((this._UserCreated != value))
				{
					this.OnUserCreatedChanging(value);
					this.SendPropertyChanging();
					this._UserCreated = value;
					this.SendPropertyChanged("UserCreated");
					this.OnUserCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNumber", DbType="NVarChar(255)")]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Decimal(12,9)")]
		public System.Nullable<decimal> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Decimal(12,9)")]
		public System.Nullable<decimal> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcSubstation_TvcForecastFact", Storage="_TvcForecastFacts", ThisKey="Id", OtherKey="SubstationId")]
		public EntitySet<TvcForecastFact> TvcForecastFacts
		{
			get
			{
				return this._TvcForecastFacts;
			}
			set
			{
				this._TvcForecastFacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcSubstation = this;
		}
		
		private void detach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcSubstation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="forecast.TvcForecastFacts")]
	public partial class TvcForecastFact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TvcForecastId;
		
		private System.Nullable<int> _TvcStageId;
		
		private System.Nullable<int> _TvcStatusId;
		
		private System.Nullable<int> _TsrId;
		
		private System.Nullable<int> _TvcCustomerId;
		
		private System.Nullable<int> _SubstationId;
		
		private System.Nullable<int> _TimePeriodId;
		
		private System.Nullable<int> _CapacityLoadScenarioId;
		
		private System.Nullable<int> _KiloVoltId;
		
		private System.Nullable<int> _LineNumberId;
		
		private System.Nullable<int> _RateId;
		
		private System.Nullable<decimal> _LoadFactor;
		
		private System.Nullable<decimal> _PowerFactor;
		
		private System.Nullable<decimal> _ProbOfConnection;
		
		private System.Nullable<decimal> _LoadCapacity;
		
		private System.Nullable<int> _TransmissionVoltageCustomerId;
		
		private EntityRef<DimTvcScenario> _DimTvcScenario;
		
		private EntityRef<DimTvcKiloVolt> _DimTvcKiloVolt;
		
		private EntityRef<DimTvcLine> _DimTvcLine;
		
		private EntityRef<DimTvcRate> _DimTvcRate;
		
		private EntityRef<DimTvcStage> _DimTvcStage;
		
		private EntityRef<DimTvcStatuse> _DimTvcStatuse;
		
		private EntityRef<DimTvcSubstation> _DimTvcSubstation;
		
		private EntityRef<DimTvcTimePeriod> _DimTvcTimePeriod;
		
		private EntityRef<DimTvcTransServiceRequest> _DimTvcTransServiceRequest;
		
		private EntityRef<DimTvcCustomer> _DimTvcCustomer;
		
		private EntityRef<TvcForecast> _TvcForecast;
		
		private EntityRef<DimTvcTransVoltCustomer> _DimTvcTransVoltCustomer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTvcForecastIdChanging(int value);
    partial void OnTvcForecastIdChanged();
    partial void OnTvcStageIdChanging(System.Nullable<int> value);
    partial void OnTvcStageIdChanged();
    partial void OnTvcStatusIdChanging(System.Nullable<int> value);
    partial void OnTvcStatusIdChanged();
    partial void OnTsrIdChanging(System.Nullable<int> value);
    partial void OnTsrIdChanged();
    partial void OnTvcCustomerIdChanging(System.Nullable<int> value);
    partial void OnTvcCustomerIdChanged();
    partial void OnSubstationIdChanging(System.Nullable<int> value);
    partial void OnSubstationIdChanged();
    partial void OnTimePeriodIdChanging(System.Nullable<int> value);
    partial void OnTimePeriodIdChanged();
    partial void OnCapacityLoadScenarioIdChanging(System.Nullable<int> value);
    partial void OnCapacityLoadScenarioIdChanged();
    partial void OnKiloVoltIdChanging(System.Nullable<int> value);
    partial void OnKiloVoltIdChanged();
    partial void OnLineNumberIdChanging(System.Nullable<int> value);
    partial void OnLineNumberIdChanged();
    partial void OnRateIdChanging(System.Nullable<int> value);
    partial void OnRateIdChanged();
    partial void OnLoadFactorChanging(System.Nullable<decimal> value);
    partial void OnLoadFactorChanged();
    partial void OnPowerFactorChanging(System.Nullable<decimal> value);
    partial void OnPowerFactorChanged();
    partial void OnProbOfConnectionChanging(System.Nullable<decimal> value);
    partial void OnProbOfConnectionChanged();
    partial void OnLoadCapacityChanging(System.Nullable<decimal> value);
    partial void OnLoadCapacityChanged();
    partial void OnTransmissionVoltageCustomerIdChanging(System.Nullable<int> value);
    partial void OnTransmissionVoltageCustomerIdChanged();
    #endregion
		
		public TvcForecastFact()
		{
			this._DimTvcScenario = default(EntityRef<DimTvcScenario>);
			this._DimTvcKiloVolt = default(EntityRef<DimTvcKiloVolt>);
			this._DimTvcLine = default(EntityRef<DimTvcLine>);
			this._DimTvcRate = default(EntityRef<DimTvcRate>);
			this._DimTvcStage = default(EntityRef<DimTvcStage>);
			this._DimTvcStatuse = default(EntityRef<DimTvcStatuse>);
			this._DimTvcSubstation = default(EntityRef<DimTvcSubstation>);
			this._DimTvcTimePeriod = default(EntityRef<DimTvcTimePeriod>);
			this._DimTvcTransServiceRequest = default(EntityRef<DimTvcTransServiceRequest>);
			this._DimTvcCustomer = default(EntityRef<DimTvcCustomer>);
			this._TvcForecast = default(EntityRef<TvcForecast>);
			this._DimTvcTransVoltCustomer = default(EntityRef<DimTvcTransVoltCustomer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TvcForecastId", DbType="Int NOT NULL")]
		public int TvcForecastId
		{
			get
			{
				return this._TvcForecastId;
			}
			set
			{
				if ((this._TvcForecastId != value))
				{
					if (this._TvcForecast.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTvcForecastIdChanging(value);
					this.SendPropertyChanging();
					this._TvcForecastId = value;
					this.SendPropertyChanged("TvcForecastId");
					this.OnTvcForecastIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TvcStageId", DbType="Int")]
		public System.Nullable<int> TvcStageId
		{
			get
			{
				return this._TvcStageId;
			}
			set
			{
				if ((this._TvcStageId != value))
				{
					if (this._DimTvcStage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTvcStageIdChanging(value);
					this.SendPropertyChanging();
					this._TvcStageId = value;
					this.SendPropertyChanged("TvcStageId");
					this.OnTvcStageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TvcStatusId", DbType="Int")]
		public System.Nullable<int> TvcStatusId
		{
			get
			{
				return this._TvcStatusId;
			}
			set
			{
				if ((this._TvcStatusId != value))
				{
					if (this._DimTvcStatuse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTvcStatusIdChanging(value);
					this.SendPropertyChanging();
					this._TvcStatusId = value;
					this.SendPropertyChanged("TvcStatusId");
					this.OnTvcStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TsrId", DbType="Int")]
		public System.Nullable<int> TsrId
		{
			get
			{
				return this._TsrId;
			}
			set
			{
				if ((this._TsrId != value))
				{
					if (this._DimTvcTransServiceRequest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTsrIdChanging(value);
					this.SendPropertyChanging();
					this._TsrId = value;
					this.SendPropertyChanged("TsrId");
					this.OnTsrIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TvcCustomerId", DbType="Int")]
		public System.Nullable<int> TvcCustomerId
		{
			get
			{
				return this._TvcCustomerId;
			}
			set
			{
				if ((this._TvcCustomerId != value))
				{
					if (this._DimTvcCustomer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTvcCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._TvcCustomerId = value;
					this.SendPropertyChanged("TvcCustomerId");
					this.OnTvcCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubstationId", DbType="Int")]
		public System.Nullable<int> SubstationId
		{
			get
			{
				return this._SubstationId;
			}
			set
			{
				if ((this._SubstationId != value))
				{
					if (this._DimTvcSubstation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstationIdChanging(value);
					this.SendPropertyChanging();
					this._SubstationId = value;
					this.SendPropertyChanged("SubstationId");
					this.OnSubstationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimePeriodId", DbType="Int")]
		public System.Nullable<int> TimePeriodId
		{
			get
			{
				return this._TimePeriodId;
			}
			set
			{
				if ((this._TimePeriodId != value))
				{
					if (this._DimTvcTimePeriod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimePeriodIdChanging(value);
					this.SendPropertyChanging();
					this._TimePeriodId = value;
					this.SendPropertyChanged("TimePeriodId");
					this.OnTimePeriodIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CapacityLoadScenarioId", DbType="Int")]
		public System.Nullable<int> CapacityLoadScenarioId
		{
			get
			{
				return this._CapacityLoadScenarioId;
			}
			set
			{
				if ((this._CapacityLoadScenarioId != value))
				{
					if (this._DimTvcScenario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCapacityLoadScenarioIdChanging(value);
					this.SendPropertyChanging();
					this._CapacityLoadScenarioId = value;
					this.SendPropertyChanged("CapacityLoadScenarioId");
					this.OnCapacityLoadScenarioIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KiloVoltId", DbType="Int")]
		public System.Nullable<int> KiloVoltId
		{
			get
			{
				return this._KiloVoltId;
			}
			set
			{
				if ((this._KiloVoltId != value))
				{
					if (this._DimTvcKiloVolt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKiloVoltIdChanging(value);
					this.SendPropertyChanging();
					this._KiloVoltId = value;
					this.SendPropertyChanged("KiloVoltId");
					this.OnKiloVoltIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineNumberId", DbType="Int")]
		public System.Nullable<int> LineNumberId
		{
			get
			{
				return this._LineNumberId;
			}
			set
			{
				if ((this._LineNumberId != value))
				{
					if (this._DimTvcLine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLineNumberIdChanging(value);
					this.SendPropertyChanging();
					this._LineNumberId = value;
					this.SendPropertyChanged("LineNumberId");
					this.OnLineNumberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateId", DbType="Int")]
		public System.Nullable<int> RateId
		{
			get
			{
				return this._RateId;
			}
			set
			{
				if ((this._RateId != value))
				{
					if (this._DimTvcRate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRateIdChanging(value);
					this.SendPropertyChanging();
					this._RateId = value;
					this.SendPropertyChanged("RateId");
					this.OnRateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadFactor", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> LoadFactor
		{
			get
			{
				return this._LoadFactor;
			}
			set
			{
				if ((this._LoadFactor != value))
				{
					this.OnLoadFactorChanging(value);
					this.SendPropertyChanging();
					this._LoadFactor = value;
					this.SendPropertyChanged("LoadFactor");
					this.OnLoadFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PowerFactor", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> PowerFactor
		{
			get
			{
				return this._PowerFactor;
			}
			set
			{
				if ((this._PowerFactor != value))
				{
					this.OnPowerFactorChanging(value);
					this.SendPropertyChanging();
					this._PowerFactor = value;
					this.SendPropertyChanged("PowerFactor");
					this.OnPowerFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProbOfConnection", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> ProbOfConnection
		{
			get
			{
				return this._ProbOfConnection;
			}
			set
			{
				if ((this._ProbOfConnection != value))
				{
					this.OnProbOfConnectionChanging(value);
					this.SendPropertyChanging();
					this._ProbOfConnection = value;
					this.SendPropertyChanged("ProbOfConnection");
					this.OnProbOfConnectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadCapacity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> LoadCapacity
		{
			get
			{
				return this._LoadCapacity;
			}
			set
			{
				if ((this._LoadCapacity != value))
				{
					this.OnLoadCapacityChanging(value);
					this.SendPropertyChanging();
					this._LoadCapacity = value;
					this.SendPropertyChanged("LoadCapacity");
					this.OnLoadCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransmissionVoltageCustomerId", DbType="Int")]
		public System.Nullable<int> TransmissionVoltageCustomerId
		{
			get
			{
				return this._TransmissionVoltageCustomerId;
			}
			set
			{
				if ((this._TransmissionVoltageCustomerId != value))
				{
					if (this._DimTvcTransVoltCustomer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransmissionVoltageCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._TransmissionVoltageCustomerId = value;
					this.SendPropertyChanged("TransmissionVoltageCustomerId");
					this.OnTransmissionVoltageCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcScenario_TvcForecastFact", Storage="_DimTvcScenario", ThisKey="CapacityLoadScenarioId", OtherKey="Id", IsForeignKey=true)]
		public DimTvcScenario DimTvcScenario
		{
			get
			{
				return this._DimTvcScenario.Entity;
			}
			set
			{
				DimTvcScenario previousValue = this._DimTvcScenario.Entity;
				if (((previousValue != value) 
							|| (this._DimTvcScenario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimTvcScenario.Entity = null;
						previousValue.TvcForecastFacts.Remove(this);
					}
					this._DimTvcScenario.Entity = value;
					if ((value != null))
					{
						value.TvcForecastFacts.Add(this);
						this._CapacityLoadScenarioId = value.Id;
					}
					else
					{
						this._CapacityLoadScenarioId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimTvcScenario");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcKiloVolt_TvcForecastFact", Storage="_DimTvcKiloVolt", ThisKey="KiloVoltId", OtherKey="Id", IsForeignKey=true)]
		public DimTvcKiloVolt DimTvcKiloVolt
		{
			get
			{
				return this._DimTvcKiloVolt.Entity;
			}
			set
			{
				DimTvcKiloVolt previousValue = this._DimTvcKiloVolt.Entity;
				if (((previousValue != value) 
							|| (this._DimTvcKiloVolt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimTvcKiloVolt.Entity = null;
						previousValue.TvcForecastFacts.Remove(this);
					}
					this._DimTvcKiloVolt.Entity = value;
					if ((value != null))
					{
						value.TvcForecastFacts.Add(this);
						this._KiloVoltId = value.Id;
					}
					else
					{
						this._KiloVoltId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimTvcKiloVolt");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcLine_TvcForecastFact", Storage="_DimTvcLine", ThisKey="LineNumberId", OtherKey="Id", IsForeignKey=true)]
		public DimTvcLine DimTvcLine
		{
			get
			{
				return this._DimTvcLine.Entity;
			}
			set
			{
				DimTvcLine previousValue = this._DimTvcLine.Entity;
				if (((previousValue != value) 
							|| (this._DimTvcLine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimTvcLine.Entity = null;
						previousValue.TvcForecastFacts.Remove(this);
					}
					this._DimTvcLine.Entity = value;
					if ((value != null))
					{
						value.TvcForecastFacts.Add(this);
						this._LineNumberId = value.Id;
					}
					else
					{
						this._LineNumberId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimTvcLine");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcRate_TvcForecastFact", Storage="_DimTvcRate", ThisKey="RateId", OtherKey="Id", IsForeignKey=true)]
		public DimTvcRate DimTvcRate
		{
			get
			{
				return this._DimTvcRate.Entity;
			}
			set
			{
				DimTvcRate previousValue = this._DimTvcRate.Entity;
				if (((previousValue != value) 
							|| (this._DimTvcRate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimTvcRate.Entity = null;
						previousValue.TvcForecastFacts.Remove(this);
					}
					this._DimTvcRate.Entity = value;
					if ((value != null))
					{
						value.TvcForecastFacts.Add(this);
						this._RateId = value.Id;
					}
					else
					{
						this._RateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimTvcRate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcStage_TvcForecastFact", Storage="_DimTvcStage", ThisKey="TvcStageId", OtherKey="Id", IsForeignKey=true)]
		public DimTvcStage DimTvcStage
		{
			get
			{
				return this._DimTvcStage.Entity;
			}
			set
			{
				DimTvcStage previousValue = this._DimTvcStage.Entity;
				if (((previousValue != value) 
							|| (this._DimTvcStage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimTvcStage.Entity = null;
						previousValue.TvcForecastFacts.Remove(this);
					}
					this._DimTvcStage.Entity = value;
					if ((value != null))
					{
						value.TvcForecastFacts.Add(this);
						this._TvcStageId = value.Id;
					}
					else
					{
						this._TvcStageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimTvcStage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcStatuse_TvcForecastFact", Storage="_DimTvcStatuse", ThisKey="TvcStatusId", OtherKey="Id", IsForeignKey=true)]
		public DimTvcStatuse DimTvcStatuse
		{
			get
			{
				return this._DimTvcStatuse.Entity;
			}
			set
			{
				DimTvcStatuse previousValue = this._DimTvcStatuse.Entity;
				if (((previousValue != value) 
							|| (this._DimTvcStatuse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimTvcStatuse.Entity = null;
						previousValue.TvcForecastFacts.Remove(this);
					}
					this._DimTvcStatuse.Entity = value;
					if ((value != null))
					{
						value.TvcForecastFacts.Add(this);
						this._TvcStatusId = value.Id;
					}
					else
					{
						this._TvcStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimTvcStatuse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcSubstation_TvcForecastFact", Storage="_DimTvcSubstation", ThisKey="SubstationId", OtherKey="Id", IsForeignKey=true)]
		public DimTvcSubstation DimTvcSubstation
		{
			get
			{
				return this._DimTvcSubstation.Entity;
			}
			set
			{
				DimTvcSubstation previousValue = this._DimTvcSubstation.Entity;
				if (((previousValue != value) 
							|| (this._DimTvcSubstation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimTvcSubstation.Entity = null;
						previousValue.TvcForecastFacts.Remove(this);
					}
					this._DimTvcSubstation.Entity = value;
					if ((value != null))
					{
						value.TvcForecastFacts.Add(this);
						this._SubstationId = value.Id;
					}
					else
					{
						this._SubstationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimTvcSubstation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcTimePeriod_TvcForecastFact", Storage="_DimTvcTimePeriod", ThisKey="TimePeriodId", OtherKey="Id", IsForeignKey=true)]
		public DimTvcTimePeriod DimTvcTimePeriod
		{
			get
			{
				return this._DimTvcTimePeriod.Entity;
			}
			set
			{
				DimTvcTimePeriod previousValue = this._DimTvcTimePeriod.Entity;
				if (((previousValue != value) 
							|| (this._DimTvcTimePeriod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimTvcTimePeriod.Entity = null;
						previousValue.TvcForecastFacts.Remove(this);
					}
					this._DimTvcTimePeriod.Entity = value;
					if ((value != null))
					{
						value.TvcForecastFacts.Add(this);
						this._TimePeriodId = value.Id;
					}
					else
					{
						this._TimePeriodId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimTvcTimePeriod");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcTransServiceRequest_TvcForecastFact", Storage="_DimTvcTransServiceRequest", ThisKey="TsrId", OtherKey="Id", IsForeignKey=true)]
		public DimTvcTransServiceRequest DimTvcTransServiceRequest
		{
			get
			{
				return this._DimTvcTransServiceRequest.Entity;
			}
			set
			{
				DimTvcTransServiceRequest previousValue = this._DimTvcTransServiceRequest.Entity;
				if (((previousValue != value) 
							|| (this._DimTvcTransServiceRequest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimTvcTransServiceRequest.Entity = null;
						previousValue.TvcForecastFacts.Remove(this);
					}
					this._DimTvcTransServiceRequest.Entity = value;
					if ((value != null))
					{
						value.TvcForecastFacts.Add(this);
						this._TsrId = value.Id;
					}
					else
					{
						this._TsrId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimTvcTransServiceRequest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcCustomer_TvcForecastFact", Storage="_DimTvcCustomer", ThisKey="TvcCustomerId", OtherKey="Id", IsForeignKey=true)]
		public DimTvcCustomer DimTvcCustomer
		{
			get
			{
				return this._DimTvcCustomer.Entity;
			}
			set
			{
				DimTvcCustomer previousValue = this._DimTvcCustomer.Entity;
				if (((previousValue != value) 
							|| (this._DimTvcCustomer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimTvcCustomer.Entity = null;
						previousValue.TvcForecastFacts.Remove(this);
					}
					this._DimTvcCustomer.Entity = value;
					if ((value != null))
					{
						value.TvcForecastFacts.Add(this);
						this._TvcCustomerId = value.Id;
					}
					else
					{
						this._TvcCustomerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimTvcCustomer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TvcForecast_TvcForecastFact", Storage="_TvcForecast", ThisKey="TvcForecastId", OtherKey="Id", IsForeignKey=true)]
		public TvcForecast TvcForecast
		{
			get
			{
				return this._TvcForecast.Entity;
			}
			set
			{
				TvcForecast previousValue = this._TvcForecast.Entity;
				if (((previousValue != value) 
							|| (this._TvcForecast.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TvcForecast.Entity = null;
						previousValue.TvcForecastFacts.Remove(this);
					}
					this._TvcForecast.Entity = value;
					if ((value != null))
					{
						value.TvcForecastFacts.Add(this);
						this._TvcForecastId = value.Id;
					}
					else
					{
						this._TvcForecastId = default(int);
					}
					this.SendPropertyChanged("TvcForecast");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcTransVoltCustomer_TvcForecastFact", Storage="_DimTvcTransVoltCustomer", ThisKey="TransmissionVoltageCustomerId", OtherKey="Id", IsForeignKey=true)]
		public DimTvcTransVoltCustomer DimTvcTransVoltCustomer
		{
			get
			{
				return this._DimTvcTransVoltCustomer.Entity;
			}
			set
			{
				DimTvcTransVoltCustomer previousValue = this._DimTvcTransVoltCustomer.Entity;
				if (((previousValue != value) 
							|| (this._DimTvcTransVoltCustomer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimTvcTransVoltCustomer.Entity = null;
						previousValue.TvcForecastFacts.Remove(this);
					}
					this._DimTvcTransVoltCustomer.Entity = value;
					if ((value != null))
					{
						value.TvcForecastFacts.Add(this);
						this._TransmissionVoltageCustomerId = value.Id;
					}
					else
					{
						this._TransmissionVoltageCustomerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimTvcTransVoltCustomer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="forecast.DimTvcTransVoltCustomers")]
	public partial class DimTvcTransVoltCustomer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ProjectName;
		
		private string _ProjectCode;
		
		private System.DateTime _DateCreated;
		
		private string _UserCreated;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntitySet<TvcForecastFact> _TvcForecastFacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnProjectCodeChanging(string value);
    partial void OnProjectCodeChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedChanging(string value);
    partial void OnUserCreatedChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public DimTvcTransVoltCustomer()
		{
			this._TvcForecastFacts = new EntitySet<TvcForecastFact>(new Action<TvcForecastFact>(this.attach_TvcForecastFacts), new Action<TvcForecastFact>(this.detach_TvcForecastFacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectCode", DbType="NVarChar(255)")]
		public string ProjectCode
		{
			get
			{
				return this._ProjectCode;
			}
			set
			{
				if ((this._ProjectCode != value))
				{
					this.OnProjectCodeChanging(value);
					this.SendPropertyChanging();
					this._ProjectCode = value;
					this.SendPropertyChanged("ProjectCode");
					this.OnProjectCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreated", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserCreated
		{
			get
			{
				return this._UserCreated;
			}
			set
			{
				if ((this._UserCreated != value))
				{
					this.OnUserCreatedChanging(value);
					this.SendPropertyChanging();
					this._UserCreated = value;
					this.SendPropertyChanged("UserCreated");
					this.OnUserCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTvcTransVoltCustomer_TvcForecastFact", Storage="_TvcForecastFacts", ThisKey="Id", OtherKey="TransmissionVoltageCustomerId")]
		public EntitySet<TvcForecastFact> TvcForecastFacts
		{
			get
			{
				return this._TvcForecastFacts;
			}
			set
			{
				this._TvcForecastFacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcTransVoltCustomer = this;
		}
		
		private void detach_TvcForecastFacts(TvcForecastFact entity)
		{
			this.SendPropertyChanging();
			entity.DimTvcTransVoltCustomer = null;
		}
	}
}
#pragma warning restore 1591
