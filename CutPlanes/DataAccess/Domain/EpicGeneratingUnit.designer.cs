#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EpicDataAccess.Domain.GeneratingUnits
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EpicDevNew")]
	public partial class EpicGeneratingUnitDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGeneratingUnit(GeneratingUnit instance);
    partial void UpdateGeneratingUnit(GeneratingUnit instance);
    partial void DeleteGeneratingUnit(GeneratingUnit instance);
    partial void InsertPlant(Plant instance);
    partial void UpdatePlant(Plant instance);
    partial void DeletePlant(Plant instance);
    partial void InsertLinkNote(LinkNote instance);
    partial void UpdateLinkNote(LinkNote instance);
    partial void DeleteLinkNote(LinkNote instance);
    partial void InsertNote(Note instance);
    partial void UpdateNote(Note instance);
    partial void DeleteNote(Note instance);
    partial void InsertNameTypeAuthority(NameTypeAuthority instance);
    partial void UpdateNameTypeAuthority(NameTypeAuthority instance);
    partial void DeleteNameTypeAuthority(NameTypeAuthority instance);
    partial void InsertNameType(NameType instance);
    partial void UpdateNameType(NameType instance);
    partial void DeleteNameType(NameType instance);
    partial void InsertGeneratorStatuse(GeneratorStatuse instance);
    partial void UpdateGeneratorStatuse(GeneratorStatuse instance);
    partial void DeleteGeneratorStatuse(GeneratorStatuse instance);
    partial void InsertName(Name instance);
    partial void UpdateName(Name instance);
    partial void DeleteName(Name instance);
    partial void InsertGeneratorType(GeneratorType instance);
    partial void UpdateGeneratorType(GeneratorType instance);
    partial void DeleteGeneratorType(GeneratorType instance);
    partial void InsertLine(Line instance);
    partial void UpdateLine(Line instance);
    partial void DeleteLine(Line instance);
    partial void InsertSubstation(Substation instance);
    partial void UpdateSubstation(Substation instance);
    partial void DeleteSubstation(Substation instance);
    partial void InsertMeter(Meter instance);
    partial void UpdateMeter(Meter instance);
    partial void DeleteMeter(Meter instance);
    partial void InsertVoltageLevel(VoltageLevel instance);
    partial void UpdateVoltageLevel(VoltageLevel instance);
    partial void DeleteVoltageLevel(VoltageLevel instance);
    #endregion
		
		public EpicGeneratingUnitDataContext() : 
				base(global::EpicDataAccess.Properties.Settings.Default.EpicDevNewConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EpicGeneratingUnitDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EpicGeneratingUnitDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EpicGeneratingUnitDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EpicGeneratingUnitDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<GeneratingUnit> GeneratingUnits
		{
			get
			{
				return this.GetTable<GeneratingUnit>();
			}
		}
		
		public System.Data.Linq.Table<Plant> Plants
		{
			get
			{
				return this.GetTable<Plant>();
			}
		}
		
		public System.Data.Linq.Table<LinkNote> LinkNotes
		{
			get
			{
				return this.GetTable<LinkNote>();
			}
		}
		
		public System.Data.Linq.Table<Note> Notes
		{
			get
			{
				return this.GetTable<Note>();
			}
		}
		
		public System.Data.Linq.Table<NameTypeAuthority> NameTypeAuthorities
		{
			get
			{
				return this.GetTable<NameTypeAuthority>();
			}
		}
		
		public System.Data.Linq.Table<NameType> NameTypes
		{
			get
			{
				return this.GetTable<NameType>();
			}
		}
		
		public System.Data.Linq.Table<NotesType> NotesTypes
		{
			get
			{
				return this.GetTable<NotesType>();
			}
		}
		
		public System.Data.Linq.Table<GeneratorStatuse> GeneratorStatuses
		{
			get
			{
				return this.GetTable<GeneratorStatuse>();
			}
		}
		
		public System.Data.Linq.Table<Name> Names
		{
			get
			{
				return this.GetTable<Name>();
			}
		}
		
		public System.Data.Linq.Table<GeneratorType> GeneratorTypes
		{
			get
			{
				return this.GetTable<GeneratorType>();
			}
		}
		
		public System.Data.Linq.Table<Line> Lines
		{
			get
			{
				return this.GetTable<Line>();
			}
		}
		
		public System.Data.Linq.Table<Substation> Substations
		{
			get
			{
				return this.GetTable<Substation>();
			}
		}
		
		public System.Data.Linq.Table<Meter> Meters
		{
			get
			{
				return this.GetTable<Meter>();
			}
		}
		
		public System.Data.Linq.Table<VoltageLevel> VoltageLevels
		{
			get
			{
				return this.GetTable<VoltageLevel>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.GeneratingUnits")]
	public partial class GeneratingUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private int _GeneratorStatusID;
		
		private System.Nullable<int> _GeneratorTypeID;
		
		private string _Description;
		
		private bool _IsSyncCondenserCapable;
		
		private System.Nullable<System.DateTime> _EstimatedInServiceDate;
		
		private System.Nullable<bool> _IsNitsNominated;
		
		private System.Nullable<int> _EstimatedLifeInYr;
		
		private System.Nullable<System.DateTime> _ActualInServiceDate;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private int _VoltageLevelId;
		
		private System.Nullable<int> _PlantId;
		
		private System.Nullable<decimal> _MaxOperatingP;
		
		private System.Nullable<decimal> _MinOperatingP;
		
		private System.Nullable<decimal> _InitialP;
		
		private System.Nullable<decimal> _NormalPF;
		
		private System.Nullable<decimal> _LongPF;
		
		private System.Nullable<decimal> _ShortPF;
		
		private EntitySet<LinkNote> _LinkNotes;
		
		private EntitySet<Name> _Names;
		
		private EntityRef<Plant> _Plant;
		
		private EntityRef<VoltageLevel> _VoltageLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnGeneratorStatusIDChanging(int value);
    partial void OnGeneratorStatusIDChanged();
    partial void OnGeneratorTypeIDChanging(System.Nullable<int> value);
    partial void OnGeneratorTypeIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsSyncCondenserCapableChanging(bool value);
    partial void OnIsSyncCondenserCapableChanged();
    partial void OnEstimatedInServiceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEstimatedInServiceDateChanged();
    partial void OnIsNitsNominatedChanging(System.Nullable<bool> value);
    partial void OnIsNitsNominatedChanged();
    partial void OnEstimatedLifeInYrChanging(System.Nullable<int> value);
    partial void OnEstimatedLifeInYrChanged();
    partial void OnActualInServiceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualInServiceDateChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnVoltageLevelIdChanging(int value);
    partial void OnVoltageLevelIdChanged();
    partial void OnPlantIdChanging(System.Nullable<int> value);
    partial void OnPlantIdChanged();
    partial void OnMaxOperatingPChanging(System.Nullable<decimal> value);
    partial void OnMaxOperatingPChanged();
    partial void OnMinOperatingPChanging(System.Nullable<decimal> value);
    partial void OnMinOperatingPChanged();
    partial void OnInitialPChanging(System.Nullable<decimal> value);
    partial void OnInitialPChanged();
    partial void OnNormalPFChanging(System.Nullable<decimal> value);
    partial void OnNormalPFChanged();
    partial void OnLongPFChanging(System.Nullable<decimal> value);
    partial void OnLongPFChanged();
    partial void OnShortPFChanging(System.Nullable<decimal> value);
    partial void OnShortPFChanged();
    #endregion
		
		public GeneratingUnit()
		{
			this._LinkNotes = new EntitySet<LinkNote>(new Action<LinkNote>(this.attach_LinkNotes), new Action<LinkNote>(this.detach_LinkNotes));
			this._Names = new EntitySet<Name>(new Action<Name>(this.attach_Names), new Action<Name>(this.detach_Names));
			this._Plant = default(EntityRef<Plant>);
			this._VoltageLevel = default(EntityRef<VoltageLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratorStatusID", DbType="Int NOT NULL")]
		public int GeneratorStatusID
		{
			get
			{
				return this._GeneratorStatusID;
			}
			set
			{
				if ((this._GeneratorStatusID != value))
				{
					this.OnGeneratorStatusIDChanging(value);
					this.SendPropertyChanging();
					this._GeneratorStatusID = value;
					this.SendPropertyChanged("GeneratorStatusID");
					this.OnGeneratorStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratorTypeID", DbType="Int")]
		public System.Nullable<int> GeneratorTypeID
		{
			get
			{
				return this._GeneratorTypeID;
			}
			set
			{
				if ((this._GeneratorTypeID != value))
				{
					this.OnGeneratorTypeIDChanging(value);
					this.SendPropertyChanging();
					this._GeneratorTypeID = value;
					this.SendPropertyChanged("GeneratorTypeID");
					this.OnGeneratorTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSyncCondenserCapable", DbType="Bit NOT NULL")]
		public bool IsSyncCondenserCapable
		{
			get
			{
				return this._IsSyncCondenserCapable;
			}
			set
			{
				if ((this._IsSyncCondenserCapable != value))
				{
					this.OnIsSyncCondenserCapableChanging(value);
					this.SendPropertyChanging();
					this._IsSyncCondenserCapable = value;
					this.SendPropertyChanged("IsSyncCondenserCapable");
					this.OnIsSyncCondenserCapableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedInServiceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EstimatedInServiceDate
		{
			get
			{
				return this._EstimatedInServiceDate;
			}
			set
			{
				if ((this._EstimatedInServiceDate != value))
				{
					this.OnEstimatedInServiceDateChanging(value);
					this.SendPropertyChanging();
					this._EstimatedInServiceDate = value;
					this.SendPropertyChanged("EstimatedInServiceDate");
					this.OnEstimatedInServiceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNitsNominated", DbType="Bit")]
		public System.Nullable<bool> IsNitsNominated
		{
			get
			{
				return this._IsNitsNominated;
			}
			set
			{
				if ((this._IsNitsNominated != value))
				{
					this.OnIsNitsNominatedChanging(value);
					this.SendPropertyChanging();
					this._IsNitsNominated = value;
					this.SendPropertyChanged("IsNitsNominated");
					this.OnIsNitsNominatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedLifeInYr", DbType="Int")]
		public System.Nullable<int> EstimatedLifeInYr
		{
			get
			{
				return this._EstimatedLifeInYr;
			}
			set
			{
				if ((this._EstimatedLifeInYr != value))
				{
					this.OnEstimatedLifeInYrChanging(value);
					this.SendPropertyChanging();
					this._EstimatedLifeInYr = value;
					this.SendPropertyChanged("EstimatedLifeInYr");
					this.OnEstimatedLifeInYrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualInServiceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActualInServiceDate
		{
			get
			{
				return this._ActualInServiceDate;
			}
			set
			{
				if ((this._ActualInServiceDate != value))
				{
					this.OnActualInServiceDateChanging(value);
					this.SendPropertyChanging();
					this._ActualInServiceDate = value;
					this.SendPropertyChanged("ActualInServiceDate");
					this.OnActualInServiceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoltageLevelId", DbType="Int NOT NULL")]
		public int VoltageLevelId
		{
			get
			{
				return this._VoltageLevelId;
			}
			set
			{
				if ((this._VoltageLevelId != value))
				{
					if (this._VoltageLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoltageLevelIdChanging(value);
					this.SendPropertyChanging();
					this._VoltageLevelId = value;
					this.SendPropertyChanged("VoltageLevelId");
					this.OnVoltageLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantId", DbType="Int")]
		public System.Nullable<int> PlantId
		{
			get
			{
				return this._PlantId;
			}
			set
			{
				if ((this._PlantId != value))
				{
					if (this._Plant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlantIdChanging(value);
					this.SendPropertyChanging();
					this._PlantId = value;
					this.SendPropertyChanged("PlantId");
					this.OnPlantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxOperatingP", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> MaxOperatingP
		{
			get
			{
				return this._MaxOperatingP;
			}
			set
			{
				if ((this._MaxOperatingP != value))
				{
					this.OnMaxOperatingPChanging(value);
					this.SendPropertyChanging();
					this._MaxOperatingP = value;
					this.SendPropertyChanged("MaxOperatingP");
					this.OnMaxOperatingPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinOperatingP", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> MinOperatingP
		{
			get
			{
				return this._MinOperatingP;
			}
			set
			{
				if ((this._MinOperatingP != value))
				{
					this.OnMinOperatingPChanging(value);
					this.SendPropertyChanging();
					this._MinOperatingP = value;
					this.SendPropertyChanged("MinOperatingP");
					this.OnMinOperatingPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialP", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> InitialP
		{
			get
			{
				return this._InitialP;
			}
			set
			{
				if ((this._InitialP != value))
				{
					this.OnInitialPChanging(value);
					this.SendPropertyChanging();
					this._InitialP = value;
					this.SendPropertyChanged("InitialP");
					this.OnInitialPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NormalPF", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> NormalPF
		{
			get
			{
				return this._NormalPF;
			}
			set
			{
				if ((this._NormalPF != value))
				{
					this.OnNormalPFChanging(value);
					this.SendPropertyChanging();
					this._NormalPF = value;
					this.SendPropertyChanged("NormalPF");
					this.OnNormalPFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongPF", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> LongPF
		{
			get
			{
				return this._LongPF;
			}
			set
			{
				if ((this._LongPF != value))
				{
					this.OnLongPFChanging(value);
					this.SendPropertyChanging();
					this._LongPF = value;
					this.SendPropertyChanged("LongPF");
					this.OnLongPFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortPF", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> ShortPF
		{
			get
			{
				return this._ShortPF;
			}
			set
			{
				if ((this._ShortPF != value))
				{
					this.OnShortPFChanging(value);
					this.SendPropertyChanging();
					this._ShortPF = value;
					this.SendPropertyChanged("ShortPF");
					this.OnShortPFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneratingUnit_LinkNote", Storage="_LinkNotes", ThisKey="Id", OtherKey="GeneratingUnitId")]
		public EntitySet<LinkNote> LinkNotes
		{
			get
			{
				return this._LinkNotes;
			}
			set
			{
				this._LinkNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneratingUnit_Name", Storage="_Names", ThisKey="Id", OtherKey="GeneratingUnitId")]
		public EntitySet<Name> Names
		{
			get
			{
				return this._Names;
			}
			set
			{
				this._Names.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plant_GeneratingUnit", Storage="_Plant", ThisKey="PlantId", OtherKey="Id", IsForeignKey=true)]
		public Plant Plant
		{
			get
			{
				return this._Plant.Entity;
			}
			set
			{
				Plant previousValue = this._Plant.Entity;
				if (((previousValue != value) 
							|| (this._Plant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Plant.Entity = null;
						previousValue.GeneratingUnits.Remove(this);
					}
					this._Plant.Entity = value;
					if ((value != null))
					{
						value.GeneratingUnits.Add(this);
						this._PlantId = value.Id;
					}
					else
					{
						this._PlantId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Plant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoltageLevel_GeneratingUnit", Storage="_VoltageLevel", ThisKey="VoltageLevelId", OtherKey="Id", IsForeignKey=true)]
		public VoltageLevel VoltageLevel
		{
			get
			{
				return this._VoltageLevel.Entity;
			}
			set
			{
				VoltageLevel previousValue = this._VoltageLevel.Entity;
				if (((previousValue != value) 
							|| (this._VoltageLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VoltageLevel.Entity = null;
						previousValue.GeneratingUnits.Remove(this);
					}
					this._VoltageLevel.Entity = value;
					if ((value != null))
					{
						value.GeneratingUnits.Add(this);
						this._VoltageLevelId = value.Id;
					}
					else
					{
						this._VoltageLevelId = default(int);
					}
					this.SendPropertyChanged("VoltageLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.GeneratingUnit = this;
		}
		
		private void detach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.GeneratingUnit = null;
		}
		
		private void attach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.GeneratingUnit = this;
		}
		
		private void detach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.GeneratingUnit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.Plants")]
	public partial class Plant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private int _PlantStatusId;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _EstmatedInServiceDate;
		
		private System.Nullable<System.DateTime> _ActualInServiceDate;
		
		private System.Nullable<System.DateTime> _EstimatedDecommissionDate;
		
		private string _SingleLineDiagramUri;
		
		private System.Nullable<int> _ElectricityPurchaseAgreementId;
		
		private System.Nullable<int> _MeterId;
		
		private EntitySet<GeneratingUnit> _GeneratingUnits;
		
		private EntitySet<LinkNote> _LinkNotes;
		
		private EntitySet<Name> _Names;
		
		private EntityRef<Meter> _Meter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnPlantStatusIdChanging(int value);
    partial void OnPlantStatusIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnEstmatedInServiceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEstmatedInServiceDateChanged();
    partial void OnActualInServiceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualInServiceDateChanged();
    partial void OnEstimatedDecommissionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEstimatedDecommissionDateChanged();
    partial void OnSingleLineDiagramUriChanging(string value);
    partial void OnSingleLineDiagramUriChanged();
    partial void OnElectricityPurchaseAgreementIdChanging(System.Nullable<int> value);
    partial void OnElectricityPurchaseAgreementIdChanged();
    partial void OnMeterIdChanging(System.Nullable<int> value);
    partial void OnMeterIdChanged();
    #endregion
		
		public Plant()
		{
			this._GeneratingUnits = new EntitySet<GeneratingUnit>(new Action<GeneratingUnit>(this.attach_GeneratingUnits), new Action<GeneratingUnit>(this.detach_GeneratingUnits));
			this._LinkNotes = new EntitySet<LinkNote>(new Action<LinkNote>(this.attach_LinkNotes), new Action<LinkNote>(this.detach_LinkNotes));
			this._Names = new EntitySet<Name>(new Action<Name>(this.attach_Names), new Action<Name>(this.detach_Names));
			this._Meter = default(EntityRef<Meter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantStatusId", DbType="Int NOT NULL")]
		public int PlantStatusId
		{
			get
			{
				return this._PlantStatusId;
			}
			set
			{
				if ((this._PlantStatusId != value))
				{
					this.OnPlantStatusIdChanging(value);
					this.SendPropertyChanging();
					this._PlantStatusId = value;
					this.SendPropertyChanged("PlantStatusId");
					this.OnPlantStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstmatedInServiceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EstmatedInServiceDate
		{
			get
			{
				return this._EstmatedInServiceDate;
			}
			set
			{
				if ((this._EstmatedInServiceDate != value))
				{
					this.OnEstmatedInServiceDateChanging(value);
					this.SendPropertyChanging();
					this._EstmatedInServiceDate = value;
					this.SendPropertyChanged("EstmatedInServiceDate");
					this.OnEstmatedInServiceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualInServiceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActualInServiceDate
		{
			get
			{
				return this._ActualInServiceDate;
			}
			set
			{
				if ((this._ActualInServiceDate != value))
				{
					this.OnActualInServiceDateChanging(value);
					this.SendPropertyChanging();
					this._ActualInServiceDate = value;
					this.SendPropertyChanged("ActualInServiceDate");
					this.OnActualInServiceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedDecommissionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EstimatedDecommissionDate
		{
			get
			{
				return this._EstimatedDecommissionDate;
			}
			set
			{
				if ((this._EstimatedDecommissionDate != value))
				{
					this.OnEstimatedDecommissionDateChanging(value);
					this.SendPropertyChanging();
					this._EstimatedDecommissionDate = value;
					this.SendPropertyChanged("EstimatedDecommissionDate");
					this.OnEstimatedDecommissionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SingleLineDiagramUri", DbType="VarChar(255)")]
		public string SingleLineDiagramUri
		{
			get
			{
				return this._SingleLineDiagramUri;
			}
			set
			{
				if ((this._SingleLineDiagramUri != value))
				{
					this.OnSingleLineDiagramUriChanging(value);
					this.SendPropertyChanging();
					this._SingleLineDiagramUri = value;
					this.SendPropertyChanged("SingleLineDiagramUri");
					this.OnSingleLineDiagramUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectricityPurchaseAgreementId", DbType="Int")]
		public System.Nullable<int> ElectricityPurchaseAgreementId
		{
			get
			{
				return this._ElectricityPurchaseAgreementId;
			}
			set
			{
				if ((this._ElectricityPurchaseAgreementId != value))
				{
					this.OnElectricityPurchaseAgreementIdChanging(value);
					this.SendPropertyChanging();
					this._ElectricityPurchaseAgreementId = value;
					this.SendPropertyChanged("ElectricityPurchaseAgreementId");
					this.OnElectricityPurchaseAgreementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterId", DbType="Int")]
		public System.Nullable<int> MeterId
		{
			get
			{
				return this._MeterId;
			}
			set
			{
				if ((this._MeterId != value))
				{
					if (this._Meter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeterIdChanging(value);
					this.SendPropertyChanging();
					this._MeterId = value;
					this.SendPropertyChanged("MeterId");
					this.OnMeterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plant_GeneratingUnit", Storage="_GeneratingUnits", ThisKey="Id", OtherKey="PlantId")]
		public EntitySet<GeneratingUnit> GeneratingUnits
		{
			get
			{
				return this._GeneratingUnits;
			}
			set
			{
				this._GeneratingUnits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plant_LinkNote", Storage="_LinkNotes", ThisKey="Id", OtherKey="PlantId")]
		public EntitySet<LinkNote> LinkNotes
		{
			get
			{
				return this._LinkNotes;
			}
			set
			{
				this._LinkNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plant_Name", Storage="_Names", ThisKey="Id", OtherKey="PlantId")]
		public EntitySet<Name> Names
		{
			get
			{
				return this._Names;
			}
			set
			{
				this._Names.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_Plant", Storage="_Meter", ThisKey="MeterId", OtherKey="Id", IsForeignKey=true)]
		public Meter Meter
		{
			get
			{
				return this._Meter.Entity;
			}
			set
			{
				Meter previousValue = this._Meter.Entity;
				if (((previousValue != value) 
							|| (this._Meter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meter.Entity = null;
						previousValue.Plants.Remove(this);
					}
					this._Meter.Entity = value;
					if ((value != null))
					{
						value.Plants.Add(this);
						this._MeterId = value.Id;
					}
					else
					{
						this._MeterId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Meter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GeneratingUnits(GeneratingUnit entity)
		{
			this.SendPropertyChanging();
			entity.Plant = this;
		}
		
		private void detach_GeneratingUnits(GeneratingUnit entity)
		{
			this.SendPropertyChanging();
			entity.Plant = null;
		}
		
		private void attach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.Plant = this;
		}
		
		private void detach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.Plant = null;
		}
		
		private void attach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.Plant = this;
		}
		
		private void detach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.Plant = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="link.LinkNotes")]
	public partial class LinkNote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _NoteId;
		
		private System.Nullable<int> _PlantId;
		
		private System.Nullable<int> _SubstationId;
		
		private System.Nullable<int> _SynchronousMachineId;
		
		private System.Nullable<int> _GeneratingUnitId;
		
		private System.Nullable<int> _GeneratorFactorId;
		
		private System.Nullable<int> _NitsReportId;
		
		private EntityRef<GeneratingUnit> _GeneratingUnit;
		
		private EntityRef<Plant> _Plant;
		
		private EntityRef<Note> _Note;
		
		private EntityRef<Substation> _Substation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNoteIdChanging(int value);
    partial void OnNoteIdChanged();
    partial void OnPlantIdChanging(System.Nullable<int> value);
    partial void OnPlantIdChanged();
    partial void OnSubstationIdChanging(System.Nullable<int> value);
    partial void OnSubstationIdChanged();
    partial void OnSynchronousMachineIdChanging(System.Nullable<int> value);
    partial void OnSynchronousMachineIdChanged();
    partial void OnGeneratingUnitIdChanging(System.Nullable<int> value);
    partial void OnGeneratingUnitIdChanged();
    partial void OnGeneratorFactorIdChanging(System.Nullable<int> value);
    partial void OnGeneratorFactorIdChanged();
    partial void OnNitsReportIdChanging(System.Nullable<int> value);
    partial void OnNitsReportIdChanged();
    #endregion
		
		public LinkNote()
		{
			this._GeneratingUnit = default(EntityRef<GeneratingUnit>);
			this._Plant = default(EntityRef<Plant>);
			this._Note = default(EntityRef<Note>);
			this._Substation = default(EntityRef<Substation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoteId", DbType="Int NOT NULL")]
		public int NoteId
		{
			get
			{
				return this._NoteId;
			}
			set
			{
				if ((this._NoteId != value))
				{
					if (this._Note.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNoteIdChanging(value);
					this.SendPropertyChanging();
					this._NoteId = value;
					this.SendPropertyChanged("NoteId");
					this.OnNoteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantId", DbType="Int")]
		public System.Nullable<int> PlantId
		{
			get
			{
				return this._PlantId;
			}
			set
			{
				if ((this._PlantId != value))
				{
					if (this._Plant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlantIdChanging(value);
					this.SendPropertyChanging();
					this._PlantId = value;
					this.SendPropertyChanged("PlantId");
					this.OnPlantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubstationId", DbType="Int")]
		public System.Nullable<int> SubstationId
		{
			get
			{
				return this._SubstationId;
			}
			set
			{
				if ((this._SubstationId != value))
				{
					if (this._Substation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstationIdChanging(value);
					this.SendPropertyChanging();
					this._SubstationId = value;
					this.SendPropertyChanged("SubstationId");
					this.OnSubstationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SynchronousMachineId", DbType="Int")]
		public System.Nullable<int> SynchronousMachineId
		{
			get
			{
				return this._SynchronousMachineId;
			}
			set
			{
				if ((this._SynchronousMachineId != value))
				{
					this.OnSynchronousMachineIdChanging(value);
					this.SendPropertyChanging();
					this._SynchronousMachineId = value;
					this.SendPropertyChanged("SynchronousMachineId");
					this.OnSynchronousMachineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratingUnitId", DbType="Int")]
		public System.Nullable<int> GeneratingUnitId
		{
			get
			{
				return this._GeneratingUnitId;
			}
			set
			{
				if ((this._GeneratingUnitId != value))
				{
					if (this._GeneratingUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeneratingUnitIdChanging(value);
					this.SendPropertyChanging();
					this._GeneratingUnitId = value;
					this.SendPropertyChanged("GeneratingUnitId");
					this.OnGeneratingUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratorFactorId", DbType="Int")]
		public System.Nullable<int> GeneratorFactorId
		{
			get
			{
				return this._GeneratorFactorId;
			}
			set
			{
				if ((this._GeneratorFactorId != value))
				{
					this.OnGeneratorFactorIdChanging(value);
					this.SendPropertyChanging();
					this._GeneratorFactorId = value;
					this.SendPropertyChanged("GeneratorFactorId");
					this.OnGeneratorFactorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NitsReportId", DbType="Int")]
		public System.Nullable<int> NitsReportId
		{
			get
			{
				return this._NitsReportId;
			}
			set
			{
				if ((this._NitsReportId != value))
				{
					this.OnNitsReportIdChanging(value);
					this.SendPropertyChanging();
					this._NitsReportId = value;
					this.SendPropertyChanged("NitsReportId");
					this.OnNitsReportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneratingUnit_LinkNote", Storage="_GeneratingUnit", ThisKey="GeneratingUnitId", OtherKey="Id", IsForeignKey=true)]
		public GeneratingUnit GeneratingUnit
		{
			get
			{
				return this._GeneratingUnit.Entity;
			}
			set
			{
				GeneratingUnit previousValue = this._GeneratingUnit.Entity;
				if (((previousValue != value) 
							|| (this._GeneratingUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneratingUnit.Entity = null;
						previousValue.LinkNotes.Remove(this);
					}
					this._GeneratingUnit.Entity = value;
					if ((value != null))
					{
						value.LinkNotes.Add(this);
						this._GeneratingUnitId = value.Id;
					}
					else
					{
						this._GeneratingUnitId = default(Nullable<int>);
					}
					this.SendPropertyChanged("GeneratingUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plant_LinkNote", Storage="_Plant", ThisKey="PlantId", OtherKey="Id", IsForeignKey=true)]
		public Plant Plant
		{
			get
			{
				return this._Plant.Entity;
			}
			set
			{
				Plant previousValue = this._Plant.Entity;
				if (((previousValue != value) 
							|| (this._Plant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Plant.Entity = null;
						previousValue.LinkNotes.Remove(this);
					}
					this._Plant.Entity = value;
					if ((value != null))
					{
						value.LinkNotes.Add(this);
						this._PlantId = value.Id;
					}
					else
					{
						this._PlantId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Plant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Note_LinkNote", Storage="_Note", ThisKey="NoteId", OtherKey="Id", IsForeignKey=true)]
		public Note Note
		{
			get
			{
				return this._Note.Entity;
			}
			set
			{
				Note previousValue = this._Note.Entity;
				if (((previousValue != value) 
							|| (this._Note.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Note.Entity = null;
						previousValue.LinkNotes.Remove(this);
					}
					this._Note.Entity = value;
					if ((value != null))
					{
						value.LinkNotes.Add(this);
						this._NoteId = value.Id;
					}
					else
					{
						this._NoteId = default(int);
					}
					this.SendPropertyChanged("Note");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_LinkNote", Storage="_Substation", ThisKey="SubstationId", OtherKey="Id", IsForeignKey=true)]
		public Substation Substation
		{
			get
			{
				return this._Substation.Entity;
			}
			set
			{
				Substation previousValue = this._Substation.Entity;
				if (((previousValue != value) 
							|| (this._Substation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Substation.Entity = null;
						previousValue.LinkNotes.Remove(this);
					}
					this._Substation.Entity = value;
					if ((value != null))
					{
						value.LinkNotes.Add(this);
						this._SubstationId = value.Id;
					}
					else
					{
						this._SubstationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Substation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="app.Notes")]
	public partial class Note : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _NotesLinkId;
		
		private string _DocumentUri;
		
		private string _Note1;
		
		private int _UserCreatedId;
		
		private System.DateTime _DatedCreated;
		
		private int _NotesTypeId;
		
		private System.Nullable<int> _FileReferenceId;
		
		private EntitySet<LinkNote> _LinkNotes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNotesLinkIdChanging(System.Nullable<int> value);
    partial void OnNotesLinkIdChanged();
    partial void OnDocumentUriChanging(string value);
    partial void OnDocumentUriChanged();
    partial void OnNote1Changing(string value);
    partial void OnNote1Changed();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnDatedCreatedChanging(System.DateTime value);
    partial void OnDatedCreatedChanged();
    partial void OnNotesTypeIdChanging(int value);
    partial void OnNotesTypeIdChanged();
    partial void OnFileReferenceIdChanging(System.Nullable<int> value);
    partial void OnFileReferenceIdChanged();
    #endregion
		
		public Note()
		{
			this._LinkNotes = new EntitySet<LinkNote>(new Action<LinkNote>(this.attach_LinkNotes), new Action<LinkNote>(this.detach_LinkNotes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotesLinkId", DbType="Int")]
		public System.Nullable<int> NotesLinkId
		{
			get
			{
				return this._NotesLinkId;
			}
			set
			{
				if ((this._NotesLinkId != value))
				{
					this.OnNotesLinkIdChanging(value);
					this.SendPropertyChanging();
					this._NotesLinkId = value;
					this.SendPropertyChanged("NotesLinkId");
					this.OnNotesLinkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentUri", DbType="NVarChar(255)")]
		public string DocumentUri
		{
			get
			{
				return this._DocumentUri;
			}
			set
			{
				if ((this._DocumentUri != value))
				{
					this.OnDocumentUriChanging(value);
					this.SendPropertyChanging();
					this._DocumentUri = value;
					this.SendPropertyChanged("DocumentUri");
					this.OnDocumentUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Note", Storage="_Note1", DbType="NVarChar(MAX)")]
		public string Note1
		{
			get
			{
				return this._Note1;
			}
			set
			{
				if ((this._Note1 != value))
				{
					this.OnNote1Changing(value);
					this.SendPropertyChanging();
					this._Note1 = value;
					this.SendPropertyChanged("Note1");
					this.OnNote1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatedCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DatedCreated
		{
			get
			{
				return this._DatedCreated;
			}
			set
			{
				if ((this._DatedCreated != value))
				{
					this.OnDatedCreatedChanging(value);
					this.SendPropertyChanging();
					this._DatedCreated = value;
					this.SendPropertyChanged("DatedCreated");
					this.OnDatedCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotesTypeId", DbType="Int NOT NULL")]
		public int NotesTypeId
		{
			get
			{
				return this._NotesTypeId;
			}
			set
			{
				if ((this._NotesTypeId != value))
				{
					this.OnNotesTypeIdChanging(value);
					this.SendPropertyChanging();
					this._NotesTypeId = value;
					this.SendPropertyChanged("NotesTypeId");
					this.OnNotesTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileReferenceId", DbType="Int")]
		public System.Nullable<int> FileReferenceId
		{
			get
			{
				return this._FileReferenceId;
			}
			set
			{
				if ((this._FileReferenceId != value))
				{
					this.OnFileReferenceIdChanging(value);
					this.SendPropertyChanging();
					this._FileReferenceId = value;
					this.SendPropertyChanged("FileReferenceId");
					this.OnFileReferenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Note_LinkNote", Storage="_LinkNotes", ThisKey="Id", OtherKey="NoteId")]
		public EntitySet<LinkNote> LinkNotes
		{
			get
			{
				return this._LinkNotes;
			}
			set
			{
				this._LinkNotes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.Note = this;
		}
		
		private void detach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.Note = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.NameTypeAuthorities")]
	public partial class NameTypeAuthority : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Description;
		
		private string _Name;
		
		private EntitySet<NameType> _NameTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public NameTypeAuthority()
		{
			this._NameTypes = new EntitySet<NameType>(new Action<NameType>(this.attach_NameTypes), new Action<NameType>(this.detach_NameTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NameTypeAuthority_NameType", Storage="_NameTypes", ThisKey="Id", OtherKey="NameTypeAuthoritiesId")]
		public EntitySet<NameType> NameTypes
		{
			get
			{
				return this._NameTypes;
			}
			set
			{
				this._NameTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NameTypes(NameType entity)
		{
			this.SendPropertyChanging();
			entity.NameTypeAuthority = this;
		}
		
		private void detach_NameTypes(NameType entity)
		{
			this.SendPropertyChanging();
			entity.NameTypeAuthority = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.NameTypes")]
	public partial class NameType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Description;
		
		private long _Id;
		
		private string _Name;
		
		private System.Nullable<long> _NameTypeAuthoritiesId;
		
		private EntitySet<Name> _Names;
		
		private EntityRef<NameTypeAuthority> _NameTypeAuthority;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNameTypeAuthoritiesIdChanging(System.Nullable<long> value);
    partial void OnNameTypeAuthoritiesIdChanged();
    #endregion
		
		public NameType()
		{
			this._Names = new EntitySet<Name>(new Action<Name>(this.attach_Names), new Action<Name>(this.detach_Names));
			this._NameTypeAuthority = default(EntityRef<NameTypeAuthority>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameTypeAuthoritiesId", DbType="BigInt")]
		public System.Nullable<long> NameTypeAuthoritiesId
		{
			get
			{
				return this._NameTypeAuthoritiesId;
			}
			set
			{
				if ((this._NameTypeAuthoritiesId != value))
				{
					if (this._NameTypeAuthority.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNameTypeAuthoritiesIdChanging(value);
					this.SendPropertyChanging();
					this._NameTypeAuthoritiesId = value;
					this.SendPropertyChanged("NameTypeAuthoritiesId");
					this.OnNameTypeAuthoritiesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NameType_Name", Storage="_Names", ThisKey="Id", OtherKey="NameTypeId")]
		public EntitySet<Name> Names
		{
			get
			{
				return this._Names;
			}
			set
			{
				this._Names.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NameTypeAuthority_NameType", Storage="_NameTypeAuthority", ThisKey="NameTypeAuthoritiesId", OtherKey="Id", IsForeignKey=true)]
		public NameTypeAuthority NameTypeAuthority
		{
			get
			{
				return this._NameTypeAuthority.Entity;
			}
			set
			{
				NameTypeAuthority previousValue = this._NameTypeAuthority.Entity;
				if (((previousValue != value) 
							|| (this._NameTypeAuthority.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NameTypeAuthority.Entity = null;
						previousValue.NameTypes.Remove(this);
					}
					this._NameTypeAuthority.Entity = value;
					if ((value != null))
					{
						value.NameTypes.Add(this);
						this._NameTypeAuthoritiesId = value.Id;
					}
					else
					{
						this._NameTypeAuthoritiesId = default(Nullable<long>);
					}
					this.SendPropertyChanged("NameTypeAuthority");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.NameType = this;
		}
		
		private void detach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.NameType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.NotesType")]
	public partial class NotesType
	{
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _DatedCreated;
		
		private int _UserCreatedId;
		
		private System.Nullable<System.DateTime> _DatedUpdated;
		
		private System.Nullable<System.DateTime> _UserUpdatedId;
		
		public NotesType()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatedCreated", DbType="Date NOT NULL")]
		public System.DateTime DatedCreated
		{
			get
			{
				return this._DatedCreated;
			}
			set
			{
				if ((this._DatedCreated != value))
				{
					this._DatedCreated = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this._UserCreatedId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatedUpdated", DbType="Date")]
		public System.Nullable<System.DateTime> DatedUpdated
		{
			get
			{
				return this._DatedUpdated;
			}
			set
			{
				if ((this._DatedUpdated != value))
				{
					this._DatedUpdated = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Date")]
		public System.Nullable<System.DateTime> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this._UserUpdatedId = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.GeneratorStatuses")]
	public partial class GeneratorStatuse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Value;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<int> _UserCreatedId;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnUserCreatedIdChanging(System.Nullable<int> value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    #endregion
		
		public GeneratorStatuse()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int")]
		public System.Nullable<int> UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.Names")]
	public partial class Name : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name1;
		
		private long _NameTypeId;
		
		private System.Nullable<int> _SubstationId;
		
		private System.Nullable<int> _PlantId;
		
		private System.Nullable<int> _GeneratingUnitId;
		
		private bool _IsActive;
		
		private System.Nullable<int> _ResourceBundleId;
		
		private EntityRef<GeneratingUnit> _GeneratingUnit;
		
		private EntityRef<Plant> _Plant;
		
		private EntityRef<NameType> _NameType;
		
		private EntityRef<Substation> _Substation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnName1Changing(string value);
    partial void OnName1Changed();
    partial void OnNameTypeIdChanging(long value);
    partial void OnNameTypeIdChanged();
    partial void OnSubstationIdChanging(System.Nullable<int> value);
    partial void OnSubstationIdChanged();
    partial void OnPlantIdChanging(System.Nullable<int> value);
    partial void OnPlantIdChanged();
    partial void OnGeneratingUnitIdChanging(System.Nullable<int> value);
    partial void OnGeneratingUnitIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnResourceBundleIdChanging(System.Nullable<int> value);
    partial void OnResourceBundleIdChanged();
    #endregion
		
		public Name()
		{
			this._GeneratingUnit = default(EntityRef<GeneratingUnit>);
			this._Plant = default(EntityRef<Plant>);
			this._NameType = default(EntityRef<NameType>);
			this._Substation = default(EntityRef<Substation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Name", Storage="_Name1", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name1
		{
			get
			{
				return this._Name1;
			}
			set
			{
				if ((this._Name1 != value))
				{
					this.OnName1Changing(value);
					this.SendPropertyChanging();
					this._Name1 = value;
					this.SendPropertyChanged("Name1");
					this.OnName1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameTypeId", DbType="BigInt NOT NULL")]
		public long NameTypeId
		{
			get
			{
				return this._NameTypeId;
			}
			set
			{
				if ((this._NameTypeId != value))
				{
					if (this._NameType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNameTypeIdChanging(value);
					this.SendPropertyChanging();
					this._NameTypeId = value;
					this.SendPropertyChanged("NameTypeId");
					this.OnNameTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubstationId", DbType="Int")]
		public System.Nullable<int> SubstationId
		{
			get
			{
				return this._SubstationId;
			}
			set
			{
				if ((this._SubstationId != value))
				{
					if (this._Substation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstationIdChanging(value);
					this.SendPropertyChanging();
					this._SubstationId = value;
					this.SendPropertyChanged("SubstationId");
					this.OnSubstationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantId", DbType="Int")]
		public System.Nullable<int> PlantId
		{
			get
			{
				return this._PlantId;
			}
			set
			{
				if ((this._PlantId != value))
				{
					if (this._Plant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlantIdChanging(value);
					this.SendPropertyChanging();
					this._PlantId = value;
					this.SendPropertyChanged("PlantId");
					this.OnPlantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratingUnitId", DbType="Int")]
		public System.Nullable<int> GeneratingUnitId
		{
			get
			{
				return this._GeneratingUnitId;
			}
			set
			{
				if ((this._GeneratingUnitId != value))
				{
					if (this._GeneratingUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeneratingUnitIdChanging(value);
					this.SendPropertyChanging();
					this._GeneratingUnitId = value;
					this.SendPropertyChanged("GeneratingUnitId");
					this.OnGeneratingUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceBundleId", DbType="Int")]
		public System.Nullable<int> ResourceBundleId
		{
			get
			{
				return this._ResourceBundleId;
			}
			set
			{
				if ((this._ResourceBundleId != value))
				{
					this.OnResourceBundleIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceBundleId = value;
					this.SendPropertyChanged("ResourceBundleId");
					this.OnResourceBundleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneratingUnit_Name", Storage="_GeneratingUnit", ThisKey="GeneratingUnitId", OtherKey="Id", IsForeignKey=true)]
		public GeneratingUnit GeneratingUnit
		{
			get
			{
				return this._GeneratingUnit.Entity;
			}
			set
			{
				GeneratingUnit previousValue = this._GeneratingUnit.Entity;
				if (((previousValue != value) 
							|| (this._GeneratingUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneratingUnit.Entity = null;
						previousValue.Names.Remove(this);
					}
					this._GeneratingUnit.Entity = value;
					if ((value != null))
					{
						value.Names.Add(this);
						this._GeneratingUnitId = value.Id;
					}
					else
					{
						this._GeneratingUnitId = default(Nullable<int>);
					}
					this.SendPropertyChanged("GeneratingUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plant_Name", Storage="_Plant", ThisKey="PlantId", OtherKey="Id", IsForeignKey=true)]
		public Plant Plant
		{
			get
			{
				return this._Plant.Entity;
			}
			set
			{
				Plant previousValue = this._Plant.Entity;
				if (((previousValue != value) 
							|| (this._Plant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Plant.Entity = null;
						previousValue.Names.Remove(this);
					}
					this._Plant.Entity = value;
					if ((value != null))
					{
						value.Names.Add(this);
						this._PlantId = value.Id;
					}
					else
					{
						this._PlantId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Plant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NameType_Name", Storage="_NameType", ThisKey="NameTypeId", OtherKey="Id", IsForeignKey=true)]
		public NameType NameType
		{
			get
			{
				return this._NameType.Entity;
			}
			set
			{
				NameType previousValue = this._NameType.Entity;
				if (((previousValue != value) 
							|| (this._NameType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NameType.Entity = null;
						previousValue.Names.Remove(this);
					}
					this._NameType.Entity = value;
					if ((value != null))
					{
						value.Names.Add(this);
						this._NameTypeId = value.Id;
					}
					else
					{
						this._NameTypeId = default(long);
					}
					this.SendPropertyChanged("NameType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_Name", Storage="_Substation", ThisKey="SubstationId", OtherKey="Id", IsForeignKey=true)]
		public Substation Substation
		{
			get
			{
				return this._Substation.Entity;
			}
			set
			{
				Substation previousValue = this._Substation.Entity;
				if (((previousValue != value) 
							|| (this._Substation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Substation.Entity = null;
						previousValue.Names.Remove(this);
					}
					this._Substation.Entity = value;
					if ((value != null))
					{
						value.Names.Add(this);
						this._SubstationId = value.Id;
					}
					else
					{
						this._SubstationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Substation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.GeneratorTypes")]
	public partial class GeneratorType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Value;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<int> _UserCreatedId;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnUserCreatedIdChanging(System.Nullable<int> value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    #endregion
		
		public GeneratorType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int")]
		public System.Nullable<int> UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.Lines")]
	public partial class Line : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _OriginalPk;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<int> _DateUpdated;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<decimal> _Bch;
		
		private string _Name;
		
		private System.Nullable<int> _VoltageId;
		
		private System.Nullable<decimal> _Resistance;
		
		private System.Nullable<decimal> _Reactance;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOriginalPkChanging(System.Nullable<int> value);
    partial void OnOriginalPkChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<int> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnBchChanging(System.Nullable<decimal> value);
    partial void OnBchChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnVoltageIdChanging(System.Nullable<int> value);
    partial void OnVoltageIdChanged();
    partial void OnResistanceChanging(System.Nullable<decimal> value);
    partial void OnResistanceChanged();
    partial void OnReactanceChanging(System.Nullable<decimal> value);
    partial void OnReactanceChanged();
    #endregion
		
		public Line()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalPk", DbType="Int")]
		public System.Nullable<int> OriginalPk
		{
			get
			{
				return this._OriginalPk;
			}
			set
			{
				if ((this._OriginalPk != value))
				{
					this.OnOriginalPkChanging(value);
					this.SendPropertyChanging();
					this._OriginalPk = value;
					this.SendPropertyChanged("OriginalPk");
					this.OnOriginalPkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="Int")]
		public System.Nullable<int> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bch", DbType="Decimal(12,9)")]
		public System.Nullable<decimal> Bch
		{
			get
			{
				return this._Bch;
			}
			set
			{
				if ((this._Bch != value))
				{
					this.OnBchChanging(value);
					this.SendPropertyChanging();
					this._Bch = value;
					this.SendPropertyChanged("Bch");
					this.OnBchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoltageId", DbType="Int")]
		public System.Nullable<int> VoltageId
		{
			get
			{
				return this._VoltageId;
			}
			set
			{
				if ((this._VoltageId != value))
				{
					this.OnVoltageIdChanging(value);
					this.SendPropertyChanging();
					this._VoltageId = value;
					this.SendPropertyChanged("VoltageId");
					this.OnVoltageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Resistance", DbType="Decimal(20,15)")]
		public System.Nullable<decimal> Resistance
		{
			get
			{
				return this._Resistance;
			}
			set
			{
				if ((this._Resistance != value))
				{
					this.OnResistanceChanging(value);
					this.SendPropertyChanging();
					this._Resistance = value;
					this.SendPropertyChanged("Resistance");
					this.OnResistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reactance", DbType="Decimal(20,15)")]
		public System.Nullable<decimal> Reactance
		{
			get
			{
				return this._Reactance;
			}
			set
			{
				if ((this._Reactance != value))
				{
					this.OnReactanceChanging(value);
					this.SendPropertyChanging();
					this._Reactance = value;
					this.SendPropertyChanged("Reactance");
					this.OnReactanceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.Substations")]
	public partial class Substation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private int _SubStationTypeId;
		
		private int _ResourceStatusId;
		
		private System.Nullable<int> _GeoLocationId;
		
		private int _OwnershipTypeId;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _EstimatedInServiceDate;
		
		private System.Nullable<System.DateTime> _ActualInServiceDate;
		
		private string _SingleLineDiagramUri;
		
		private string _LocalOperationOrderLink;
		
		private System.Nullable<int> _MeterId;
		
		private System.Nullable<int> _ElectricalGroupId;
		
		private EntitySet<LinkNote> _LinkNotes;
		
		private EntitySet<Name> _Names;
		
		private EntitySet<VoltageLevel> _VoltageLevels;
		
		private EntityRef<Meter> _Meter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnSubStationTypeIdChanging(int value);
    partial void OnSubStationTypeIdChanged();
    partial void OnResourceStatusIdChanging(int value);
    partial void OnResourceStatusIdChanged();
    partial void OnGeoLocationIdChanging(System.Nullable<int> value);
    partial void OnGeoLocationIdChanged();
    partial void OnOwnershipTypeIdChanging(int value);
    partial void OnOwnershipTypeIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnEstimatedInServiceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEstimatedInServiceDateChanged();
    partial void OnActualInServiceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualInServiceDateChanged();
    partial void OnSingleLineDiagramUriChanging(string value);
    partial void OnSingleLineDiagramUriChanged();
    partial void OnLocalOperationOrderLinkChanging(string value);
    partial void OnLocalOperationOrderLinkChanged();
    partial void OnMeterIdChanging(System.Nullable<int> value);
    partial void OnMeterIdChanged();
    partial void OnElectricalGroupIdChanging(System.Nullable<int> value);
    partial void OnElectricalGroupIdChanged();
    #endregion
		
		public Substation()
		{
			this._LinkNotes = new EntitySet<LinkNote>(new Action<LinkNote>(this.attach_LinkNotes), new Action<LinkNote>(this.detach_LinkNotes));
			this._Names = new EntitySet<Name>(new Action<Name>(this.attach_Names), new Action<Name>(this.detach_Names));
			this._VoltageLevels = new EntitySet<VoltageLevel>(new Action<VoltageLevel>(this.attach_VoltageLevels), new Action<VoltageLevel>(this.detach_VoltageLevels));
			this._Meter = default(EntityRef<Meter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubStationTypeId", DbType="Int NOT NULL")]
		public int SubStationTypeId
		{
			get
			{
				return this._SubStationTypeId;
			}
			set
			{
				if ((this._SubStationTypeId != value))
				{
					this.OnSubStationTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SubStationTypeId = value;
					this.SendPropertyChanged("SubStationTypeId");
					this.OnSubStationTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceStatusId", DbType="Int NOT NULL")]
		public int ResourceStatusId
		{
			get
			{
				return this._ResourceStatusId;
			}
			set
			{
				if ((this._ResourceStatusId != value))
				{
					this.OnResourceStatusIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceStatusId = value;
					this.SendPropertyChanged("ResourceStatusId");
					this.OnResourceStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeoLocationId", DbType="Int")]
		public System.Nullable<int> GeoLocationId
		{
			get
			{
				return this._GeoLocationId;
			}
			set
			{
				if ((this._GeoLocationId != value))
				{
					this.OnGeoLocationIdChanging(value);
					this.SendPropertyChanging();
					this._GeoLocationId = value;
					this.SendPropertyChanged("GeoLocationId");
					this.OnGeoLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnershipTypeId", DbType="Int NOT NULL")]
		public int OwnershipTypeId
		{
			get
			{
				return this._OwnershipTypeId;
			}
			set
			{
				if ((this._OwnershipTypeId != value))
				{
					this.OnOwnershipTypeIdChanging(value);
					this.SendPropertyChanging();
					this._OwnershipTypeId = value;
					this.SendPropertyChanged("OwnershipTypeId");
					this.OnOwnershipTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedInServiceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EstimatedInServiceDate
		{
			get
			{
				return this._EstimatedInServiceDate;
			}
			set
			{
				if ((this._EstimatedInServiceDate != value))
				{
					this.OnEstimatedInServiceDateChanging(value);
					this.SendPropertyChanging();
					this._EstimatedInServiceDate = value;
					this.SendPropertyChanged("EstimatedInServiceDate");
					this.OnEstimatedInServiceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualInServiceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActualInServiceDate
		{
			get
			{
				return this._ActualInServiceDate;
			}
			set
			{
				if ((this._ActualInServiceDate != value))
				{
					this.OnActualInServiceDateChanging(value);
					this.SendPropertyChanging();
					this._ActualInServiceDate = value;
					this.SendPropertyChanged("ActualInServiceDate");
					this.OnActualInServiceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SingleLineDiagramUri", DbType="VarChar(255)")]
		public string SingleLineDiagramUri
		{
			get
			{
				return this._SingleLineDiagramUri;
			}
			set
			{
				if ((this._SingleLineDiagramUri != value))
				{
					this.OnSingleLineDiagramUriChanging(value);
					this.SendPropertyChanging();
					this._SingleLineDiagramUri = value;
					this.SendPropertyChanged("SingleLineDiagramUri");
					this.OnSingleLineDiagramUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalOperationOrderLink", DbType="VarChar(255)")]
		public string LocalOperationOrderLink
		{
			get
			{
				return this._LocalOperationOrderLink;
			}
			set
			{
				if ((this._LocalOperationOrderLink != value))
				{
					this.OnLocalOperationOrderLinkChanging(value);
					this.SendPropertyChanging();
					this._LocalOperationOrderLink = value;
					this.SendPropertyChanged("LocalOperationOrderLink");
					this.OnLocalOperationOrderLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterId", DbType="Int")]
		public System.Nullable<int> MeterId
		{
			get
			{
				return this._MeterId;
			}
			set
			{
				if ((this._MeterId != value))
				{
					if (this._Meter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeterIdChanging(value);
					this.SendPropertyChanging();
					this._MeterId = value;
					this.SendPropertyChanged("MeterId");
					this.OnMeterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectricalGroupId", DbType="Int")]
		public System.Nullable<int> ElectricalGroupId
		{
			get
			{
				return this._ElectricalGroupId;
			}
			set
			{
				if ((this._ElectricalGroupId != value))
				{
					this.OnElectricalGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ElectricalGroupId = value;
					this.SendPropertyChanged("ElectricalGroupId");
					this.OnElectricalGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_LinkNote", Storage="_LinkNotes", ThisKey="Id", OtherKey="SubstationId")]
		public EntitySet<LinkNote> LinkNotes
		{
			get
			{
				return this._LinkNotes;
			}
			set
			{
				this._LinkNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_Name", Storage="_Names", ThisKey="Id", OtherKey="SubstationId")]
		public EntitySet<Name> Names
		{
			get
			{
				return this._Names;
			}
			set
			{
				this._Names.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_VoltageLevel", Storage="_VoltageLevels", ThisKey="Id", OtherKey="SubstationId")]
		public EntitySet<VoltageLevel> VoltageLevels
		{
			get
			{
				return this._VoltageLevels;
			}
			set
			{
				this._VoltageLevels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_Substation", Storage="_Meter", ThisKey="MeterId", OtherKey="Id", IsForeignKey=true)]
		public Meter Meter
		{
			get
			{
				return this._Meter.Entity;
			}
			set
			{
				Meter previousValue = this._Meter.Entity;
				if (((previousValue != value) 
							|| (this._Meter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meter.Entity = null;
						previousValue.Substations.Remove(this);
					}
					this._Meter.Entity = value;
					if ((value != null))
					{
						value.Substations.Add(this);
						this._MeterId = value.Id;
					}
					else
					{
						this._MeterId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Meter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.Substation = this;
		}
		
		private void detach_LinkNotes(LinkNote entity)
		{
			this.SendPropertyChanging();
			entity.Substation = null;
		}
		
		private void attach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.Substation = this;
		}
		
		private void detach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.Substation = null;
		}
		
		private void attach_VoltageLevels(VoltageLevel entity)
		{
			this.SendPropertyChanging();
			entity.Substation = this;
		}
		
		private void detach_VoltageLevels(VoltageLevel entity)
		{
			this.SendPropertyChanging();
			entity.Substation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.Meters")]
	public partial class Meter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _MeterNumber;
		
		private EntitySet<Plant> _Plants;
		
		private EntitySet<Substation> _Substations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMeterNumberChanging(string value);
    partial void OnMeterNumberChanged();
    #endregion
		
		public Meter()
		{
			this._Plants = new EntitySet<Plant>(new Action<Plant>(this.attach_Plants), new Action<Plant>(this.detach_Plants));
			this._Substations = new EntitySet<Substation>(new Action<Substation>(this.attach_Substations), new Action<Substation>(this.detach_Substations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterNumber", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string MeterNumber
		{
			get
			{
				return this._MeterNumber;
			}
			set
			{
				if ((this._MeterNumber != value))
				{
					this.OnMeterNumberChanging(value);
					this.SendPropertyChanging();
					this._MeterNumber = value;
					this.SendPropertyChanged("MeterNumber");
					this.OnMeterNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_Plant", Storage="_Plants", ThisKey="Id", OtherKey="MeterId")]
		public EntitySet<Plant> Plants
		{
			get
			{
				return this._Plants;
			}
			set
			{
				this._Plants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_Substation", Storage="_Substations", ThisKey="Id", OtherKey="MeterId")]
		public EntitySet<Substation> Substations
		{
			get
			{
				return this._Substations;
			}
			set
			{
				this._Substations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Plants(Plant entity)
		{
			this.SendPropertyChanging();
			entity.Meter = this;
		}
		
		private void detach_Plants(Plant entity)
		{
			this.SendPropertyChanging();
			entity.Meter = null;
		}
		
		private void attach_Substations(Substation entity)
		{
			this.SendPropertyChanging();
			entity.Meter = this;
		}
		
		private void detach_Substations(Substation entity)
		{
			this.SendPropertyChanging();
			entity.Meter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.VoltageLevels")]
	public partial class VoltageLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _OriginalPk;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private int _SubstationId;
		
		private System.Nullable<decimal> _NominalVoltage;
		
		private EntitySet<GeneratingUnit> _GeneratingUnits;
		
		private EntityRef<Substation> _Substation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOriginalPkChanging(System.Nullable<int> value);
    partial void OnOriginalPkChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnSubstationIdChanging(int value);
    partial void OnSubstationIdChanged();
    partial void OnNominalVoltageChanging(System.Nullable<decimal> value);
    partial void OnNominalVoltageChanged();
    #endregion
		
		public VoltageLevel()
		{
			this._GeneratingUnits = new EntitySet<GeneratingUnit>(new Action<GeneratingUnit>(this.attach_GeneratingUnits), new Action<GeneratingUnit>(this.detach_GeneratingUnits));
			this._Substation = default(EntityRef<Substation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalPk", DbType="Int")]
		public System.Nullable<int> OriginalPk
		{
			get
			{
				return this._OriginalPk;
			}
			set
			{
				if ((this._OriginalPk != value))
				{
					this.OnOriginalPkChanging(value);
					this.SendPropertyChanging();
					this._OriginalPk = value;
					this.SendPropertyChanged("OriginalPk");
					this.OnOriginalPkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubstationId", DbType="Int NOT NULL")]
		public int SubstationId
		{
			get
			{
				return this._SubstationId;
			}
			set
			{
				if ((this._SubstationId != value))
				{
					if (this._Substation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstationIdChanging(value);
					this.SendPropertyChanging();
					this._SubstationId = value;
					this.SendPropertyChanged("SubstationId");
					this.OnSubstationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NominalVoltage", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> NominalVoltage
		{
			get
			{
				return this._NominalVoltage;
			}
			set
			{
				if ((this._NominalVoltage != value))
				{
					this.OnNominalVoltageChanging(value);
					this.SendPropertyChanging();
					this._NominalVoltage = value;
					this.SendPropertyChanged("NominalVoltage");
					this.OnNominalVoltageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoltageLevel_GeneratingUnit", Storage="_GeneratingUnits", ThisKey="Id", OtherKey="VoltageLevelId")]
		public EntitySet<GeneratingUnit> GeneratingUnits
		{
			get
			{
				return this._GeneratingUnits;
			}
			set
			{
				this._GeneratingUnits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Substation_VoltageLevel", Storage="_Substation", ThisKey="SubstationId", OtherKey="Id", IsForeignKey=true)]
		public Substation Substation
		{
			get
			{
				return this._Substation.Entity;
			}
			set
			{
				Substation previousValue = this._Substation.Entity;
				if (((previousValue != value) 
							|| (this._Substation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Substation.Entity = null;
						previousValue.VoltageLevels.Remove(this);
					}
					this._Substation.Entity = value;
					if ((value != null))
					{
						value.VoltageLevels.Add(this);
						this._SubstationId = value.Id;
					}
					else
					{
						this._SubstationId = default(int);
					}
					this.SendPropertyChanged("Substation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GeneratingUnits(GeneratingUnit entity)
		{
			this.SendPropertyChanging();
			entity.VoltageLevel = this;
		}
		
		private void detach_GeneratingUnits(GeneratingUnit entity)
		{
			this.SendPropertyChanging();
			entity.VoltageLevel = null;
		}
	}
}
#pragma warning restore 1591
