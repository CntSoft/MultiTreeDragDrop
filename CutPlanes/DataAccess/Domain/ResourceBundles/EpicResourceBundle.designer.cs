#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EpicDataAccess.Domain.ResourceBundles
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EpicDevNew")]
	public partial class EpicResourceBundleDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertResourceBundle(ResourceBundle instance);
    partial void UpdateResourceBundle(ResourceBundle instance);
    partial void DeleteResourceBundle(ResourceBundle instance);
    partial void InsertResourceBundleType(ResourceBundleType instance);
    partial void UpdateResourceBundleType(ResourceBundleType instance);
    partial void DeleteResourceBundleType(ResourceBundleType instance);
    partial void InsertResourceStatuse(ResourceStatuse instance);
    partial void UpdateResourceStatuse(ResourceStatuse instance);
    partial void DeleteResourceStatuse(ResourceStatuse instance);
    partial void InsertPowerCall(PowerCall instance);
    partial void UpdatePowerCall(PowerCall instance);
    partial void DeletePowerCall(PowerCall instance);
    partial void InsertName(Name instance);
    partial void UpdateName(Name instance);
    partial void DeleteName(Name instance);
    partial void InsertElectricalGroup(ElectricalGroup instance);
    partial void UpdateElectricalGroup(ElectricalGroup instance);
    partial void DeleteElectricalGroup(ElectricalGroup instance);
    partial void InsertNameType(NameType instance);
    partial void UpdateNameType(NameType instance);
    partial void DeleteNameType(NameType instance);
    partial void InsertNameTypeAuthority(NameTypeAuthority instance);
    partial void UpdateNameTypeAuthority(NameTypeAuthority instance);
    partial void DeleteNameTypeAuthority(NameTypeAuthority instance);
    #endregion
		
		public EpicResourceBundleDataContext() : 
				base(global::EpicDataAccess.Properties.Settings.Default.EpicDevNewConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EpicResourceBundleDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EpicResourceBundleDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EpicResourceBundleDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EpicResourceBundleDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ResourceBundle> ResourceBundles
		{
			get
			{
				return this.GetTable<ResourceBundle>();
			}
		}
		
		public System.Data.Linq.Table<ResourceBundleType> ResourceBundleTypes
		{
			get
			{
				return this.GetTable<ResourceBundleType>();
			}
		}
		
		public System.Data.Linq.Table<ResourceStatuse> ResourceStatuses
		{
			get
			{
				return this.GetTable<ResourceStatuse>();
			}
		}
		
		public System.Data.Linq.Table<PowerCall> PowerCalls
		{
			get
			{
				return this.GetTable<PowerCall>();
			}
		}
		
		public System.Data.Linq.Table<Name> Names
		{
			get
			{
				return this.GetTable<Name>();
			}
		}
		
		public System.Data.Linq.Table<ElectricalGroup> ElectricalGroups
		{
			get
			{
				return this.GetTable<ElectricalGroup>();
			}
		}
		
		public System.Data.Linq.Table<NameType> NameTypes
		{
			get
			{
				return this.GetTable<NameType>();
			}
		}
		
		public System.Data.Linq.Table<NameTypeAuthority> NameTypeAuthorities
		{
			get
			{
				return this.GetTable<NameTypeAuthority>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.ResourceBundle")]
	public partial class ResourceBundle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _CommericalOperationStartDate;
		
		private System.Nullable<System.DateTime> _CommericalOperationEndDate;
		
		private decimal _PotentialIncludeCapacity;
		
		private decimal _DependableGeneratingCapacity;
		
		private decimal _EffectiveLoadCarryingCapacity;
		
		private decimal _SystemCapacity;
		
		private int _PowerCallId;
		
		private int _ResourceBundleTypeId;
		
		private int _ResourceBundleStatusId;
		
		private System.DateTime _CreatedDate;
		
		private int _CreatedByUserId;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<long> _UpdatedUserId;
		
		private string _Comments;
		
		private System.Nullable<int> _ElectricalGroupId;
		
		private EntitySet<Name> _Names;
		
		private EntityRef<ResourceBundleType> _ResourceBundleType;
		
		private EntityRef<ResourceStatuse> _ResourceStatuse;
		
		private EntityRef<PowerCall> _PowerCall;
		
		private EntityRef<ElectricalGroup> _ElectricalGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCommericalOperationStartDateChanging(System.DateTime value);
    partial void OnCommericalOperationStartDateChanged();
    partial void OnCommericalOperationEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCommericalOperationEndDateChanged();
    partial void OnPotentialIncludeCapacityChanging(decimal value);
    partial void OnPotentialIncludeCapacityChanged();
    partial void OnDependableGeneratingCapacityChanging(decimal value);
    partial void OnDependableGeneratingCapacityChanged();
    partial void OnEffectiveLoadCarryingCapacityChanging(decimal value);
    partial void OnEffectiveLoadCarryingCapacityChanged();
    partial void OnSystemCapacityChanging(decimal value);
    partial void OnSystemCapacityChanged();
    partial void OnPowerCallIdChanging(int value);
    partial void OnPowerCallIdChanged();
    partial void OnResourceBundleTypeIdChanging(int value);
    partial void OnResourceBundleTypeIdChanged();
    partial void OnResourceBundleStatusIdChanging(int value);
    partial void OnResourceBundleStatusIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByUserIdChanging(int value);
    partial void OnCreatedByUserIdChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnUpdatedUserIdChanging(System.Nullable<long> value);
    partial void OnUpdatedUserIdChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnElectricalGroupIdChanging(System.Nullable<int> value);
    partial void OnElectricalGroupIdChanged();
    #endregion
		
		public ResourceBundle()
		{
			this._Names = new EntitySet<Name>(new Action<Name>(this.attach_Names), new Action<Name>(this.detach_Names));
			this._ResourceBundleType = default(EntityRef<ResourceBundleType>);
			this._ResourceStatuse = default(EntityRef<ResourceStatuse>);
			this._PowerCall = default(EntityRef<PowerCall>);
			this._ElectricalGroup = default(EntityRef<ElectricalGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommericalOperationStartDate", DbType="DateTime NOT NULL")]
		public System.DateTime CommericalOperationStartDate
		{
			get
			{
				return this._CommericalOperationStartDate;
			}
			set
			{
				if ((this._CommericalOperationStartDate != value))
				{
					this.OnCommericalOperationStartDateChanging(value);
					this.SendPropertyChanging();
					this._CommericalOperationStartDate = value;
					this.SendPropertyChanged("CommericalOperationStartDate");
					this.OnCommericalOperationStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommericalOperationEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CommericalOperationEndDate
		{
			get
			{
				return this._CommericalOperationEndDate;
			}
			set
			{
				if ((this._CommericalOperationEndDate != value))
				{
					this.OnCommericalOperationEndDateChanging(value);
					this.SendPropertyChanging();
					this._CommericalOperationEndDate = value;
					this.SendPropertyChanged("CommericalOperationEndDate");
					this.OnCommericalOperationEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PotentialIncludeCapacity", DbType="Decimal(10,2) NOT NULL")]
		public decimal PotentialIncludeCapacity
		{
			get
			{
				return this._PotentialIncludeCapacity;
			}
			set
			{
				if ((this._PotentialIncludeCapacity != value))
				{
					this.OnPotentialIncludeCapacityChanging(value);
					this.SendPropertyChanging();
					this._PotentialIncludeCapacity = value;
					this.SendPropertyChanged("PotentialIncludeCapacity");
					this.OnPotentialIncludeCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DependableGeneratingCapacity", DbType="Decimal(10,2) NOT NULL")]
		public decimal DependableGeneratingCapacity
		{
			get
			{
				return this._DependableGeneratingCapacity;
			}
			set
			{
				if ((this._DependableGeneratingCapacity != value))
				{
					this.OnDependableGeneratingCapacityChanging(value);
					this.SendPropertyChanging();
					this._DependableGeneratingCapacity = value;
					this.SendPropertyChanged("DependableGeneratingCapacity");
					this.OnDependableGeneratingCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveLoadCarryingCapacity", DbType="Decimal(10,2) NOT NULL")]
		public decimal EffectiveLoadCarryingCapacity
		{
			get
			{
				return this._EffectiveLoadCarryingCapacity;
			}
			set
			{
				if ((this._EffectiveLoadCarryingCapacity != value))
				{
					this.OnEffectiveLoadCarryingCapacityChanging(value);
					this.SendPropertyChanging();
					this._EffectiveLoadCarryingCapacity = value;
					this.SendPropertyChanged("EffectiveLoadCarryingCapacity");
					this.OnEffectiveLoadCarryingCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemCapacity", DbType="Decimal(10,2) NOT NULL")]
		public decimal SystemCapacity
		{
			get
			{
				return this._SystemCapacity;
			}
			set
			{
				if ((this._SystemCapacity != value))
				{
					this.OnSystemCapacityChanging(value);
					this.SendPropertyChanging();
					this._SystemCapacity = value;
					this.SendPropertyChanged("SystemCapacity");
					this.OnSystemCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PowerCallId", DbType="Int NOT NULL")]
		public int PowerCallId
		{
			get
			{
				return this._PowerCallId;
			}
			set
			{
				if ((this._PowerCallId != value))
				{
					if (this._PowerCall.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPowerCallIdChanging(value);
					this.SendPropertyChanging();
					this._PowerCallId = value;
					this.SendPropertyChanged("PowerCallId");
					this.OnPowerCallIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceBundleTypeId", DbType="Int NOT NULL")]
		public int ResourceBundleTypeId
		{
			get
			{
				return this._ResourceBundleTypeId;
			}
			set
			{
				if ((this._ResourceBundleTypeId != value))
				{
					if (this._ResourceBundleType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceBundleTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceBundleTypeId = value;
					this.SendPropertyChanged("ResourceBundleTypeId");
					this.OnResourceBundleTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceBundleStatusId", DbType="Int NOT NULL")]
		public int ResourceBundleStatusId
		{
			get
			{
				return this._ResourceBundleStatusId;
			}
			set
			{
				if ((this._ResourceBundleStatusId != value))
				{
					if (this._ResourceStatuse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceBundleStatusIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceBundleStatusId = value;
					this.SendPropertyChanged("ResourceBundleStatusId");
					this.OnResourceBundleStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByUserId", DbType="Int NOT NULL")]
		public int CreatedByUserId
		{
			get
			{
				return this._CreatedByUserId;
			}
			set
			{
				if ((this._CreatedByUserId != value))
				{
					this.OnCreatedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUserId = value;
					this.SendPropertyChanged("CreatedByUserId");
					this.OnCreatedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="Date")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedUserId", DbType="BigInt")]
		public System.Nullable<long> UpdatedUserId
		{
			get
			{
				return this._UpdatedUserId;
			}
			set
			{
				if ((this._UpdatedUserId != value))
				{
					this.OnUpdatedUserIdChanging(value);
					this.SendPropertyChanging();
					this._UpdatedUserId = value;
					this.SendPropertyChanged("UpdatedUserId");
					this.OnUpdatedUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(MAX)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectricalGroupId", DbType="Int")]
		public System.Nullable<int> ElectricalGroupId
		{
			get
			{
				return this._ElectricalGroupId;
			}
			set
			{
				if ((this._ElectricalGroupId != value))
				{
					if (this._ElectricalGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnElectricalGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ElectricalGroupId = value;
					this.SendPropertyChanged("ElectricalGroupId");
					this.OnElectricalGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceBundle_Name", Storage="_Names", ThisKey="Id", OtherKey="ResourceBundleId")]
		public EntitySet<Name> Names
		{
			get
			{
				return this._Names;
			}
			set
			{
				this._Names.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceBundleType_ResourceBundle", Storage="_ResourceBundleType", ThisKey="ResourceBundleTypeId", OtherKey="Id", IsForeignKey=true)]
		public ResourceBundleType ResourceBundleType
		{
			get
			{
				return this._ResourceBundleType.Entity;
			}
			set
			{
				ResourceBundleType previousValue = this._ResourceBundleType.Entity;
				if (((previousValue != value) 
							|| (this._ResourceBundleType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceBundleType.Entity = null;
						previousValue.ResourceBundles.Remove(this);
					}
					this._ResourceBundleType.Entity = value;
					if ((value != null))
					{
						value.ResourceBundles.Add(this);
						this._ResourceBundleTypeId = value.Id;
					}
					else
					{
						this._ResourceBundleTypeId = default(int);
					}
					this.SendPropertyChanged("ResourceBundleType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceStatuse_ResourceBundle", Storage="_ResourceStatuse", ThisKey="ResourceBundleStatusId", OtherKey="Id", IsForeignKey=true)]
		public ResourceStatuse ResourceStatuse
		{
			get
			{
				return this._ResourceStatuse.Entity;
			}
			set
			{
				ResourceStatuse previousValue = this._ResourceStatuse.Entity;
				if (((previousValue != value) 
							|| (this._ResourceStatuse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceStatuse.Entity = null;
						previousValue.ResourceBundles.Remove(this);
					}
					this._ResourceStatuse.Entity = value;
					if ((value != null))
					{
						value.ResourceBundles.Add(this);
						this._ResourceBundleStatusId = value.Id;
					}
					else
					{
						this._ResourceBundleStatusId = default(int);
					}
					this.SendPropertyChanged("ResourceStatuse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerCall_ResourceBundle", Storage="_PowerCall", ThisKey="PowerCallId", OtherKey="Id", IsForeignKey=true)]
		public PowerCall PowerCall
		{
			get
			{
				return this._PowerCall.Entity;
			}
			set
			{
				PowerCall previousValue = this._PowerCall.Entity;
				if (((previousValue != value) 
							|| (this._PowerCall.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PowerCall.Entity = null;
						previousValue.ResourceBundles.Remove(this);
					}
					this._PowerCall.Entity = value;
					if ((value != null))
					{
						value.ResourceBundles.Add(this);
						this._PowerCallId = value.Id;
					}
					else
					{
						this._PowerCallId = default(int);
					}
					this.SendPropertyChanged("PowerCall");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElectricalGroup_ResourceBundle", Storage="_ElectricalGroup", ThisKey="ElectricalGroupId", OtherKey="Id", IsForeignKey=true)]
		public ElectricalGroup ElectricalGroup
		{
			get
			{
				return this._ElectricalGroup.Entity;
			}
			set
			{
				ElectricalGroup previousValue = this._ElectricalGroup.Entity;
				if (((previousValue != value) 
							|| (this._ElectricalGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ElectricalGroup.Entity = null;
						previousValue.ResourceBundles.Remove(this);
					}
					this._ElectricalGroup.Entity = value;
					if ((value != null))
					{
						value.ResourceBundles.Add(this);
						this._ElectricalGroupId = value.Id;
					}
					else
					{
						this._ElectricalGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ElectricalGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.ResourceBundle = this;
		}
		
		private void detach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.ResourceBundle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.ResourceBundleType")]
	public partial class ResourceBundleType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private string _Comments;
		
		private System.DateTime _DateCreated;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private bool _IsActive;
		
		private EntitySet<ResourceBundle> _ResourceBundles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public ResourceBundleType()
		{
			this._ResourceBundles = new EntitySet<ResourceBundle>(new Action<ResourceBundle>(this.attach_ResourceBundles), new Action<ResourceBundle>(this.detach_ResourceBundles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(255)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceBundleType_ResourceBundle", Storage="_ResourceBundles", ThisKey="Id", OtherKey="ResourceBundleTypeId")]
		public EntitySet<ResourceBundle> ResourceBundles
		{
			get
			{
				return this._ResourceBundles;
			}
			set
			{
				this._ResourceBundles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResourceBundles(ResourceBundle entity)
		{
			this.SendPropertyChanging();
			entity.ResourceBundleType = this;
		}
		
		private void detach_ResourceBundles(ResourceBundle entity)
		{
			this.SendPropertyChanging();
			entity.ResourceBundleType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.ResourceStatuses")]
	public partial class ResourceStatuse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Value;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<int> _UserCreatedId;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private EntitySet<ResourceBundle> _ResourceBundles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnUserCreatedIdChanging(System.Nullable<int> value);
    partial void OnUserCreatedIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    #endregion
		
		public ResourceStatuse()
		{
			this._ResourceBundles = new EntitySet<ResourceBundle>(new Action<ResourceBundle>(this.attach_ResourceBundles), new Action<ResourceBundle>(this.detach_ResourceBundles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int")]
		public System.Nullable<int> UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceStatuse_ResourceBundle", Storage="_ResourceBundles", ThisKey="Id", OtherKey="ResourceBundleStatusId")]
		public EntitySet<ResourceBundle> ResourceBundles
		{
			get
			{
				return this._ResourceBundles;
			}
			set
			{
				this._ResourceBundles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResourceBundles(ResourceBundle entity)
		{
			this.SendPropertyChanging();
			entity.ResourceStatuse = this;
		}
		
		private void detach_ResourceBundles(ResourceBundle entity)
		{
			this.SendPropertyChanging();
			entity.ResourceStatuse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="lookup.PowerCall")]
	public partial class PowerCall : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Value;
		
		private int _UserCreatedId;
		
		private System.DateTime _DatedCreated;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private EntitySet<ResourceBundle> _ResourceBundles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnDatedCreatedChanging(System.DateTime value);
    partial void OnDatedCreatedChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    #endregion
		
		public PowerCall()
		{
			this._ResourceBundles = new EntitySet<ResourceBundle>(new Action<ResourceBundle>(this.attach_ResourceBundles), new Action<ResourceBundle>(this.detach_ResourceBundles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatedCreated", DbType="Date NOT NULL")]
		public System.DateTime DatedCreated
		{
			get
			{
				return this._DatedCreated;
			}
			set
			{
				if ((this._DatedCreated != value))
				{
					this.OnDatedCreatedChanging(value);
					this.SendPropertyChanging();
					this._DatedCreated = value;
					this.SendPropertyChanged("DatedCreated");
					this.OnDatedCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="Date")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerCall_ResourceBundle", Storage="_ResourceBundles", ThisKey="Id", OtherKey="PowerCallId")]
		public EntitySet<ResourceBundle> ResourceBundles
		{
			get
			{
				return this._ResourceBundles;
			}
			set
			{
				this._ResourceBundles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResourceBundles(ResourceBundle entity)
		{
			this.SendPropertyChanging();
			entity.PowerCall = this;
		}
		
		private void detach_ResourceBundles(ResourceBundle entity)
		{
			this.SendPropertyChanging();
			entity.PowerCall = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.Names")]
	public partial class Name : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name1;
		
		private long _NameTypeId;
		
		private System.Nullable<int> _SubstationId;
		
		private System.Nullable<int> _PlantId;
		
		private System.Nullable<int> _GeneratingUnitId;
		
		private bool _IsActive;
		
		private System.Nullable<int> _ResourceBundleId;
		
		private EntityRef<ResourceBundle> _ResourceBundle;
		
		private EntityRef<NameType> _NameType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnName1Changing(string value);
    partial void OnName1Changed();
    partial void OnNameTypeIdChanging(long value);
    partial void OnNameTypeIdChanged();
    partial void OnSubstationIdChanging(System.Nullable<int> value);
    partial void OnSubstationIdChanged();
    partial void OnPlantIdChanging(System.Nullable<int> value);
    partial void OnPlantIdChanged();
    partial void OnGeneratingUnitIdChanging(System.Nullable<int> value);
    partial void OnGeneratingUnitIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnResourceBundleIdChanging(System.Nullable<int> value);
    partial void OnResourceBundleIdChanged();
    #endregion
		
		public Name()
		{
			this._ResourceBundle = default(EntityRef<ResourceBundle>);
			this._NameType = default(EntityRef<NameType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Name", Storage="_Name1", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name1
		{
			get
			{
				return this._Name1;
			}
			set
			{
				if ((this._Name1 != value))
				{
					this.OnName1Changing(value);
					this.SendPropertyChanging();
					this._Name1 = value;
					this.SendPropertyChanged("Name1");
					this.OnName1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameTypeId", DbType="BigInt NOT NULL")]
		public long NameTypeId
		{
			get
			{
				return this._NameTypeId;
			}
			set
			{
				if ((this._NameTypeId != value))
				{
					if (this._NameType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNameTypeIdChanging(value);
					this.SendPropertyChanging();
					this._NameTypeId = value;
					this.SendPropertyChanged("NameTypeId");
					this.OnNameTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubstationId", DbType="Int")]
		public System.Nullable<int> SubstationId
		{
			get
			{
				return this._SubstationId;
			}
			set
			{
				if ((this._SubstationId != value))
				{
					this.OnSubstationIdChanging(value);
					this.SendPropertyChanging();
					this._SubstationId = value;
					this.SendPropertyChanged("SubstationId");
					this.OnSubstationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantId", DbType="Int")]
		public System.Nullable<int> PlantId
		{
			get
			{
				return this._PlantId;
			}
			set
			{
				if ((this._PlantId != value))
				{
					this.OnPlantIdChanging(value);
					this.SendPropertyChanging();
					this._PlantId = value;
					this.SendPropertyChanged("PlantId");
					this.OnPlantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratingUnitId", DbType="Int")]
		public System.Nullable<int> GeneratingUnitId
		{
			get
			{
				return this._GeneratingUnitId;
			}
			set
			{
				if ((this._GeneratingUnitId != value))
				{
					this.OnGeneratingUnitIdChanging(value);
					this.SendPropertyChanging();
					this._GeneratingUnitId = value;
					this.SendPropertyChanged("GeneratingUnitId");
					this.OnGeneratingUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceBundleId", DbType="Int")]
		public System.Nullable<int> ResourceBundleId
		{
			get
			{
				return this._ResourceBundleId;
			}
			set
			{
				if ((this._ResourceBundleId != value))
				{
					if (this._ResourceBundle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceBundleIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceBundleId = value;
					this.SendPropertyChanged("ResourceBundleId");
					this.OnResourceBundleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceBundle_Name", Storage="_ResourceBundle", ThisKey="ResourceBundleId", OtherKey="Id", IsForeignKey=true)]
		public ResourceBundle ResourceBundle
		{
			get
			{
				return this._ResourceBundle.Entity;
			}
			set
			{
				ResourceBundle previousValue = this._ResourceBundle.Entity;
				if (((previousValue != value) 
							|| (this._ResourceBundle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceBundle.Entity = null;
						previousValue.Names.Remove(this);
					}
					this._ResourceBundle.Entity = value;
					if ((value != null))
					{
						value.Names.Add(this);
						this._ResourceBundleId = value.Id;
					}
					else
					{
						this._ResourceBundleId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ResourceBundle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NameType_Name", Storage="_NameType", ThisKey="NameTypeId", OtherKey="Id", IsForeignKey=true)]
		public NameType NameType
		{
			get
			{
				return this._NameType.Entity;
			}
			set
			{
				NameType previousValue = this._NameType.Entity;
				if (((previousValue != value) 
							|| (this._NameType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NameType.Entity = null;
						previousValue.Names.Remove(this);
					}
					this._NameType.Entity = value;
					if ((value != null))
					{
						value.Names.Add(this);
						this._NameTypeId = value.Id;
					}
					else
					{
						this._NameTypeId = default(long);
					}
					this.SendPropertyChanged("NameType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.ElectricalGroups")]
	public partial class ElectricalGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private int _UserCreatedId;
		
		private System.Nullable<int> _UserUpdatedId;
		
		private System.Nullable<int> _ParentPk;
		
		private string _Name;
		
		private string _Abbreviation;
		
		private EntitySet<ResourceBundle> _ResourceBundles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnUserCreatedIdChanging(int value);
    partial void OnUserCreatedIdChanged();
    partial void OnUserUpdatedIdChanging(System.Nullable<int> value);
    partial void OnUserUpdatedIdChanged();
    partial void OnParentPkChanging(System.Nullable<int> value);
    partial void OnParentPkChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    #endregion
		
		public ElectricalGroup()
		{
			this._ResourceBundles = new EntitySet<ResourceBundle>(new Action<ResourceBundle>(this.attach_ResourceBundles), new Action<ResourceBundle>(this.detach_ResourceBundles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatedId", DbType="Int NOT NULL")]
		public int UserCreatedId
		{
			get
			{
				return this._UserCreatedId;
			}
			set
			{
				if ((this._UserCreatedId != value))
				{
					this.OnUserCreatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedId = value;
					this.SendPropertyChanged("UserCreatedId");
					this.OnUserCreatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdatedId", DbType="Int")]
		public System.Nullable<int> UserUpdatedId
		{
			get
			{
				return this._UserUpdatedId;
			}
			set
			{
				if ((this._UserUpdatedId != value))
				{
					this.OnUserUpdatedIdChanging(value);
					this.SendPropertyChanging();
					this._UserUpdatedId = value;
					this.SendPropertyChanged("UserUpdatedId");
					this.OnUserUpdatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentPk", DbType="Int")]
		public System.Nullable<int> ParentPk
		{
			get
			{
				return this._ParentPk;
			}
			set
			{
				if ((this._ParentPk != value))
				{
					this.OnParentPkChanging(value);
					this.SendPropertyChanging();
					this._ParentPk = value;
					this.SendPropertyChanged("ParentPk");
					this.OnParentPkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abbreviation", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Abbreviation
		{
			get
			{
				return this._Abbreviation;
			}
			set
			{
				if ((this._Abbreviation != value))
				{
					this.OnAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._Abbreviation = value;
					this.SendPropertyChanged("Abbreviation");
					this.OnAbbreviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElectricalGroup_ResourceBundle", Storage="_ResourceBundles", ThisKey="Id", OtherKey="ElectricalGroupId")]
		public EntitySet<ResourceBundle> ResourceBundles
		{
			get
			{
				return this._ResourceBundles;
			}
			set
			{
				this._ResourceBundles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResourceBundles(ResourceBundle entity)
		{
			this.SendPropertyChanging();
			entity.ElectricalGroup = this;
		}
		
		private void detach_ResourceBundles(ResourceBundle entity)
		{
			this.SendPropertyChanging();
			entity.ElectricalGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.NameTypes")]
	public partial class NameType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Description;
		
		private long _Id;
		
		private string _Name;
		
		private System.Nullable<long> _NameTypeAuthoritiesId;
		
		private EntitySet<Name> _Names;
		
		private EntityRef<NameTypeAuthority> _NameTypeAuthority;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNameTypeAuthoritiesIdChanging(System.Nullable<long> value);
    partial void OnNameTypeAuthoritiesIdChanged();
    #endregion
		
		public NameType()
		{
			this._Names = new EntitySet<Name>(new Action<Name>(this.attach_Names), new Action<Name>(this.detach_Names));
			this._NameTypeAuthority = default(EntityRef<NameTypeAuthority>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameTypeAuthoritiesId", DbType="BigInt")]
		public System.Nullable<long> NameTypeAuthoritiesId
		{
			get
			{
				return this._NameTypeAuthoritiesId;
			}
			set
			{
				if ((this._NameTypeAuthoritiesId != value))
				{
					if (this._NameTypeAuthority.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNameTypeAuthoritiesIdChanging(value);
					this.SendPropertyChanging();
					this._NameTypeAuthoritiesId = value;
					this.SendPropertyChanged("NameTypeAuthoritiesId");
					this.OnNameTypeAuthoritiesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NameType_Name", Storage="_Names", ThisKey="Id", OtherKey="NameTypeId")]
		public EntitySet<Name> Names
		{
			get
			{
				return this._Names;
			}
			set
			{
				this._Names.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NameTypeAuthority_NameType", Storage="_NameTypeAuthority", ThisKey="NameTypeAuthoritiesId", OtherKey="Id", IsForeignKey=true)]
		public NameTypeAuthority NameTypeAuthority
		{
			get
			{
				return this._NameTypeAuthority.Entity;
			}
			set
			{
				NameTypeAuthority previousValue = this._NameTypeAuthority.Entity;
				if (((previousValue != value) 
							|| (this._NameTypeAuthority.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NameTypeAuthority.Entity = null;
						previousValue.NameTypes.Remove(this);
					}
					this._NameTypeAuthority.Entity = value;
					if ((value != null))
					{
						value.NameTypes.Add(this);
						this._NameTypeAuthoritiesId = value.Id;
					}
					else
					{
						this._NameTypeAuthoritiesId = default(Nullable<long>);
					}
					this.SendPropertyChanged("NameTypeAuthority");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.NameType = this;
		}
		
		private void detach_Names(Name entity)
		{
			this.SendPropertyChanging();
			entity.NameType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="domain.NameTypeAuthorities")]
	public partial class NameTypeAuthority : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Description;
		
		private string _Name;
		
		private EntitySet<NameType> _NameTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public NameTypeAuthority()
		{
			this._NameTypes = new EntitySet<NameType>(new Action<NameType>(this.attach_NameTypes), new Action<NameType>(this.detach_NameTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NameTypeAuthority_NameType", Storage="_NameTypes", ThisKey="Id", OtherKey="NameTypeAuthoritiesId")]
		public EntitySet<NameType> NameTypes
		{
			get
			{
				return this._NameTypes;
			}
			set
			{
				this._NameTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NameTypes(NameType entity)
		{
			this.SendPropertyChanging();
			entity.NameTypeAuthority = this;
		}
		
		private void detach_NameTypes(NameType entity)
		{
			this.SendPropertyChanging();
			entity.NameTypeAuthority = null;
		}
	}
}
#pragma warning restore 1591
